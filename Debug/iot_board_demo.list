
iot_board_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059dc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005b64  08005b64  00015b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bac  08005bac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005bac  08005bac  00015bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bb4  08005bb4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bb4  08005bb4  00015bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bb8  08005bb8  00015bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005bbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d0  2000000c  08005bc8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006dc  08005bc8  000206dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c72f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000310e  00000000  00000000  0003c76b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001aa8  00000000  00000000  0003f880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001970  00000000  00000000  00041328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003682  00000000  00000000  00042c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c4b3  00000000  00000000  0004631a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9b2d  00000000  00000000  000627cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015c2fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000740c  00000000  00000000  0015c350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005b4c 	.word	0x08005b4c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005b4c 	.word	0x08005b4c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f000 ffe4 	bl	8001492 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 f86b 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f000 fb19 	bl	8000b04 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80004d2:	f000 f90b 	bl	80006ec <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80004d6:	f000 f941 	bl	800075c <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80004da:	f000 f97f 	bl	80007dc <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80004de:	f000 f9a3 	bl	8000828 <MX_SPI3_Init>
  MX_USART3_UART_Init();
 80004e2:	f000 fab1 	bl	8000a48 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80004e6:	f000 fadf 	bl	8000aa8 <MX_USB_OTG_FS_PCD_Init>
  MX_USART1_UART_Init();
 80004ea:	f000 fa7d 	bl	80009e8 <MX_USART1_UART_Init>
  MX_TIM15_Init();
 80004ee:	f000 f9d9 	bl	80008a4 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80004f2:	2100      	movs	r1, #0
 80004f4:	4829      	ldr	r0, [pc, #164]	; (800059c <main+0xdc>)
 80004f6:	f003 fc43 	bl	8003d80 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // minimum of 575 microseconds - 2460 microseconds duty cycle

  htim15.Instance->CCR1 = 575; // set motor angle to lowest
 80004fa:	4b28      	ldr	r3, [pc, #160]	; (800059c <main+0xdc>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	f240 223f 	movw	r2, #575	; 0x23f
 8000502:	635a      	str	r2, [r3, #52]	; 0x34

  HAL_Delay(2000); // set up time
 8000504:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000508:	f001 f838 	bl	800157c <HAL_Delay>

  int direction = 0;
 800050c:	2300      	movs	r3, #0
 800050e:	607b      	str	r3, [r7, #4]

    /* USER CODE BEGIN 3 */

	// TODO: stop PWM if button is not pressed for a while

	if (htim15.Instance->CCR1 < 2460 && !HAL_GPIO_ReadPin(BUTTON_EXTI13_GPIO_Port, BUTTON_EXTI13_Pin) && !direction) {
 8000510:	4b22      	ldr	r3, [pc, #136]	; (800059c <main+0xdc>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000516:	f640 129b 	movw	r2, #2459	; 0x99b
 800051a:	4293      	cmp	r3, r2
 800051c:	d812      	bhi.n	8000544 <main+0x84>
 800051e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000522:	481f      	ldr	r0, [pc, #124]	; (80005a0 <main+0xe0>)
 8000524:	f001 fc16 	bl	8001d54 <HAL_GPIO_ReadPin>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d10a      	bne.n	8000544 <main+0x84>
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d107      	bne.n	8000544 <main+0x84>
		htim15.Instance->CCR1++;
 8000534:	4b19      	ldr	r3, [pc, #100]	; (800059c <main+0xdc>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800053a:	3201      	adds	r2, #1
 800053c:	635a      	str	r2, [r3, #52]	; 0x34

		//lastPressed = HAL_GetTick();

		HAL_Delay(1);
 800053e:	2001      	movs	r0, #1
 8000540:	f001 f81c 	bl	800157c <HAL_Delay>
	}

	if (htim15.Instance->CCR1 > 575 && !HAL_GPIO_ReadPin(BUTTON_EXTI13_GPIO_Port, BUTTON_EXTI13_Pin) && direction) { // && !HAL_GPIO_ReadPin(BUTTON_EXTI13_GPIO_Port, BUTTON_EXTI13_Pin)) {
 8000544:	4b15      	ldr	r3, [pc, #84]	; (800059c <main+0xdc>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800054a:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800054e:	d312      	bcc.n	8000576 <main+0xb6>
 8000550:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000554:	4812      	ldr	r0, [pc, #72]	; (80005a0 <main+0xe0>)
 8000556:	f001 fbfd 	bl	8001d54 <HAL_GPIO_ReadPin>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d10a      	bne.n	8000576 <main+0xb6>
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d007      	beq.n	8000576 <main+0xb6>
		htim15.Instance->CCR1--;
 8000566:	4b0d      	ldr	r3, [pc, #52]	; (800059c <main+0xdc>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800056c:	3a01      	subs	r2, #1
 800056e:	635a      	str	r2, [r3, #52]	; 0x34

		HAL_Delay(1);
 8000570:	2001      	movs	r0, #1
 8000572:	f001 f803 	bl	800157c <HAL_Delay>
	}

	if (htim15.Instance->CCR1 == 2460) {
 8000576:	4b09      	ldr	r3, [pc, #36]	; (800059c <main+0xdc>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800057c:	f640 129c 	movw	r2, #2460	; 0x99c
 8000580:	4293      	cmp	r3, r2
 8000582:	d101      	bne.n	8000588 <main+0xc8>
			direction = 1;
 8000584:	2301      	movs	r3, #1
 8000586:	607b      	str	r3, [r7, #4]
		}

	if (htim15.Instance->CCR1 == 575) {
 8000588:	4b04      	ldr	r3, [pc, #16]	; (800059c <main+0xdc>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800058e:	f240 223f 	movw	r2, #575	; 0x23f
 8000592:	4293      	cmp	r3, r2
 8000594:	d1bc      	bne.n	8000510 <main+0x50>
		direction = 0;
 8000596:	2300      	movs	r3, #0
 8000598:	607b      	str	r3, [r7, #4]
	if (htim15.Instance->CCR1 < 2460 && !HAL_GPIO_ReadPin(BUTTON_EXTI13_GPIO_Port, BUTTON_EXTI13_Pin) && !direction) {
 800059a:	e7b9      	b.n	8000510 <main+0x50>
 800059c:	2000010c 	.word	0x2000010c
 80005a0:	48000800 	.word	0x48000800

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b0b8      	sub	sp, #224	; 0xe0
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005ae:	2244      	movs	r2, #68	; 0x44
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f005 fac2 	bl	8005b3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005c8:	463b      	mov	r3, r7
 80005ca:	2288      	movs	r2, #136	; 0x88
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f005 fab4 	bl	8005b3c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005d4:	f001 fe80 	bl	80022d8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005d8:	4b42      	ldr	r3, [pc, #264]	; (80006e4 <SystemClock_Config+0x140>)
 80005da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005de:	4a41      	ldr	r2, [pc, #260]	; (80006e4 <SystemClock_Config+0x140>)
 80005e0:	f023 0318 	bic.w	r3, r3, #24
 80005e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005e8:	2314      	movs	r3, #20
 80005ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005ee:	2301      	movs	r3, #1
 80005f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005f4:	2301      	movs	r3, #1
 80005f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000600:	2360      	movs	r3, #96	; 0x60
 8000602:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000606:	2302      	movs	r3, #2
 8000608:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800060c:	2301      	movs	r3, #1
 800060e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000612:	2301      	movs	r3, #1
 8000614:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000618:	2328      	movs	r3, #40	; 0x28
 800061a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800061e:	2307      	movs	r3, #7
 8000620:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000624:	2302      	movs	r3, #2
 8000626:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800062a:	2302      	movs	r3, #2
 800062c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000630:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000634:	4618      	mov	r0, r3
 8000636:	f001 ff8f 	bl	8002558 <HAL_RCC_OscConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000640:	f000 fc10 	bl	8000e64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000644:	230f      	movs	r3, #15
 8000646:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064a:	2303      	movs	r3, #3
 800064c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000662:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000666:	2104      	movs	r1, #4
 8000668:	4618      	mov	r0, r3
 800066a:	f002 fb5b 	bl	8002d24 <HAL_RCC_ClockConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000674:	f000 fbf6 	bl	8000e64 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8000678:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <SystemClock_Config+0x144>)
 800067a:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800067c:	2300      	movs	r3, #0
 800067e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000680:	2300      	movs	r3, #0
 8000682:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000684:	2300      	movs	r3, #0
 8000686:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000688:	2300      	movs	r3, #0
 800068a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800068e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000692:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000694:	2301      	movs	r3, #1
 8000696:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000698:	2301      	movs	r3, #1
 800069a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800069c:	2318      	movs	r3, #24
 800069e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80006a0:	2307      	movs	r3, #7
 80006a2:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006a4:	2302      	movs	r3, #2
 80006a6:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80006ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80006b0:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006b2:	463b      	mov	r3, r7
 80006b4:	4618      	mov	r0, r3
 80006b6:	f002 fd3b 	bl	8003130 <HAL_RCCEx_PeriphCLKConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x120>
  {
    Error_Handler();
 80006c0:	f000 fbd0 	bl	8000e64 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006c4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006c8:	f001 fe24 	bl	8002314 <HAL_PWREx_ControlVoltageScaling>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0x132>
  {
    Error_Handler();
 80006d2:	f000 fbc7 	bl	8000e64 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006d6:	f003 f815 	bl	8003704 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006da:	bf00      	nop
 80006dc:	37e0      	adds	r7, #224	; 0xe0
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40021000 	.word	0x40021000
 80006e8:	00012085 	.word	0x00012085

080006ec <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80006f0:	4b18      	ldr	r3, [pc, #96]	; (8000754 <MX_DFSDM1_Init+0x68>)
 80006f2:	4a19      	ldr	r2, [pc, #100]	; (8000758 <MX_DFSDM1_Init+0x6c>)
 80006f4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80006f6:	4b17      	ldr	r3, [pc, #92]	; (8000754 <MX_DFSDM1_Init+0x68>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80006fc:	4b15      	ldr	r3, [pc, #84]	; (8000754 <MX_DFSDM1_Init+0x68>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000702:	4b14      	ldr	r3, [pc, #80]	; (8000754 <MX_DFSDM1_Init+0x68>)
 8000704:	2202      	movs	r2, #2
 8000706:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <MX_DFSDM1_Init+0x68>)
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_DFSDM1_Init+0x68>)
 8000710:	2200      	movs	r2, #0
 8000712:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000714:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <MX_DFSDM1_Init+0x68>)
 8000716:	f44f 7280 	mov.w	r2, #256	; 0x100
 800071a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800071c:	4b0d      	ldr	r3, [pc, #52]	; (8000754 <MX_DFSDM1_Init+0x68>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000722:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <MX_DFSDM1_Init+0x68>)
 8000724:	2204      	movs	r2, #4
 8000726:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000728:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <MX_DFSDM1_Init+0x68>)
 800072a:	2200      	movs	r2, #0
 800072c:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_DFSDM1_Init+0x68>)
 8000730:	2201      	movs	r2, #1
 8000732:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000734:	4b07      	ldr	r3, [pc, #28]	; (8000754 <MX_DFSDM1_Init+0x68>)
 8000736:	2200      	movs	r2, #0
 8000738:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_DFSDM1_Init+0x68>)
 800073c:	2200      	movs	r2, #0
 800073e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000740:	4804      	ldr	r0, [pc, #16]	; (8000754 <MX_DFSDM1_Init+0x68>)
 8000742:	f001 f851 	bl	80017e8 <HAL_DFSDM_ChannelInit>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 800074c:	f000 fb8a 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20000050 	.word	0x20000050
 8000758:	40016020 	.word	0x40016020

0800075c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000760:	4b1b      	ldr	r3, [pc, #108]	; (80007d0 <MX_I2C2_Init+0x74>)
 8000762:	4a1c      	ldr	r2, [pc, #112]	; (80007d4 <MX_I2C2_Init+0x78>)
 8000764:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000766:	4b1a      	ldr	r3, [pc, #104]	; (80007d0 <MX_I2C2_Init+0x74>)
 8000768:	4a1b      	ldr	r2, [pc, #108]	; (80007d8 <MX_I2C2_Init+0x7c>)
 800076a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800076c:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <MX_I2C2_Init+0x74>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000772:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <MX_I2C2_Init+0x74>)
 8000774:	2201      	movs	r2, #1
 8000776:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000778:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <MX_I2C2_Init+0x74>)
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800077e:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <MX_I2C2_Init+0x74>)
 8000780:	2200      	movs	r2, #0
 8000782:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <MX_I2C2_Init+0x74>)
 8000786:	2200      	movs	r2, #0
 8000788:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800078a:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <MX_I2C2_Init+0x74>)
 800078c:	2200      	movs	r2, #0
 800078e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_I2C2_Init+0x74>)
 8000792:	2200      	movs	r2, #0
 8000794:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000796:	480e      	ldr	r0, [pc, #56]	; (80007d0 <MX_I2C2_Init+0x74>)
 8000798:	f001 fb2f 	bl	8001dfa <HAL_I2C_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80007a2:	f000 fb5f 	bl	8000e64 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007a6:	2100      	movs	r1, #0
 80007a8:	4809      	ldr	r0, [pc, #36]	; (80007d0 <MX_I2C2_Init+0x74>)
 80007aa:	f001 fbb5 	bl	8001f18 <HAL_I2CEx_ConfigAnalogFilter>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80007b4:	f000 fb56 	bl	8000e64 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007b8:	2100      	movs	r1, #0
 80007ba:	4805      	ldr	r0, [pc, #20]	; (80007d0 <MX_I2C2_Init+0x74>)
 80007bc:	f001 fbf7 	bl	8001fae <HAL_I2CEx_ConfigDigitalFilter>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80007c6:	f000 fb4d 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000560 	.word	0x20000560
 80007d4:	40005800 	.word	0x40005800
 80007d8:	10909cec 	.word	0x10909cec

080007dc <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <MX_QUADSPI_Init+0x44>)
 80007e2:	4a10      	ldr	r2, [pc, #64]	; (8000824 <MX_QUADSPI_Init+0x48>)
 80007e4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_QUADSPI_Init+0x44>)
 80007e8:	2202      	movs	r2, #2
 80007ea:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_QUADSPI_Init+0x44>)
 80007ee:	2204      	movs	r2, #4
 80007f0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <MX_QUADSPI_Init+0x44>)
 80007f4:	2210      	movs	r2, #16
 80007f6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80007f8:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_QUADSPI_Init+0x44>)
 80007fa:	2217      	movs	r2, #23
 80007fc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <MX_QUADSPI_Init+0x44>)
 8000800:	2200      	movs	r2, #0
 8000802:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_QUADSPI_Init+0x44>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800080a:	4805      	ldr	r0, [pc, #20]	; (8000820 <MX_QUADSPI_Init+0x44>)
 800080c:	f001 fde8 	bl	80023e0 <HAL_QSPI_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000816:	f000 fb25 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000694 	.word	0x20000694
 8000824:	a0001000 	.word	0xa0001000

08000828 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800082c:	4b1b      	ldr	r3, [pc, #108]	; (800089c <MX_SPI3_Init+0x74>)
 800082e:	4a1c      	ldr	r2, [pc, #112]	; (80008a0 <MX_SPI3_Init+0x78>)
 8000830:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000832:	4b1a      	ldr	r3, [pc, #104]	; (800089c <MX_SPI3_Init+0x74>)
 8000834:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000838:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800083a:	4b18      	ldr	r3, [pc, #96]	; (800089c <MX_SPI3_Init+0x74>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000840:	4b16      	ldr	r3, [pc, #88]	; (800089c <MX_SPI3_Init+0x74>)
 8000842:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000846:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000848:	4b14      	ldr	r3, [pc, #80]	; (800089c <MX_SPI3_Init+0x74>)
 800084a:	2200      	movs	r2, #0
 800084c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800084e:	4b13      	ldr	r3, [pc, #76]	; (800089c <MX_SPI3_Init+0x74>)
 8000850:	2200      	movs	r2, #0
 8000852:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000854:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_SPI3_Init+0x74>)
 8000856:	f44f 7200 	mov.w	r2, #512	; 0x200
 800085a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800085c:	4b0f      	ldr	r3, [pc, #60]	; (800089c <MX_SPI3_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <MX_SPI3_Init+0x74>)
 8000864:	2200      	movs	r2, #0
 8000866:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <MX_SPI3_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <MX_SPI3_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000874:	4b09      	ldr	r3, [pc, #36]	; (800089c <MX_SPI3_Init+0x74>)
 8000876:	2207      	movs	r2, #7
 8000878:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <MX_SPI3_Init+0x74>)
 800087c:	2200      	movs	r2, #0
 800087e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <MX_SPI3_Init+0x74>)
 8000882:	2208      	movs	r2, #8
 8000884:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000886:	4805      	ldr	r0, [pc, #20]	; (800089c <MX_SPI3_Init+0x74>)
 8000888:	f003 f91e 	bl	8003ac8 <HAL_SPI_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000892:	f000 fae7 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	200005ac 	.word	0x200005ac
 80008a0:	40003c00 	.word	0x40003c00

080008a4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b09a      	sub	sp, #104	; 0x68
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
 80008d4:	615a      	str	r2, [r3, #20]
 80008d6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	222c      	movs	r2, #44	; 0x2c
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f005 f92c 	bl	8005b3c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80008e4:	4b3e      	ldr	r3, [pc, #248]	; (80009e0 <MX_TIM15_Init+0x13c>)
 80008e6:	4a3f      	ldr	r2, [pc, #252]	; (80009e4 <MX_TIM15_Init+0x140>)
 80008e8:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 84;
 80008ea:	4b3d      	ldr	r3, [pc, #244]	; (80009e0 <MX_TIM15_Init+0x13c>)
 80008ec:	2254      	movs	r2, #84	; 0x54
 80008ee:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f0:	4b3b      	ldr	r3, [pc, #236]	; (80009e0 <MX_TIM15_Init+0x13c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000-1;
 80008f6:	4b3a      	ldr	r3, [pc, #232]	; (80009e0 <MX_TIM15_Init+0x13c>)
 80008f8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80008fc:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008fe:	4b38      	ldr	r3, [pc, #224]	; (80009e0 <MX_TIM15_Init+0x13c>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000904:	4b36      	ldr	r3, [pc, #216]	; (80009e0 <MX_TIM15_Init+0x13c>)
 8000906:	2200      	movs	r2, #0
 8000908:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800090a:	4b35      	ldr	r3, [pc, #212]	; (80009e0 <MX_TIM15_Init+0x13c>)
 800090c:	2280      	movs	r2, #128	; 0x80
 800090e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000910:	4833      	ldr	r0, [pc, #204]	; (80009e0 <MX_TIM15_Init+0x13c>)
 8000912:	f003 f97c 	bl	8003c0e <HAL_TIM_Base_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 800091c:	f000 faa2 	bl	8000e64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000920:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000924:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000926:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800092a:	4619      	mov	r1, r3
 800092c:	482c      	ldr	r0, [pc, #176]	; (80009e0 <MX_TIM15_Init+0x13c>)
 800092e:	f003 fc3d 	bl	80041ac <HAL_TIM_ConfigClockSource>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8000938:	f000 fa94 	bl	8000e64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800093c:	4828      	ldr	r0, [pc, #160]	; (80009e0 <MX_TIM15_Init+0x13c>)
 800093e:	f003 f9bd 	bl	8003cbc <HAL_TIM_PWM_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8000948:	f000 fa8c 	bl	8000e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800094c:	2300      	movs	r3, #0
 800094e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000950:	2300      	movs	r3, #0
 8000952:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000954:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000958:	4619      	mov	r1, r3
 800095a:	4821      	ldr	r0, [pc, #132]	; (80009e0 <MX_TIM15_Init+0x13c>)
 800095c:	f004 f91c 	bl	8004b98 <HAL_TIMEx_MasterConfigSynchronization>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8000966:	f000 fa7d 	bl	8000e64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800096a:	2360      	movs	r3, #96	; 0x60
 800096c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800096e:	2300      	movs	r3, #0
 8000970:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000972:	2300      	movs	r3, #0
 8000974:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000976:	2300      	movs	r3, #0
 8000978:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800097a:	2300      	movs	r3, #0
 800097c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800097e:	2300      	movs	r3, #0
 8000980:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000982:	2300      	movs	r3, #0
 8000984:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000986:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800098a:	2200      	movs	r2, #0
 800098c:	4619      	mov	r1, r3
 800098e:	4814      	ldr	r0, [pc, #80]	; (80009e0 <MX_TIM15_Init+0x13c>)
 8000990:	f003 fafc 	bl	8003f8c <HAL_TIM_PWM_ConfigChannel>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 800099a:	f000 fa63 	bl	8000e64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800099e:	2300      	movs	r3, #0
 80009a0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009a2:	2300      	movs	r3, #0
 80009a4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009ae:	2300      	movs	r3, #0
 80009b0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009b6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80009bc:	1d3b      	adds	r3, r7, #4
 80009be:	4619      	mov	r1, r3
 80009c0:	4807      	ldr	r0, [pc, #28]	; (80009e0 <MX_TIM15_Init+0x13c>)
 80009c2:	f004 f971 	bl	8004ca8 <HAL_TIMEx_ConfigBreakDeadTime>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM15_Init+0x12c>
  {
    Error_Handler();
 80009cc:	f000 fa4a 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80009d0:	4803      	ldr	r0, [pc, #12]	; (80009e0 <MX_TIM15_Init+0x13c>)
 80009d2:	f000 fba5 	bl	8001120 <HAL_TIM_MspPostInit>

}
 80009d6:	bf00      	nop
 80009d8:	3768      	adds	r7, #104	; 0x68
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	2000010c 	.word	0x2000010c
 80009e4:	40014000 	.word	0x40014000

080009e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009ec:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <MX_USART1_UART_Init+0x58>)
 80009ee:	4a15      	ldr	r2, [pc, #84]	; (8000a44 <MX_USART1_UART_Init+0x5c>)
 80009f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009f2:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <MX_USART1_UART_Init+0x58>)
 80009f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009fa:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <MX_USART1_UART_Init+0x58>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a00:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <MX_USART1_UART_Init+0x58>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <MX_USART1_UART_Init+0x58>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <MX_USART1_UART_Init+0x58>)
 8000a0e:	220c      	movs	r2, #12
 8000a10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <MX_USART1_UART_Init+0x58>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a18:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <MX_USART1_UART_Init+0x58>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a1e:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <MX_USART1_UART_Init+0x58>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <MX_USART1_UART_Init+0x58>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a2a:	4805      	ldr	r0, [pc, #20]	; (8000a40 <MX_USART1_UART_Init+0x58>)
 8000a2c:	f004 f9ba 	bl	8004da4 <HAL_UART_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a36:	f000 fa15 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000610 	.word	0x20000610
 8000a44:	40013800 	.word	0x40013800

08000a48 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a4c:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a4e:	4a15      	ldr	r2, [pc, #84]	; (8000aa4 <MX_USART3_UART_Init+0x5c>)
 8000a50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a52:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5a:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a60:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a66:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a6e:	220c      	movs	r2, #12
 8000a70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a72:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a78:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a7e:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a8a:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a8c:	f004 f98a 	bl	8004da4 <HAL_UART_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a96:	f000 f9e5 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000088 	.word	0x20000088
 8000aa4:	40004800 	.word	0x40004800

08000aa8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000aac:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ab2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab6:	2206      	movs	r2, #6
 8000ab8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000aba:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000abc:	2202      	movs	r2, #2
 8000abe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac2:	2202      	movs	r2, #2
 8000ac4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000ad8:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ade:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000aea:	4805      	ldr	r0, [pc, #20]	; (8000b00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aec:	f001 faab 	bl	8002046 <HAL_PCD_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000af6:	f000 f9b5 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000158 	.word	0x20000158

08000b04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	; 0x28
 8000b08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b1a:	4bba      	ldr	r3, [pc, #744]	; (8000e04 <MX_GPIO_Init+0x300>)
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1e:	4ab9      	ldr	r2, [pc, #740]	; (8000e04 <MX_GPIO_Init+0x300>)
 8000b20:	f043 0310 	orr.w	r3, r3, #16
 8000b24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b26:	4bb7      	ldr	r3, [pc, #732]	; (8000e04 <MX_GPIO_Init+0x300>)
 8000b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2a:	f003 0310 	and.w	r3, r3, #16
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b32:	4bb4      	ldr	r3, [pc, #720]	; (8000e04 <MX_GPIO_Init+0x300>)
 8000b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b36:	4ab3      	ldr	r2, [pc, #716]	; (8000e04 <MX_GPIO_Init+0x300>)
 8000b38:	f043 0304 	orr.w	r3, r3, #4
 8000b3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b3e:	4bb1      	ldr	r3, [pc, #708]	; (8000e04 <MX_GPIO_Init+0x300>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b42:	f003 0304 	and.w	r3, r3, #4
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	4bae      	ldr	r3, [pc, #696]	; (8000e04 <MX_GPIO_Init+0x300>)
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4e:	4aad      	ldr	r2, [pc, #692]	; (8000e04 <MX_GPIO_Init+0x300>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b56:	4bab      	ldr	r3, [pc, #684]	; (8000e04 <MX_GPIO_Init+0x300>)
 8000b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	60bb      	str	r3, [r7, #8]
 8000b60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b62:	4ba8      	ldr	r3, [pc, #672]	; (8000e04 <MX_GPIO_Init+0x300>)
 8000b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b66:	4aa7      	ldr	r2, [pc, #668]	; (8000e04 <MX_GPIO_Init+0x300>)
 8000b68:	f043 0302 	orr.w	r3, r3, #2
 8000b6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b6e:	4ba5      	ldr	r3, [pc, #660]	; (8000e04 <MX_GPIO_Init+0x300>)
 8000b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b72:	f003 0302 	and.w	r3, r3, #2
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b7a:	4ba2      	ldr	r3, [pc, #648]	; (8000e04 <MX_GPIO_Init+0x300>)
 8000b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7e:	4aa1      	ldr	r2, [pc, #644]	; (8000e04 <MX_GPIO_Init+0x300>)
 8000b80:	f043 0308 	orr.w	r3, r3, #8
 8000b84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b86:	4b9f      	ldr	r3, [pc, #636]	; (8000e04 <MX_GPIO_Init+0x300>)
 8000b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8a:	f003 0308 	and.w	r3, r3, #8
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000b98:	489b      	ldr	r0, [pc, #620]	; (8000e08 <MX_GPIO_Init+0x304>)
 8000b9a:	f001 f8f3 	bl	8001d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000ba4:	4899      	ldr	r0, [pc, #612]	; (8000e0c <MX_GPIO_Init+0x308>)
 8000ba6:	f001 f8ed 	bl	8001d84 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	f241 0181 	movw	r1, #4225	; 0x1081
 8000bb0:	4897      	ldr	r0, [pc, #604]	; (8000e10 <MX_GPIO_Init+0x30c>)
 8000bb2:	f001 f8e7 	bl	8001d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bbc:	4894      	ldr	r0, [pc, #592]	; (8000e10 <MX_GPIO_Init+0x30c>)
 8000bbe:	f001 f8e1 	bl	8001d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000bc8:	4892      	ldr	r0, [pc, #584]	; (8000e14 <MX_GPIO_Init+0x310>)
 8000bca:	f001 f8db 	bl	8001d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8000bd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd8:	f001 f8d4 	bl	8001d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	2120      	movs	r1, #32
 8000be0:	488a      	ldr	r0, [pc, #552]	; (8000e0c <MX_GPIO_Init+0x308>)
 8000be2:	f001 f8cf 	bl	8001d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000be6:	2201      	movs	r2, #1
 8000be8:	2101      	movs	r1, #1
 8000bea:	4887      	ldr	r0, [pc, #540]	; (8000e08 <MX_GPIO_Init+0x304>)
 8000bec:	f001 f8ca 	bl	8001d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000bf0:	f240 1315 	movw	r3, #277	; 0x115
 8000bf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c02:	f107 0314 	add.w	r3, r7, #20
 8000c06:	4619      	mov	r1, r3
 8000c08:	487f      	ldr	r0, [pc, #508]	; (8000e08 <MX_GPIO_Init+0x304>)
 8000c0a:	f000 fef9 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000c0e:	236a      	movs	r3, #106	; 0x6a
 8000c10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c12:	4b81      	ldr	r3, [pc, #516]	; (8000e18 <MX_GPIO_Init+0x314>)
 8000c14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c1a:	f107 0314 	add.w	r3, r7, #20
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4879      	ldr	r0, [pc, #484]	; (8000e08 <MX_GPIO_Init+0x304>)
 8000c22:	f000 feed 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000c26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c2c:	4b7b      	ldr	r3, [pc, #492]	; (8000e1c <MX_GPIO_Init+0x318>)
 8000c2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4876      	ldr	r0, [pc, #472]	; (8000e14 <MX_GPIO_Init+0x310>)
 8000c3c:	f000 fee0 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000c40:	233f      	movs	r3, #63	; 0x3f
 8000c42:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c44:	230b      	movs	r3, #11
 8000c46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	4619      	mov	r1, r3
 8000c52:	4870      	ldr	r0, [pc, #448]	; (8000e14 <MX_GPIO_Init+0x310>)
 8000c54:	f000 fed4 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c64:	2303      	movs	r3, #3
 8000c66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c68:	2308      	movs	r3, #8
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	4619      	mov	r1, r3
 8000c72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c76:	f000 fec3 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000c7a:	2308      	movs	r3, #8
 8000c7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2300      	movs	r3, #0
 8000c88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000c8e:	f107 0314 	add.w	r3, r7, #20
 8000c92:	4619      	mov	r1, r3
 8000c94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c98:	f000 feb2 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000c9c:	2310      	movs	r3, #16
 8000c9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ca0:	230b      	movs	r3, #11
 8000ca2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	4619      	mov	r1, r3
 8000cae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb2:	f000 fea5 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000cb6:	23e0      	movs	r3, #224	; 0xe0
 8000cb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cc6:	2305      	movs	r3, #5
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cca:	f107 0314 	add.w	r3, r7, #20
 8000cce:	4619      	mov	r1, r3
 8000cd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd4:	f000 fe94 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cdc:	4b4e      	ldr	r3, [pc, #312]	; (8000e18 <MX_GPIO_Init+0x314>)
 8000cde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4848      	ldr	r0, [pc, #288]	; (8000e0c <MX_GPIO_Init+0x308>)
 8000cec:	f000 fe88 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000cf4:	230b      	movs	r3, #11
 8000cf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	4619      	mov	r1, r3
 8000d02:	4842      	ldr	r0, [pc, #264]	; (8000e0c <MX_GPIO_Init+0x308>)
 8000d04:	f000 fe7c 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000d08:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000d0c:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d16:	2300      	movs	r3, #0
 8000d18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1a:	f107 0314 	add.w	r3, r7, #20
 8000d1e:	4619      	mov	r1, r3
 8000d20:	483a      	ldr	r0, [pc, #232]	; (8000e0c <MX_GPIO_Init+0x308>)
 8000d22:	f000 fe6d 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000d26:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000d2a:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d2c:	4b3a      	ldr	r3, [pc, #232]	; (8000e18 <MX_GPIO_Init+0x314>)
 8000d2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4835      	ldr	r0, [pc, #212]	; (8000e10 <MX_GPIO_Init+0x30c>)
 8000d3c:	f000 fe60 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000d40:	f243 0381 	movw	r3, #12417	; 0x3081
 8000d44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d46:	2301      	movs	r3, #1
 8000d48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d52:	f107 0314 	add.w	r3, r7, #20
 8000d56:	4619      	mov	r1, r3
 8000d58:	482d      	ldr	r0, [pc, #180]	; (8000e10 <MX_GPIO_Init+0x30c>)
 8000d5a:	f000 fe51 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000d5e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d64:	2301      	movs	r3, #1
 8000d66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	4619      	mov	r1, r3
 8000d76:	4827      	ldr	r0, [pc, #156]	; (8000e14 <MX_GPIO_Init+0x310>)
 8000d78:	f000 fe42 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000d7c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000d80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d82:	4b25      	ldr	r3, [pc, #148]	; (8000e18 <MX_GPIO_Init+0x314>)
 8000d84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4820      	ldr	r0, [pc, #128]	; (8000e14 <MX_GPIO_Init+0x310>)
 8000d92:	f000 fe35 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000d96:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8000d9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da4:	2300      	movs	r3, #0
 8000da6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	4619      	mov	r1, r3
 8000dae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db2:	f000 fe25 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000db6:	2302      	movs	r3, #2
 8000db8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dc6:	2305      	movs	r3, #5
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000dca:	f107 0314 	add.w	r3, r7, #20
 8000dce:	4619      	mov	r1, r3
 8000dd0:	480f      	ldr	r0, [pc, #60]	; (8000e10 <MX_GPIO_Init+0x30c>)
 8000dd2:	f000 fe15 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000dd6:	2378      	movs	r3, #120	; 0x78
 8000dd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de2:	2303      	movs	r3, #3
 8000de4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000de6:	2307      	movs	r3, #7
 8000de8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dea:	f107 0314 	add.w	r3, r7, #20
 8000dee:	4619      	mov	r1, r3
 8000df0:	4807      	ldr	r0, [pc, #28]	; (8000e10 <MX_GPIO_Init+0x30c>)
 8000df2:	f000 fe05 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000df6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dfc:	2312      	movs	r3, #18
 8000dfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e00:	2301      	movs	r3, #1
 8000e02:	e00d      	b.n	8000e20 <MX_GPIO_Init+0x31c>
 8000e04:	40021000 	.word	0x40021000
 8000e08:	48001000 	.word	0x48001000
 8000e0c:	48000400 	.word	0x48000400
 8000e10:	48000c00 	.word	0x48000c00
 8000e14:	48000800 	.word	0x48000800
 8000e18:	10110000 	.word	0x10110000
 8000e1c:	10210000 	.word	0x10210000
 8000e20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e22:	2303      	movs	r3, #3
 8000e24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e26:	2304      	movs	r3, #4
 8000e28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	4619      	mov	r1, r3
 8000e30:	480b      	ldr	r0, [pc, #44]	; (8000e60 <MX_GPIO_Init+0x35c>)
 8000e32:	f000 fde5 	bl	8001a00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2100      	movs	r1, #0
 8000e3a:	2017      	movs	r0, #23
 8000e3c:	f000 fc9d 	bl	800177a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e40:	2017      	movs	r0, #23
 8000e42:	f000 fcb6 	bl	80017b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2100      	movs	r1, #0
 8000e4a:	2028      	movs	r0, #40	; 0x28
 8000e4c:	f000 fc95 	bl	800177a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e50:	2028      	movs	r0, #40	; 0x28
 8000e52:	f000 fcae 	bl	80017b2 <HAL_NVIC_EnableIRQ>

}
 8000e56:	bf00      	nop
 8000e58:	3728      	adds	r7, #40	; 0x28
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	48000400 	.word	0x48000400

08000e64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e68:	b672      	cpsid	i
}
 8000e6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <Error_Handler+0x8>
	...

08000e70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e76:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <HAL_MspInit+0x44>)
 8000e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e7a:	4a0e      	ldr	r2, [pc, #56]	; (8000eb4 <HAL_MspInit+0x44>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	6613      	str	r3, [r2, #96]	; 0x60
 8000e82:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <HAL_MspInit+0x44>)
 8000e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e8e:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <HAL_MspInit+0x44>)
 8000e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e92:	4a08      	ldr	r2, [pc, #32]	; (8000eb4 <HAL_MspInit+0x44>)
 8000e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e98:	6593      	str	r3, [r2, #88]	; 0x58
 8000e9a:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <HAL_MspInit+0x44>)
 8000e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea2:	603b      	str	r3, [r7, #0]
 8000ea4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	40021000 	.word	0x40021000

08000eb8 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08a      	sub	sp, #40	; 0x28
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000ed0:	4b1a      	ldr	r3, [pc, #104]	; (8000f3c <HAL_DFSDM_ChannelMspInit+0x84>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d12d      	bne.n	8000f34 <HAL_DFSDM_ChannelMspInit+0x7c>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000ed8:	4b19      	ldr	r3, [pc, #100]	; (8000f40 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000edc:	4a18      	ldr	r2, [pc, #96]	; (8000f40 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000ede:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ee2:	6613      	str	r3, [r2, #96]	; 0x60
 8000ee4:	4b16      	ldr	r3, [pc, #88]	; (8000f40 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000ee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ee8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000eec:	613b      	str	r3, [r7, #16]
 8000eee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ef0:	4b13      	ldr	r3, [pc, #76]	; (8000f40 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef4:	4a12      	ldr	r2, [pc, #72]	; (8000f40 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000ef6:	f043 0310 	orr.w	r3, r3, #16
 8000efa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000efc:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f00:	f003 0310 	and.w	r3, r3, #16
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000f08:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000f0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f16:	2300      	movs	r3, #0
 8000f18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000f1a:	2306      	movs	r3, #6
 8000f1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f1e:	f107 0314 	add.w	r3, r7, #20
 8000f22:	4619      	mov	r1, r3
 8000f24:	4807      	ldr	r0, [pc, #28]	; (8000f44 <HAL_DFSDM_ChannelMspInit+0x8c>)
 8000f26:	f000 fd6b 	bl	8001a00 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000f2a:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <HAL_DFSDM_ChannelMspInit+0x84>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	4a02      	ldr	r2, [pc, #8]	; (8000f3c <HAL_DFSDM_ChannelMspInit+0x84>)
 8000f32:	6013      	str	r3, [r2, #0]
  }

}
 8000f34:	bf00      	nop
 8000f36:	3728      	adds	r7, #40	; 0x28
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000028 	.word	0x20000028
 8000f40:	40021000 	.word	0x40021000
 8000f44:	48001000 	.word	0x48001000

08000f48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08a      	sub	sp, #40	; 0x28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a17      	ldr	r2, [pc, #92]	; (8000fc4 <HAL_I2C_MspInit+0x7c>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d128      	bne.n	8000fbc <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6a:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <HAL_I2C_MspInit+0x80>)
 8000f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6e:	4a16      	ldr	r2, [pc, #88]	; (8000fc8 <HAL_I2C_MspInit+0x80>)
 8000f70:	f043 0302 	orr.w	r3, r3, #2
 8000f74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f76:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <HAL_I2C_MspInit+0x80>)
 8000f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7a:	f003 0302 	and.w	r3, r3, #2
 8000f7e:	613b      	str	r3, [r7, #16]
 8000f80:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000f82:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f88:	2312      	movs	r3, #18
 8000f8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f90:	2303      	movs	r3, #3
 8000f92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f94:	2304      	movs	r3, #4
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	480b      	ldr	r0, [pc, #44]	; (8000fcc <HAL_I2C_MspInit+0x84>)
 8000fa0:	f000 fd2e 	bl	8001a00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <HAL_I2C_MspInit+0x80>)
 8000fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fa8:	4a07      	ldr	r2, [pc, #28]	; (8000fc8 <HAL_I2C_MspInit+0x80>)
 8000faa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fae:	6593      	str	r3, [r2, #88]	; 0x58
 8000fb0:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <HAL_I2C_MspInit+0x80>)
 8000fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000fbc:	bf00      	nop
 8000fbe:	3728      	adds	r7, #40	; 0x28
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40005800 	.word	0x40005800
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	48000400 	.word	0x48000400

08000fd0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08a      	sub	sp, #40	; 0x28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a17      	ldr	r2, [pc, #92]	; (800104c <HAL_QSPI_MspInit+0x7c>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d128      	bne.n	8001044 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000ff2:	4b17      	ldr	r3, [pc, #92]	; (8001050 <HAL_QSPI_MspInit+0x80>)
 8000ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ff6:	4a16      	ldr	r2, [pc, #88]	; (8001050 <HAL_QSPI_MspInit+0x80>)
 8000ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ffc:	6513      	str	r3, [r2, #80]	; 0x50
 8000ffe:	4b14      	ldr	r3, [pc, #80]	; (8001050 <HAL_QSPI_MspInit+0x80>)
 8001000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800100a:	4b11      	ldr	r3, [pc, #68]	; (8001050 <HAL_QSPI_MspInit+0x80>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100e:	4a10      	ldr	r2, [pc, #64]	; (8001050 <HAL_QSPI_MspInit+0x80>)
 8001010:	f043 0310 	orr.w	r3, r3, #16
 8001014:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <HAL_QSPI_MspInit+0x80>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101a:	f003 0310 	and.w	r3, r3, #16
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001022:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001026:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001028:	2302      	movs	r3, #2
 800102a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001030:	2303      	movs	r3, #3
 8001032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001034:	230a      	movs	r3, #10
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	4619      	mov	r1, r3
 800103e:	4805      	ldr	r0, [pc, #20]	; (8001054 <HAL_QSPI_MspInit+0x84>)
 8001040:	f000 fcde 	bl	8001a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001044:	bf00      	nop
 8001046:	3728      	adds	r7, #40	; 0x28
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	a0001000 	.word	0xa0001000
 8001050:	40021000 	.word	0x40021000
 8001054:	48001000 	.word	0x48001000

08001058 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b08a      	sub	sp, #40	; 0x28
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a17      	ldr	r2, [pc, #92]	; (80010d4 <HAL_SPI_MspInit+0x7c>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d128      	bne.n	80010cc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800107a:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <HAL_SPI_MspInit+0x80>)
 800107c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107e:	4a16      	ldr	r2, [pc, #88]	; (80010d8 <HAL_SPI_MspInit+0x80>)
 8001080:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001084:	6593      	str	r3, [r2, #88]	; 0x58
 8001086:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <HAL_SPI_MspInit+0x80>)
 8001088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800108a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800108e:	613b      	str	r3, [r7, #16]
 8001090:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001092:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <HAL_SPI_MspInit+0x80>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001096:	4a10      	ldr	r2, [pc, #64]	; (80010d8 <HAL_SPI_MspInit+0x80>)
 8001098:	f043 0304 	orr.w	r3, r3, #4
 800109c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <HAL_SPI_MspInit+0x80>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a2:	f003 0304 	and.w	r3, r3, #4
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80010aa:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80010ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b0:	2302      	movs	r3, #2
 80010b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b8:	2303      	movs	r3, #3
 80010ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010bc:	2306      	movs	r3, #6
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	4619      	mov	r1, r3
 80010c6:	4805      	ldr	r0, [pc, #20]	; (80010dc <HAL_SPI_MspInit+0x84>)
 80010c8:	f000 fc9a 	bl	8001a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80010cc:	bf00      	nop
 80010ce:	3728      	adds	r7, #40	; 0x28
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40003c00 	.word	0x40003c00
 80010d8:	40021000 	.word	0x40021000
 80010dc:	48000800 	.word	0x48000800

080010e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a0a      	ldr	r2, [pc, #40]	; (8001118 <HAL_TIM_Base_MspInit+0x38>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d10b      	bne.n	800110a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80010f2:	4b0a      	ldr	r3, [pc, #40]	; (800111c <HAL_TIM_Base_MspInit+0x3c>)
 80010f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010f6:	4a09      	ldr	r2, [pc, #36]	; (800111c <HAL_TIM_Base_MspInit+0x3c>)
 80010f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010fc:	6613      	str	r3, [r2, #96]	; 0x60
 80010fe:	4b07      	ldr	r3, [pc, #28]	; (800111c <HAL_TIM_Base_MspInit+0x3c>)
 8001100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001102:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800110a:	bf00      	nop
 800110c:	3714      	adds	r7, #20
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	40014000 	.word	0x40014000
 800111c:	40021000 	.word	0x40021000

08001120 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 030c 	add.w	r3, r7, #12
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM15)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a11      	ldr	r2, [pc, #68]	; (8001184 <HAL_TIM_MspPostInit+0x64>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d11c      	bne.n	800117c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	4b11      	ldr	r3, [pc, #68]	; (8001188 <HAL_TIM_MspPostInit+0x68>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001146:	4a10      	ldr	r2, [pc, #64]	; (8001188 <HAL_TIM_MspPostInit+0x68>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800114e:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <HAL_TIM_MspPostInit+0x68>)
 8001150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PA2     ------> TIM15_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800115a:	2304      	movs	r3, #4
 800115c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115e:	2302      	movs	r3, #2
 8001160:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2300      	movs	r3, #0
 8001168:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800116a:	230e      	movs	r3, #14
 800116c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116e:	f107 030c 	add.w	r3, r7, #12
 8001172:	4619      	mov	r1, r3
 8001174:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001178:	f000 fc42 	bl	8001a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800117c:	bf00      	nop
 800117e:	3720      	adds	r7, #32
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40014000 	.word	0x40014000
 8001188:	40021000 	.word	0x40021000

0800118c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08c      	sub	sp, #48	; 0x30
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 031c 	add.w	r3, r7, #28
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a2e      	ldr	r2, [pc, #184]	; (8001264 <HAL_UART_MspInit+0xd8>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d128      	bne.n	8001200 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011ae:	4b2e      	ldr	r3, [pc, #184]	; (8001268 <HAL_UART_MspInit+0xdc>)
 80011b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011b2:	4a2d      	ldr	r2, [pc, #180]	; (8001268 <HAL_UART_MspInit+0xdc>)
 80011b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b8:	6613      	str	r3, [r2, #96]	; 0x60
 80011ba:	4b2b      	ldr	r3, [pc, #172]	; (8001268 <HAL_UART_MspInit+0xdc>)
 80011bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011c2:	61bb      	str	r3, [r7, #24]
 80011c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c6:	4b28      	ldr	r3, [pc, #160]	; (8001268 <HAL_UART_MspInit+0xdc>)
 80011c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ca:	4a27      	ldr	r2, [pc, #156]	; (8001268 <HAL_UART_MspInit+0xdc>)
 80011cc:	f043 0302 	orr.w	r3, r3, #2
 80011d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011d2:	4b25      	ldr	r3, [pc, #148]	; (8001268 <HAL_UART_MspInit+0xdc>)
 80011d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	617b      	str	r3, [r7, #20]
 80011dc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|GPIO_PIN_7;
 80011de:	23c0      	movs	r3, #192	; 0xc0
 80011e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e2:	2302      	movs	r3, #2
 80011e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ea:	2303      	movs	r3, #3
 80011ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011ee:	2307      	movs	r3, #7
 80011f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f2:	f107 031c 	add.w	r3, r7, #28
 80011f6:	4619      	mov	r1, r3
 80011f8:	481c      	ldr	r0, [pc, #112]	; (800126c <HAL_UART_MspInit+0xe0>)
 80011fa:	f000 fc01 	bl	8001a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011fe:	e02d      	b.n	800125c <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a1a      	ldr	r2, [pc, #104]	; (8001270 <HAL_UART_MspInit+0xe4>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d128      	bne.n	800125c <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 800120a:	4b17      	ldr	r3, [pc, #92]	; (8001268 <HAL_UART_MspInit+0xdc>)
 800120c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800120e:	4a16      	ldr	r2, [pc, #88]	; (8001268 <HAL_UART_MspInit+0xdc>)
 8001210:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001214:	6593      	str	r3, [r2, #88]	; 0x58
 8001216:	4b14      	ldr	r3, [pc, #80]	; (8001268 <HAL_UART_MspInit+0xdc>)
 8001218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800121a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001222:	4b11      	ldr	r3, [pc, #68]	; (8001268 <HAL_UART_MspInit+0xdc>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001226:	4a10      	ldr	r2, [pc, #64]	; (8001268 <HAL_UART_MspInit+0xdc>)
 8001228:	f043 0308 	orr.w	r3, r3, #8
 800122c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <HAL_UART_MspInit+0xdc>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001232:	f003 0308 	and.w	r3, r3, #8
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800123a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800123e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001240:	2302      	movs	r3, #2
 8001242:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001248:	2303      	movs	r3, #3
 800124a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800124c:	2307      	movs	r3, #7
 800124e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001250:	f107 031c 	add.w	r3, r7, #28
 8001254:	4619      	mov	r1, r3
 8001256:	4807      	ldr	r0, [pc, #28]	; (8001274 <HAL_UART_MspInit+0xe8>)
 8001258:	f000 fbd2 	bl	8001a00 <HAL_GPIO_Init>
}
 800125c:	bf00      	nop
 800125e:	3730      	adds	r7, #48	; 0x30
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40013800 	.word	0x40013800
 8001268:	40021000 	.word	0x40021000
 800126c:	48000400 	.word	0x48000400
 8001270:	40004800 	.word	0x40004800
 8001274:	48000c00 	.word	0x48000c00

08001278 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08a      	sub	sp, #40	; 0x28
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001298:	d146      	bne.n	8001328 <HAL_PCD_MspInit+0xb0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129a:	4b25      	ldr	r3, [pc, #148]	; (8001330 <HAL_PCD_MspInit+0xb8>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129e:	4a24      	ldr	r2, [pc, #144]	; (8001330 <HAL_PCD_MspInit+0xb8>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a6:	4b22      	ldr	r3, [pc, #136]	; (8001330 <HAL_PCD_MspInit+0xb8>)
 80012a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	613b      	str	r3, [r7, #16]
 80012b0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80012b2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80012b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b8:	2302      	movs	r3, #2
 80012ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c0:	2303      	movs	r3, #3
 80012c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80012c4:	230a      	movs	r3, #10
 80012c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	4619      	mov	r1, r3
 80012ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d2:	f000 fb95 	bl	8001a00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80012d6:	4b16      	ldr	r3, [pc, #88]	; (8001330 <HAL_PCD_MspInit+0xb8>)
 80012d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012da:	4a15      	ldr	r2, [pc, #84]	; (8001330 <HAL_PCD_MspInit+0xb8>)
 80012dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012e2:	4b13      	ldr	r3, [pc, #76]	; (8001330 <HAL_PCD_MspInit+0xb8>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012ee:	4b10      	ldr	r3, [pc, #64]	; (8001330 <HAL_PCD_MspInit+0xb8>)
 80012f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d114      	bne.n	8001324 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012fa:	4b0d      	ldr	r3, [pc, #52]	; (8001330 <HAL_PCD_MspInit+0xb8>)
 80012fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012fe:	4a0c      	ldr	r2, [pc, #48]	; (8001330 <HAL_PCD_MspInit+0xb8>)
 8001300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001304:	6593      	str	r3, [r2, #88]	; 0x58
 8001306:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <HAL_PCD_MspInit+0xb8>)
 8001308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800130a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001312:	f001 f855 	bl	80023c0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001316:	4b06      	ldr	r3, [pc, #24]	; (8001330 <HAL_PCD_MspInit+0xb8>)
 8001318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131a:	4a05      	ldr	r2, [pc, #20]	; (8001330 <HAL_PCD_MspInit+0xb8>)
 800131c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001320:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001322:	e001      	b.n	8001328 <HAL_PCD_MspInit+0xb0>
      HAL_PWREx_EnableVddUSB();
 8001324:	f001 f84c 	bl	80023c0 <HAL_PWREx_EnableVddUSB>
}
 8001328:	bf00      	nop
 800132a:	3728      	adds	r7, #40	; 0x28
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40021000 	.word	0x40021000

08001334 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001338:	e7fe      	b.n	8001338 <NMI_Handler+0x4>

0800133a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800133e:	e7fe      	b.n	800133e <HardFault_Handler+0x4>

08001340 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001344:	e7fe      	b.n	8001344 <MemManage_Handler+0x4>

08001346 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800134a:	e7fe      	b.n	800134a <BusFault_Handler+0x4>

0800134c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <UsageFault_Handler+0x4>

08001352 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001380:	f000 f8dc 	bl	800153c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}

08001388 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800138c:	2020      	movs	r0, #32
 800138e:	f000 fd11 	bl	8001db4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001392:	2040      	movs	r0, #64	; 0x40
 8001394:	f000 fd0e 	bl	8001db4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001398:	2080      	movs	r0, #128	; 0x80
 800139a:	f000 fd0b 	bl	8001db4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800139e:	f44f 7080 	mov.w	r0, #256	; 0x100
 80013a2:	f000 fd07 	bl	8001db4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}

080013aa <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80013ae:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80013b2:	f000 fcff 	bl	8001db4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80013b6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80013ba:	f000 fcfb 	bl	8001db4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80013be:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013c2:	f000 fcf7 	bl	8001db4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80013c6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80013ca:	f000 fcf3 	bl	8001db4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80013ce:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80013d2:	f000 fcef 	bl	8001db4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013e0:	4b15      	ldr	r3, [pc, #84]	; (8001438 <SystemInit+0x5c>)
 80013e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013e6:	4a14      	ldr	r2, [pc, #80]	; (8001438 <SystemInit+0x5c>)
 80013e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80013f0:	4b12      	ldr	r3, [pc, #72]	; (800143c <SystemInit+0x60>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a11      	ldr	r2, [pc, #68]	; (800143c <SystemInit+0x60>)
 80013f6:	f043 0301 	orr.w	r3, r3, #1
 80013fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80013fc:	4b0f      	ldr	r3, [pc, #60]	; (800143c <SystemInit+0x60>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001402:	4b0e      	ldr	r3, [pc, #56]	; (800143c <SystemInit+0x60>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a0d      	ldr	r2, [pc, #52]	; (800143c <SystemInit+0x60>)
 8001408:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800140c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001410:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001412:	4b0a      	ldr	r3, [pc, #40]	; (800143c <SystemInit+0x60>)
 8001414:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001418:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800141a:	4b08      	ldr	r3, [pc, #32]	; (800143c <SystemInit+0x60>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a07      	ldr	r2, [pc, #28]	; (800143c <SystemInit+0x60>)
 8001420:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001424:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001426:	4b05      	ldr	r3, [pc, #20]	; (800143c <SystemInit+0x60>)
 8001428:	2200      	movs	r2, #0
 800142a:	619a      	str	r2, [r3, #24]
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000ed00 	.word	0xe000ed00
 800143c:	40021000 	.word	0x40021000

08001440 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001440:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001478 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001444:	f7ff ffca 	bl	80013dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001448:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800144a:	e003      	b.n	8001454 <LoopCopyDataInit>

0800144c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800144c:	4b0b      	ldr	r3, [pc, #44]	; (800147c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800144e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001450:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001452:	3104      	adds	r1, #4

08001454 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001454:	480a      	ldr	r0, [pc, #40]	; (8001480 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001456:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001458:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800145a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800145c:	d3f6      	bcc.n	800144c <CopyDataInit>
	ldr	r2, =_sbss
 800145e:	4a0a      	ldr	r2, [pc, #40]	; (8001488 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001460:	e002      	b.n	8001468 <LoopFillZerobss>

08001462 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001462:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001464:	f842 3b04 	str.w	r3, [r2], #4

08001468 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001468:	4b08      	ldr	r3, [pc, #32]	; (800148c <LoopForever+0x16>)
	cmp	r2, r3
 800146a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800146c:	d3f9      	bcc.n	8001462 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800146e:	f004 fb41 	bl	8005af4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001472:	f7ff f825 	bl	80004c0 <main>

08001476 <LoopForever>:

LoopForever:
    b LoopForever
 8001476:	e7fe      	b.n	8001476 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001478:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800147c:	08005bbc 	.word	0x08005bbc
	ldr	r0, =_sdata
 8001480:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001484:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001488:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 800148c:	200006dc 	.word	0x200006dc

08001490 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001490:	e7fe      	b.n	8001490 <ADC1_2_IRQHandler>

08001492 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b082      	sub	sp, #8
 8001496:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001498:	2300      	movs	r3, #0
 800149a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800149c:	2003      	movs	r0, #3
 800149e:	f000 f961 	bl	8001764 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014a2:	2000      	movs	r0, #0
 80014a4:	f000 f80e 	bl	80014c4 <HAL_InitTick>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d002      	beq.n	80014b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	71fb      	strb	r3, [r7, #7]
 80014b2:	e001      	b.n	80014b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014b4:	f7ff fcdc 	bl	8000e70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014b8:	79fb      	ldrb	r3, [r7, #7]
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
	...

080014c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014cc:	2300      	movs	r3, #0
 80014ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80014d0:	4b17      	ldr	r3, [pc, #92]	; (8001530 <HAL_InitTick+0x6c>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d023      	beq.n	8001520 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80014d8:	4b16      	ldr	r3, [pc, #88]	; (8001534 <HAL_InitTick+0x70>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	4b14      	ldr	r3, [pc, #80]	; (8001530 <HAL_InitTick+0x6c>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	4619      	mov	r1, r3
 80014e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ee:	4618      	mov	r0, r3
 80014f0:	f000 f96d 	bl	80017ce <HAL_SYSTICK_Config>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d10f      	bne.n	800151a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b0f      	cmp	r3, #15
 80014fe:	d809      	bhi.n	8001514 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001500:	2200      	movs	r2, #0
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	f04f 30ff 	mov.w	r0, #4294967295
 8001508:	f000 f937 	bl	800177a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800150c:	4a0a      	ldr	r2, [pc, #40]	; (8001538 <HAL_InitTick+0x74>)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6013      	str	r3, [r2, #0]
 8001512:	e007      	b.n	8001524 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	73fb      	strb	r3, [r7, #15]
 8001518:	e004      	b.n	8001524 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	73fb      	strb	r3, [r7, #15]
 800151e:	e001      	b.n	8001524 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001524:	7bfb      	ldrb	r3, [r7, #15]
}
 8001526:	4618      	mov	r0, r3
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000008 	.word	0x20000008
 8001534:	20000000 	.word	0x20000000
 8001538:	20000004 	.word	0x20000004

0800153c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <HAL_IncTick+0x20>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	461a      	mov	r2, r3
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <HAL_IncTick+0x24>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4413      	add	r3, r2
 800154c:	4a04      	ldr	r2, [pc, #16]	; (8001560 <HAL_IncTick+0x24>)
 800154e:	6013      	str	r3, [r2, #0]
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	20000008 	.word	0x20000008
 8001560:	200006d8 	.word	0x200006d8

08001564 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return uwTick;
 8001568:	4b03      	ldr	r3, [pc, #12]	; (8001578 <HAL_GetTick+0x14>)
 800156a:	681b      	ldr	r3, [r3, #0]
}
 800156c:	4618      	mov	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	200006d8 	.word	0x200006d8

0800157c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001584:	f7ff ffee 	bl	8001564 <HAL_GetTick>
 8001588:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001594:	d005      	beq.n	80015a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001596:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <HAL_Delay+0x44>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	461a      	mov	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	4413      	add	r3, r2
 80015a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015a2:	bf00      	nop
 80015a4:	f7ff ffde 	bl	8001564 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d8f7      	bhi.n	80015a4 <HAL_Delay+0x28>
  {
  }
}
 80015b4:	bf00      	nop
 80015b6:	bf00      	nop
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000008 	.word	0x20000008

080015c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d4:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <__NVIC_SetPriorityGrouping+0x44>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015e0:	4013      	ands	r3, r2
 80015e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015f6:	4a04      	ldr	r2, [pc, #16]	; (8001608 <__NVIC_SetPriorityGrouping+0x44>)
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	60d3      	str	r3, [r2, #12]
}
 80015fc:	bf00      	nop
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001610:	4b04      	ldr	r3, [pc, #16]	; (8001624 <__NVIC_GetPriorityGrouping+0x18>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	0a1b      	lsrs	r3, r3, #8
 8001616:	f003 0307 	and.w	r3, r3, #7
}
 800161a:	4618      	mov	r0, r3
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001636:	2b00      	cmp	r3, #0
 8001638:	db0b      	blt.n	8001652 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	f003 021f 	and.w	r2, r3, #31
 8001640:	4907      	ldr	r1, [pc, #28]	; (8001660 <__NVIC_EnableIRQ+0x38>)
 8001642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001646:	095b      	lsrs	r3, r3, #5
 8001648:	2001      	movs	r0, #1
 800164a:	fa00 f202 	lsl.w	r2, r0, r2
 800164e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001652:	bf00      	nop
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	e000e100 	.word	0xe000e100

08001664 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	6039      	str	r1, [r7, #0]
 800166e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001674:	2b00      	cmp	r3, #0
 8001676:	db0a      	blt.n	800168e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	b2da      	uxtb	r2, r3
 800167c:	490c      	ldr	r1, [pc, #48]	; (80016b0 <__NVIC_SetPriority+0x4c>)
 800167e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001682:	0112      	lsls	r2, r2, #4
 8001684:	b2d2      	uxtb	r2, r2
 8001686:	440b      	add	r3, r1
 8001688:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800168c:	e00a      	b.n	80016a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	b2da      	uxtb	r2, r3
 8001692:	4908      	ldr	r1, [pc, #32]	; (80016b4 <__NVIC_SetPriority+0x50>)
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	f003 030f 	and.w	r3, r3, #15
 800169a:	3b04      	subs	r3, #4
 800169c:	0112      	lsls	r2, r2, #4
 800169e:	b2d2      	uxtb	r2, r2
 80016a0:	440b      	add	r3, r1
 80016a2:	761a      	strb	r2, [r3, #24]
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	e000e100 	.word	0xe000e100
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b089      	sub	sp, #36	; 0x24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	f1c3 0307 	rsb	r3, r3, #7
 80016d2:	2b04      	cmp	r3, #4
 80016d4:	bf28      	it	cs
 80016d6:	2304      	movcs	r3, #4
 80016d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	3304      	adds	r3, #4
 80016de:	2b06      	cmp	r3, #6
 80016e0:	d902      	bls.n	80016e8 <NVIC_EncodePriority+0x30>
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	3b03      	subs	r3, #3
 80016e6:	e000      	b.n	80016ea <NVIC_EncodePriority+0x32>
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ec:	f04f 32ff 	mov.w	r2, #4294967295
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	43da      	mvns	r2, r3
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	401a      	ands	r2, r3
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001700:	f04f 31ff 	mov.w	r1, #4294967295
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	fa01 f303 	lsl.w	r3, r1, r3
 800170a:	43d9      	mvns	r1, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001710:	4313      	orrs	r3, r2
         );
}
 8001712:	4618      	mov	r0, r3
 8001714:	3724      	adds	r7, #36	; 0x24
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
	...

08001720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3b01      	subs	r3, #1
 800172c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001730:	d301      	bcc.n	8001736 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001732:	2301      	movs	r3, #1
 8001734:	e00f      	b.n	8001756 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001736:	4a0a      	ldr	r2, [pc, #40]	; (8001760 <SysTick_Config+0x40>)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3b01      	subs	r3, #1
 800173c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800173e:	210f      	movs	r1, #15
 8001740:	f04f 30ff 	mov.w	r0, #4294967295
 8001744:	f7ff ff8e 	bl	8001664 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001748:	4b05      	ldr	r3, [pc, #20]	; (8001760 <SysTick_Config+0x40>)
 800174a:	2200      	movs	r2, #0
 800174c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800174e:	4b04      	ldr	r3, [pc, #16]	; (8001760 <SysTick_Config+0x40>)
 8001750:	2207      	movs	r2, #7
 8001752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	e000e010 	.word	0xe000e010

08001764 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f7ff ff29 	bl	80015c4 <__NVIC_SetPriorityGrouping>
}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b086      	sub	sp, #24
 800177e:	af00      	add	r7, sp, #0
 8001780:	4603      	mov	r3, r0
 8001782:	60b9      	str	r1, [r7, #8]
 8001784:	607a      	str	r2, [r7, #4]
 8001786:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800178c:	f7ff ff3e 	bl	800160c <__NVIC_GetPriorityGrouping>
 8001790:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	68b9      	ldr	r1, [r7, #8]
 8001796:	6978      	ldr	r0, [r7, #20]
 8001798:	f7ff ff8e 	bl	80016b8 <NVIC_EncodePriority>
 800179c:	4602      	mov	r2, r0
 800179e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017a2:	4611      	mov	r1, r2
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff ff5d 	bl	8001664 <__NVIC_SetPriority>
}
 80017aa:	bf00      	nop
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b082      	sub	sp, #8
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	4603      	mov	r3, r0
 80017ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff ff31 	bl	8001628 <__NVIC_EnableIRQ>
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7ff ffa2 	bl	8001720 <SysTick_Config>
 80017dc:	4603      	mov	r3, r0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
	...

080017e8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e0ac      	b.n	8001954 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 f8b2 	bl	8001968 <DFSDM_GetChannelFromInstance>
 8001804:	4603      	mov	r3, r0
 8001806:	4a55      	ldr	r2, [pc, #340]	; (800195c <HAL_DFSDM_ChannelInit+0x174>)
 8001808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e09f      	b.n	8001954 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff fb4f 	bl	8000eb8 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800181a:	4b51      	ldr	r3, [pc, #324]	; (8001960 <HAL_DFSDM_ChannelInit+0x178>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	3301      	adds	r3, #1
 8001820:	4a4f      	ldr	r2, [pc, #316]	; (8001960 <HAL_DFSDM_ChannelInit+0x178>)
 8001822:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001824:	4b4e      	ldr	r3, [pc, #312]	; (8001960 <HAL_DFSDM_ChannelInit+0x178>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d125      	bne.n	8001878 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800182c:	4b4d      	ldr	r3, [pc, #308]	; (8001964 <HAL_DFSDM_ChannelInit+0x17c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a4c      	ldr	r2, [pc, #304]	; (8001964 <HAL_DFSDM_ChannelInit+0x17c>)
 8001832:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001836:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001838:	4b4a      	ldr	r3, [pc, #296]	; (8001964 <HAL_DFSDM_ChannelInit+0x17c>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	4948      	ldr	r1, [pc, #288]	; (8001964 <HAL_DFSDM_ChannelInit+0x17c>)
 8001842:	4313      	orrs	r3, r2
 8001844:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001846:	4b47      	ldr	r3, [pc, #284]	; (8001964 <HAL_DFSDM_ChannelInit+0x17c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a46      	ldr	r2, [pc, #280]	; (8001964 <HAL_DFSDM_ChannelInit+0x17c>)
 800184c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001850:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	791b      	ldrb	r3, [r3, #4]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d108      	bne.n	800186c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800185a:	4b42      	ldr	r3, [pc, #264]	; (8001964 <HAL_DFSDM_ChannelInit+0x17c>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	3b01      	subs	r3, #1
 8001864:	041b      	lsls	r3, r3, #16
 8001866:	493f      	ldr	r1, [pc, #252]	; (8001964 <HAL_DFSDM_ChannelInit+0x17c>)
 8001868:	4313      	orrs	r3, r2
 800186a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800186c:	4b3d      	ldr	r3, [pc, #244]	; (8001964 <HAL_DFSDM_ChannelInit+0x17c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a3c      	ldr	r2, [pc, #240]	; (8001964 <HAL_DFSDM_ChannelInit+0x17c>)
 8001872:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001876:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001886:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6819      	ldr	r1, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001896:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800189c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	430a      	orrs	r2, r1
 80018a4:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 020f 	bic.w	r2, r2, #15
 80018b4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6819      	ldr	r1, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80018c4:	431a      	orrs	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	430a      	orrs	r2, r1
 80018cc:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80018dc:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	6899      	ldr	r1, [r3, #8]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ec:	3b01      	subs	r3, #1
 80018ee:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80018f0:	431a      	orrs	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	430a      	orrs	r2, r1
 80018f8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	685a      	ldr	r2, [r3, #4]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f002 0207 	and.w	r2, r2, #7
 8001908:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	6859      	ldr	r1, [r3, #4]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001914:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800191c:	431a      	orrs	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	430a      	orrs	r2, r1
 8001924:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001934:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2201      	movs	r2, #1
 800193a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f000 f810 	bl	8001968 <DFSDM_GetChannelFromInstance>
 8001948:	4602      	mov	r2, r0
 800194a:	4904      	ldr	r1, [pc, #16]	; (800195c <HAL_DFSDM_ChannelInit+0x174>)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20000030 	.word	0x20000030
 8001960:	2000002c 	.word	0x2000002c
 8001964:	40016000 	.word	0x40016000

08001968 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a1c      	ldr	r2, [pc, #112]	; (80019e4 <DFSDM_GetChannelFromInstance+0x7c>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d102      	bne.n	800197e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001978:	2300      	movs	r3, #0
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	e02b      	b.n	80019d6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a19      	ldr	r2, [pc, #100]	; (80019e8 <DFSDM_GetChannelFromInstance+0x80>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d102      	bne.n	800198c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001986:	2301      	movs	r3, #1
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	e024      	b.n	80019d6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a17      	ldr	r2, [pc, #92]	; (80019ec <DFSDM_GetChannelFromInstance+0x84>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d102      	bne.n	800199a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001994:	2302      	movs	r3, #2
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	e01d      	b.n	80019d6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a14      	ldr	r2, [pc, #80]	; (80019f0 <DFSDM_GetChannelFromInstance+0x88>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d102      	bne.n	80019a8 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80019a2:	2304      	movs	r3, #4
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	e016      	b.n	80019d6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a12      	ldr	r2, [pc, #72]	; (80019f4 <DFSDM_GetChannelFromInstance+0x8c>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d102      	bne.n	80019b6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80019b0:	2305      	movs	r3, #5
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	e00f      	b.n	80019d6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a0f      	ldr	r2, [pc, #60]	; (80019f8 <DFSDM_GetChannelFromInstance+0x90>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d102      	bne.n	80019c4 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80019be:	2306      	movs	r3, #6
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	e008      	b.n	80019d6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a0d      	ldr	r2, [pc, #52]	; (80019fc <DFSDM_GetChannelFromInstance+0x94>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d102      	bne.n	80019d2 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80019cc:	2307      	movs	r3, #7
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	e001      	b.n	80019d6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80019d2:	2303      	movs	r3, #3
 80019d4:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80019d6:	68fb      	ldr	r3, [r7, #12]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	40016000 	.word	0x40016000
 80019e8:	40016020 	.word	0x40016020
 80019ec:	40016040 	.word	0x40016040
 80019f0:	40016080 	.word	0x40016080
 80019f4:	400160a0 	.word	0x400160a0
 80019f8:	400160c0 	.word	0x400160c0
 80019fc:	400160e0 	.word	0x400160e0

08001a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b087      	sub	sp, #28
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a0e:	e17f      	b.n	8001d10 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	2101      	movs	r1, #1
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f000 8171 	beq.w	8001d0a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d00b      	beq.n	8001a48 <HAL_GPIO_Init+0x48>
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d007      	beq.n	8001a48 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a3c:	2b11      	cmp	r3, #17
 8001a3e:	d003      	beq.n	8001a48 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	2b12      	cmp	r3, #18
 8001a46:	d130      	bne.n	8001aaa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	2203      	movs	r2, #3
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	68da      	ldr	r2, [r3, #12]
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a7e:	2201      	movs	r2, #1
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43db      	mvns	r3, r3
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	091b      	lsrs	r3, r3, #4
 8001a94:	f003 0201 	and.w	r2, r3, #1
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f003 0303 	and.w	r3, r3, #3
 8001ab2:	2b03      	cmp	r3, #3
 8001ab4:	d118      	bne.n	8001ae8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001abc:	2201      	movs	r2, #1
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	08db      	lsrs	r3, r3, #3
 8001ad2:	f003 0201 	and.w	r2, r3, #1
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	2203      	movs	r2, #3
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	4013      	ands	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d003      	beq.n	8001b28 <HAL_GPIO_Init+0x128>
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	2b12      	cmp	r3, #18
 8001b26:	d123      	bne.n	8001b70 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	08da      	lsrs	r2, r3, #3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3208      	adds	r2, #8
 8001b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b34:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	f003 0307 	and.w	r3, r3, #7
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	220f      	movs	r2, #15
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	43db      	mvns	r3, r3
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	691a      	ldr	r2, [r3, #16]
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	08da      	lsrs	r2, r3, #3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	3208      	adds	r2, #8
 8001b6a:	6939      	ldr	r1, [r7, #16]
 8001b6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	2203      	movs	r2, #3
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	4013      	ands	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 0203 	and.w	r2, r3, #3
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f000 80ac 	beq.w	8001d0a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bb2:	4b5f      	ldr	r3, [pc, #380]	; (8001d30 <HAL_GPIO_Init+0x330>)
 8001bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bb6:	4a5e      	ldr	r2, [pc, #376]	; (8001d30 <HAL_GPIO_Init+0x330>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	6613      	str	r3, [r2, #96]	; 0x60
 8001bbe:	4b5c      	ldr	r3, [pc, #368]	; (8001d30 <HAL_GPIO_Init+0x330>)
 8001bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	60bb      	str	r3, [r7, #8]
 8001bc8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bca:	4a5a      	ldr	r2, [pc, #360]	; (8001d34 <HAL_GPIO_Init+0x334>)
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	089b      	lsrs	r3, r3, #2
 8001bd0:	3302      	adds	r3, #2
 8001bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	f003 0303 	and.w	r3, r3, #3
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	220f      	movs	r2, #15
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43db      	mvns	r3, r3
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	4013      	ands	r3, r2
 8001bec:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bf4:	d025      	beq.n	8001c42 <HAL_GPIO_Init+0x242>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a4f      	ldr	r2, [pc, #316]	; (8001d38 <HAL_GPIO_Init+0x338>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d01f      	beq.n	8001c3e <HAL_GPIO_Init+0x23e>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a4e      	ldr	r2, [pc, #312]	; (8001d3c <HAL_GPIO_Init+0x33c>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d019      	beq.n	8001c3a <HAL_GPIO_Init+0x23a>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a4d      	ldr	r2, [pc, #308]	; (8001d40 <HAL_GPIO_Init+0x340>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d013      	beq.n	8001c36 <HAL_GPIO_Init+0x236>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a4c      	ldr	r2, [pc, #304]	; (8001d44 <HAL_GPIO_Init+0x344>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d00d      	beq.n	8001c32 <HAL_GPIO_Init+0x232>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a4b      	ldr	r2, [pc, #300]	; (8001d48 <HAL_GPIO_Init+0x348>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d007      	beq.n	8001c2e <HAL_GPIO_Init+0x22e>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a4a      	ldr	r2, [pc, #296]	; (8001d4c <HAL_GPIO_Init+0x34c>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d101      	bne.n	8001c2a <HAL_GPIO_Init+0x22a>
 8001c26:	2306      	movs	r3, #6
 8001c28:	e00c      	b.n	8001c44 <HAL_GPIO_Init+0x244>
 8001c2a:	2307      	movs	r3, #7
 8001c2c:	e00a      	b.n	8001c44 <HAL_GPIO_Init+0x244>
 8001c2e:	2305      	movs	r3, #5
 8001c30:	e008      	b.n	8001c44 <HAL_GPIO_Init+0x244>
 8001c32:	2304      	movs	r3, #4
 8001c34:	e006      	b.n	8001c44 <HAL_GPIO_Init+0x244>
 8001c36:	2303      	movs	r3, #3
 8001c38:	e004      	b.n	8001c44 <HAL_GPIO_Init+0x244>
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	e002      	b.n	8001c44 <HAL_GPIO_Init+0x244>
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e000      	b.n	8001c44 <HAL_GPIO_Init+0x244>
 8001c42:	2300      	movs	r3, #0
 8001c44:	697a      	ldr	r2, [r7, #20]
 8001c46:	f002 0203 	and.w	r2, r2, #3
 8001c4a:	0092      	lsls	r2, r2, #2
 8001c4c:	4093      	lsls	r3, r2
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c54:	4937      	ldr	r1, [pc, #220]	; (8001d34 <HAL_GPIO_Init+0x334>)
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	089b      	lsrs	r3, r3, #2
 8001c5a:	3302      	adds	r3, #2
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c62:	4b3b      	ldr	r3, [pc, #236]	; (8001d50 <HAL_GPIO_Init+0x350>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c86:	4a32      	ldr	r2, [pc, #200]	; (8001d50 <HAL_GPIO_Init+0x350>)
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001c8c:	4b30      	ldr	r3, [pc, #192]	; (8001d50 <HAL_GPIO_Init+0x350>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	43db      	mvns	r3, r3
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d003      	beq.n	8001cb0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cb0:	4a27      	ldr	r2, [pc, #156]	; (8001d50 <HAL_GPIO_Init+0x350>)
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cb6:	4b26      	ldr	r3, [pc, #152]	; (8001d50 <HAL_GPIO_Init+0x350>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001cda:	4a1d      	ldr	r2, [pc, #116]	; (8001d50 <HAL_GPIO_Init+0x350>)
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ce0:	4b1b      	ldr	r3, [pc, #108]	; (8001d50 <HAL_GPIO_Init+0x350>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	4013      	ands	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d04:	4a12      	ldr	r2, [pc, #72]	; (8001d50 <HAL_GPIO_Init+0x350>)
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	fa22 f303 	lsr.w	r3, r2, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f47f ae78 	bne.w	8001a10 <HAL_GPIO_Init+0x10>
  }
}
 8001d20:	bf00      	nop
 8001d22:	bf00      	nop
 8001d24:	371c      	adds	r7, #28
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40021000 	.word	0x40021000
 8001d34:	40010000 	.word	0x40010000
 8001d38:	48000400 	.word	0x48000400
 8001d3c:	48000800 	.word	0x48000800
 8001d40:	48000c00 	.word	0x48000c00
 8001d44:	48001000 	.word	0x48001000
 8001d48:	48001400 	.word	0x48001400
 8001d4c:	48001800 	.word	0x48001800
 8001d50:	40010400 	.word	0x40010400

08001d54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	691a      	ldr	r2, [r3, #16]
 8001d64:	887b      	ldrh	r3, [r7, #2]
 8001d66:	4013      	ands	r3, r2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d002      	beq.n	8001d72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	73fb      	strb	r3, [r7, #15]
 8001d70:	e001      	b.n	8001d76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d72:	2300      	movs	r3, #0
 8001d74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	807b      	strh	r3, [r7, #2]
 8001d90:	4613      	mov	r3, r2
 8001d92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d94:	787b      	ldrb	r3, [r7, #1]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d9a:	887a      	ldrh	r2, [r7, #2]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001da0:	e002      	b.n	8001da8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001da2:	887a      	ldrh	r2, [r7, #2]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001dbe:	4b08      	ldr	r3, [pc, #32]	; (8001de0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dc0:	695a      	ldr	r2, [r3, #20]
 8001dc2:	88fb      	ldrh	r3, [r7, #6]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d006      	beq.n	8001dd8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dca:	4a05      	ldr	r2, [pc, #20]	; (8001de0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dcc:	88fb      	ldrh	r3, [r7, #6]
 8001dce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001dd0:	88fb      	ldrh	r3, [r7, #6]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f000 f806 	bl	8001de4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001dd8:	bf00      	nop
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40010400 	.word	0x40010400

08001de4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b082      	sub	sp, #8
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e081      	b.n	8001f10 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d106      	bne.n	8001e26 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f7ff f891 	bl	8000f48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2224      	movs	r2, #36	; 0x24
 8001e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 0201 	bic.w	r2, r2, #1
 8001e3c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e4a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689a      	ldr	r2, [r3, #8]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e5a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d107      	bne.n	8001e74 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e70:	609a      	str	r2, [r3, #8]
 8001e72:	e006      	b.n	8001e82 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e80:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d104      	bne.n	8001e94 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e92:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	6812      	ldr	r2, [r2, #0]
 8001e9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ea2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ea6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68da      	ldr	r2, [r3, #12]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001eb6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	691a      	ldr	r2, [r3, #16]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	695b      	ldr	r3, [r3, #20]
 8001ec0:	ea42 0103 	orr.w	r1, r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	021a      	lsls	r2, r3, #8
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	69d9      	ldr	r1, [r3, #28]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a1a      	ldr	r2, [r3, #32]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f042 0201 	orr.w	r2, r2, #1
 8001ef0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2220      	movs	r2, #32
 8001efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3708      	adds	r7, #8
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b20      	cmp	r3, #32
 8001f2c:	d138      	bne.n	8001fa0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d101      	bne.n	8001f3c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f38:	2302      	movs	r3, #2
 8001f3a:	e032      	b.n	8001fa2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2224      	movs	r2, #36	; 0x24
 8001f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f022 0201 	bic.w	r2, r2, #1
 8001f5a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f6a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6819      	ldr	r1, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f042 0201 	orr.w	r2, r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2220      	movs	r2, #32
 8001f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	e000      	b.n	8001fa2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001fa0:	2302      	movs	r3, #2
  }
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b085      	sub	sp, #20
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
 8001fb6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b20      	cmp	r3, #32
 8001fc2:	d139      	bne.n	8002038 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d101      	bne.n	8001fd2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001fce:	2302      	movs	r3, #2
 8001fd0:	e033      	b.n	800203a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2224      	movs	r2, #36	; 0x24
 8001fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 0201 	bic.w	r2, r2, #1
 8001ff0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002000:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	021b      	lsls	r3, r3, #8
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	4313      	orrs	r3, r2
 800200a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f042 0201 	orr.w	r2, r2, #1
 8002022:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2220      	movs	r2, #32
 8002028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002034:	2300      	movs	r3, #0
 8002036:	e000      	b.n	800203a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002038:	2302      	movs	r3, #2
  }
}
 800203a:	4618      	mov	r0, r3
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002046:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002048:	b08f      	sub	sp, #60	; 0x3c
 800204a:	af0a      	add	r7, sp, #40	; 0x28
 800204c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e116      	b.n	8002286 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	d106      	bne.n	8002078 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7ff f900 	bl	8001278 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2203      	movs	r2, #3
 800207c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002088:	2b00      	cmp	r3, #0
 800208a:	d102      	bne.n	8002092 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f003 faef 	bl	800567a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	603b      	str	r3, [r7, #0]
 80020a2:	687e      	ldr	r6, [r7, #4]
 80020a4:	466d      	mov	r5, sp
 80020a6:	f106 0410 	add.w	r4, r6, #16
 80020aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80020ba:	1d33      	adds	r3, r6, #4
 80020bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020be:	6838      	ldr	r0, [r7, #0]
 80020c0:	f003 faaf 	bl	8005622 <USB_CoreInit>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d005      	beq.n	80020d6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2202      	movs	r2, #2
 80020ce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e0d7      	b.n	8002286 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2100      	movs	r1, #0
 80020dc:	4618      	mov	r0, r3
 80020de:	f003 fadd 	bl	800569c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020e2:	2300      	movs	r3, #0
 80020e4:	73fb      	strb	r3, [r7, #15]
 80020e6:	e04a      	b.n	800217e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020e8:	7bfa      	ldrb	r2, [r7, #15]
 80020ea:	6879      	ldr	r1, [r7, #4]
 80020ec:	4613      	mov	r3, r2
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	1a9b      	subs	r3, r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	440b      	add	r3, r1
 80020f6:	333d      	adds	r3, #61	; 0x3d
 80020f8:	2201      	movs	r2, #1
 80020fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020fc:	7bfa      	ldrb	r2, [r7, #15]
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	4613      	mov	r3, r2
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	1a9b      	subs	r3, r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	440b      	add	r3, r1
 800210a:	333c      	adds	r3, #60	; 0x3c
 800210c:	7bfa      	ldrb	r2, [r7, #15]
 800210e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002110:	7bfa      	ldrb	r2, [r7, #15]
 8002112:	7bfb      	ldrb	r3, [r7, #15]
 8002114:	b298      	uxth	r0, r3
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	4613      	mov	r3, r2
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	1a9b      	subs	r3, r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	440b      	add	r3, r1
 8002122:	3342      	adds	r3, #66	; 0x42
 8002124:	4602      	mov	r2, r0
 8002126:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002128:	7bfa      	ldrb	r2, [r7, #15]
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	4613      	mov	r3, r2
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	1a9b      	subs	r3, r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	440b      	add	r3, r1
 8002136:	333f      	adds	r3, #63	; 0x3f
 8002138:	2200      	movs	r2, #0
 800213a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800213c:	7bfa      	ldrb	r2, [r7, #15]
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	4613      	mov	r3, r2
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	1a9b      	subs	r3, r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	440b      	add	r3, r1
 800214a:	3344      	adds	r3, #68	; 0x44
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002150:	7bfa      	ldrb	r2, [r7, #15]
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	4613      	mov	r3, r2
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	1a9b      	subs	r3, r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	440b      	add	r3, r1
 800215e:	3348      	adds	r3, #72	; 0x48
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002164:	7bfa      	ldrb	r2, [r7, #15]
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	4613      	mov	r3, r2
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	1a9b      	subs	r3, r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	440b      	add	r3, r1
 8002172:	3350      	adds	r3, #80	; 0x50
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002178:	7bfb      	ldrb	r3, [r7, #15]
 800217a:	3301      	adds	r3, #1
 800217c:	73fb      	strb	r3, [r7, #15]
 800217e:	7bfa      	ldrb	r2, [r7, #15]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	429a      	cmp	r2, r3
 8002186:	d3af      	bcc.n	80020e8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002188:	2300      	movs	r3, #0
 800218a:	73fb      	strb	r3, [r7, #15]
 800218c:	e044      	b.n	8002218 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800218e:	7bfa      	ldrb	r2, [r7, #15]
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	4613      	mov	r3, r2
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	1a9b      	subs	r3, r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	440b      	add	r3, r1
 800219c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80021a0:	2200      	movs	r2, #0
 80021a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021a4:	7bfa      	ldrb	r2, [r7, #15]
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	4613      	mov	r3, r2
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	1a9b      	subs	r3, r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	440b      	add	r3, r1
 80021b2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80021b6:	7bfa      	ldrb	r2, [r7, #15]
 80021b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021ba:	7bfa      	ldrb	r2, [r7, #15]
 80021bc:	6879      	ldr	r1, [r7, #4]
 80021be:	4613      	mov	r3, r2
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	1a9b      	subs	r3, r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	440b      	add	r3, r1
 80021c8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80021cc:	2200      	movs	r2, #0
 80021ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021d0:	7bfa      	ldrb	r2, [r7, #15]
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	4613      	mov	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	1a9b      	subs	r3, r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	440b      	add	r3, r1
 80021de:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80021e2:	2200      	movs	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021e6:	7bfa      	ldrb	r2, [r7, #15]
 80021e8:	6879      	ldr	r1, [r7, #4]
 80021ea:	4613      	mov	r3, r2
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	1a9b      	subs	r3, r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	440b      	add	r3, r1
 80021f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021fc:	7bfa      	ldrb	r2, [r7, #15]
 80021fe:	6879      	ldr	r1, [r7, #4]
 8002200:	4613      	mov	r3, r2
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	1a9b      	subs	r3, r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	440b      	add	r3, r1
 800220a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002212:	7bfb      	ldrb	r3, [r7, #15]
 8002214:	3301      	adds	r3, #1
 8002216:	73fb      	strb	r3, [r7, #15]
 8002218:	7bfa      	ldrb	r2, [r7, #15]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	429a      	cmp	r2, r3
 8002220:	d3b5      	bcc.n	800218e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	603b      	str	r3, [r7, #0]
 8002228:	687e      	ldr	r6, [r7, #4]
 800222a:	466d      	mov	r5, sp
 800222c:	f106 0410 	add.w	r4, r6, #16
 8002230:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002232:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002234:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002236:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002238:	e894 0003 	ldmia.w	r4, {r0, r1}
 800223c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002240:	1d33      	adds	r3, r6, #4
 8002242:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002244:	6838      	ldr	r0, [r7, #0]
 8002246:	f003 fa53 	bl	80056f0 <USB_DevInit>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d005      	beq.n	800225c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2202      	movs	r2, #2
 8002254:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e014      	b.n	8002286 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002270:	2b01      	cmp	r3, #1
 8002272:	d102      	bne.n	800227a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f000 f80a 	bl	800228e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f003 fbe3 	bl	8005a4a <USB_DevDisconnect>

  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3714      	adds	r7, #20
 800228a:	46bd      	mov	sp, r7
 800228c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800228e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800228e:	b480      	push	{r7}
 8002290:	b085      	sub	sp, #20
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022c0:	f043 0303 	orr.w	r3, r3, #3
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3714      	adds	r7, #20
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
	...

080022d8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022dc:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a04      	ldr	r2, [pc, #16]	; (80022f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80022e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022e6:	6013      	str	r3, [r2, #0]
}
 80022e8:	bf00      	nop
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	40007000 	.word	0x40007000

080022f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80022fc:	4b04      	ldr	r3, [pc, #16]	; (8002310 <HAL_PWREx_GetVoltageRange+0x18>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002304:	4618      	mov	r0, r3
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	40007000 	.word	0x40007000

08002314 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002322:	d130      	bne.n	8002386 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002324:	4b23      	ldr	r3, [pc, #140]	; (80023b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800232c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002330:	d038      	beq.n	80023a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002332:	4b20      	ldr	r3, [pc, #128]	; (80023b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800233a:	4a1e      	ldr	r2, [pc, #120]	; (80023b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800233c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002340:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002342:	4b1d      	ldr	r3, [pc, #116]	; (80023b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2232      	movs	r2, #50	; 0x32
 8002348:	fb02 f303 	mul.w	r3, r2, r3
 800234c:	4a1b      	ldr	r2, [pc, #108]	; (80023bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800234e:	fba2 2303 	umull	r2, r3, r2, r3
 8002352:	0c9b      	lsrs	r3, r3, #18
 8002354:	3301      	adds	r3, #1
 8002356:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002358:	e002      	b.n	8002360 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	3b01      	subs	r3, #1
 800235e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002360:	4b14      	ldr	r3, [pc, #80]	; (80023b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002362:	695b      	ldr	r3, [r3, #20]
 8002364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002368:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800236c:	d102      	bne.n	8002374 <HAL_PWREx_ControlVoltageScaling+0x60>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1f2      	bne.n	800235a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002374:	4b0f      	ldr	r3, [pc, #60]	; (80023b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002376:	695b      	ldr	r3, [r3, #20]
 8002378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800237c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002380:	d110      	bne.n	80023a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e00f      	b.n	80023a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002386:	4b0b      	ldr	r3, [pc, #44]	; (80023b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800238e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002392:	d007      	beq.n	80023a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002394:	4b07      	ldr	r3, [pc, #28]	; (80023b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800239c:	4a05      	ldr	r2, [pc, #20]	; (80023b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800239e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3714      	adds	r7, #20
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	40007000 	.word	0x40007000
 80023b8:	20000000 	.word	0x20000000
 80023bc:	431bde83 	.word	0x431bde83

080023c0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80023c4:	4b05      	ldr	r3, [pc, #20]	; (80023dc <HAL_PWREx_EnableVddUSB+0x1c>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	4a04      	ldr	r2, [pc, #16]	; (80023dc <HAL_PWREx_EnableVddUSB+0x1c>)
 80023ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023ce:	6053      	str	r3, [r2, #4]
}
 80023d0:	bf00      	nop
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	40007000 	.word	0x40007000

080023e0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af02      	add	r7, sp, #8
 80023e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80023e8:	f7ff f8bc 	bl	8001564 <HAL_GetTick>
 80023ec:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d101      	bne.n	80023f8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e063      	b.n	80024c0 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2b00      	cmp	r3, #0
 8002402:	d10b      	bne.n	800241c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f7fe fddf 	bl	8000fd0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002412:	f241 3188 	movw	r1, #5000	; 0x1388
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f858 	bl	80024cc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	3b01      	subs	r3, #1
 800242c:	021a      	lsls	r2, r3, #8
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	430a      	orrs	r2, r1
 8002434:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	2120      	movs	r1, #32
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 f850 	bl	80024e8 <QSPI_WaitFlagStateUntilTimeout>
 8002448:	4603      	mov	r3, r0
 800244a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800244c:	7afb      	ldrb	r3, [r7, #11]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d131      	bne.n	80024b6 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800245c:	f023 0310 	bic.w	r3, r3, #16
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	6852      	ldr	r2, [r2, #4]
 8002464:	0611      	lsls	r1, r2, #24
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	68d2      	ldr	r2, [r2, #12]
 800246a:	4311      	orrs	r1, r2
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	6812      	ldr	r2, [r2, #0]
 8002470:	430b      	orrs	r3, r1
 8002472:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	4b13      	ldr	r3, [pc, #76]	; (80024c8 <HAL_QSPI_Init+0xe8>)
 800247c:	4013      	ands	r3, r2
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	6912      	ldr	r2, [r2, #16]
 8002482:	0411      	lsls	r1, r2, #16
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6952      	ldr	r2, [r2, #20]
 8002488:	4311      	orrs	r1, r2
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	6992      	ldr	r2, [r2, #24]
 800248e:	4311      	orrs	r1, r2
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	6812      	ldr	r2, [r2, #0]
 8002494:	430b      	orrs	r3, r1
 8002496:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0201 	orr.w	r2, r2, #1
 80024a6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2201      	movs	r2, #1
 80024b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80024be:	7afb      	ldrb	r3, [r7, #11]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	ffe0f8fe 	.word	0xffe0f8fe

080024cc <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	641a      	str	r2, [r3, #64]	; 0x40
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	603b      	str	r3, [r7, #0]
 80024f4:	4613      	mov	r3, r2
 80024f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80024f8:	e01a      	b.n	8002530 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002500:	d016      	beq.n	8002530 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002502:	f7ff f82f 	bl	8001564 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	429a      	cmp	r2, r3
 8002510:	d302      	bcc.n	8002518 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10b      	bne.n	8002530 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2204      	movs	r2, #4
 800251c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002524:	f043 0201 	orr.w	r2, r3, #1
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e00e      	b.n	800254e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	689a      	ldr	r2, [r3, #8]
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	4013      	ands	r3, r2
 800253a:	2b00      	cmp	r3, #0
 800253c:	bf14      	ite	ne
 800253e:	2301      	movne	r3, #1
 8002540:	2300      	moveq	r3, #0
 8002542:	b2db      	uxtb	r3, r3
 8002544:	461a      	mov	r2, r3
 8002546:	79fb      	ldrb	r3, [r7, #7]
 8002548:	429a      	cmp	r2, r3
 800254a:	d1d6      	bne.n	80024fa <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
	...

08002558 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b088      	sub	sp, #32
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e3d4      	b.n	8002d14 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800256a:	4ba1      	ldr	r3, [pc, #644]	; (80027f0 <HAL_RCC_OscConfig+0x298>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 030c 	and.w	r3, r3, #12
 8002572:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002574:	4b9e      	ldr	r3, [pc, #632]	; (80027f0 <HAL_RCC_OscConfig+0x298>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	f003 0303 	and.w	r3, r3, #3
 800257c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0310 	and.w	r3, r3, #16
 8002586:	2b00      	cmp	r3, #0
 8002588:	f000 80e4 	beq.w	8002754 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d007      	beq.n	80025a2 <HAL_RCC_OscConfig+0x4a>
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	2b0c      	cmp	r3, #12
 8002596:	f040 808b 	bne.w	80026b0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	2b01      	cmp	r3, #1
 800259e:	f040 8087 	bne.w	80026b0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025a2:	4b93      	ldr	r3, [pc, #588]	; (80027f0 <HAL_RCC_OscConfig+0x298>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d005      	beq.n	80025ba <HAL_RCC_OscConfig+0x62>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e3ac      	b.n	8002d14 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a1a      	ldr	r2, [r3, #32]
 80025be:	4b8c      	ldr	r3, [pc, #560]	; (80027f0 <HAL_RCC_OscConfig+0x298>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0308 	and.w	r3, r3, #8
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d004      	beq.n	80025d4 <HAL_RCC_OscConfig+0x7c>
 80025ca:	4b89      	ldr	r3, [pc, #548]	; (80027f0 <HAL_RCC_OscConfig+0x298>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025d2:	e005      	b.n	80025e0 <HAL_RCC_OscConfig+0x88>
 80025d4:	4b86      	ldr	r3, [pc, #536]	; (80027f0 <HAL_RCC_OscConfig+0x298>)
 80025d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025da:	091b      	lsrs	r3, r3, #4
 80025dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d223      	bcs.n	800262c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f000 fd41 	bl	8003070 <RCC_SetFlashLatencyFromMSIRange>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e38d      	b.n	8002d14 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025f8:	4b7d      	ldr	r3, [pc, #500]	; (80027f0 <HAL_RCC_OscConfig+0x298>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a7c      	ldr	r2, [pc, #496]	; (80027f0 <HAL_RCC_OscConfig+0x298>)
 80025fe:	f043 0308 	orr.w	r3, r3, #8
 8002602:	6013      	str	r3, [r2, #0]
 8002604:	4b7a      	ldr	r3, [pc, #488]	; (80027f0 <HAL_RCC_OscConfig+0x298>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	4977      	ldr	r1, [pc, #476]	; (80027f0 <HAL_RCC_OscConfig+0x298>)
 8002612:	4313      	orrs	r3, r2
 8002614:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002616:	4b76      	ldr	r3, [pc, #472]	; (80027f0 <HAL_RCC_OscConfig+0x298>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	021b      	lsls	r3, r3, #8
 8002624:	4972      	ldr	r1, [pc, #456]	; (80027f0 <HAL_RCC_OscConfig+0x298>)
 8002626:	4313      	orrs	r3, r2
 8002628:	604b      	str	r3, [r1, #4]
 800262a:	e025      	b.n	8002678 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800262c:	4b70      	ldr	r3, [pc, #448]	; (80027f0 <HAL_RCC_OscConfig+0x298>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a6f      	ldr	r2, [pc, #444]	; (80027f0 <HAL_RCC_OscConfig+0x298>)
 8002632:	f043 0308 	orr.w	r3, r3, #8
 8002636:	6013      	str	r3, [r2, #0]
 8002638:	4b6d      	ldr	r3, [pc, #436]	; (80027f0 <HAL_RCC_OscConfig+0x298>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	496a      	ldr	r1, [pc, #424]	; (80027f0 <HAL_RCC_OscConfig+0x298>)
 8002646:	4313      	orrs	r3, r2
 8002648:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800264a:	4b69      	ldr	r3, [pc, #420]	; (80027f0 <HAL_RCC_OscConfig+0x298>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	021b      	lsls	r3, r3, #8
 8002658:	4965      	ldr	r1, [pc, #404]	; (80027f0 <HAL_RCC_OscConfig+0x298>)
 800265a:	4313      	orrs	r3, r2
 800265c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d109      	bne.n	8002678 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	4618      	mov	r0, r3
 800266a:	f000 fd01 	bl	8003070 <RCC_SetFlashLatencyFromMSIRange>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e34d      	b.n	8002d14 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002678:	f000 fc36 	bl	8002ee8 <HAL_RCC_GetSysClockFreq>
 800267c:	4602      	mov	r2, r0
 800267e:	4b5c      	ldr	r3, [pc, #368]	; (80027f0 <HAL_RCC_OscConfig+0x298>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	091b      	lsrs	r3, r3, #4
 8002684:	f003 030f 	and.w	r3, r3, #15
 8002688:	495a      	ldr	r1, [pc, #360]	; (80027f4 <HAL_RCC_OscConfig+0x29c>)
 800268a:	5ccb      	ldrb	r3, [r1, r3]
 800268c:	f003 031f 	and.w	r3, r3, #31
 8002690:	fa22 f303 	lsr.w	r3, r2, r3
 8002694:	4a58      	ldr	r2, [pc, #352]	; (80027f8 <HAL_RCC_OscConfig+0x2a0>)
 8002696:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002698:	4b58      	ldr	r3, [pc, #352]	; (80027fc <HAL_RCC_OscConfig+0x2a4>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4618      	mov	r0, r3
 800269e:	f7fe ff11 	bl	80014c4 <HAL_InitTick>
 80026a2:	4603      	mov	r3, r0
 80026a4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80026a6:	7bfb      	ldrb	r3, [r7, #15]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d052      	beq.n	8002752 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80026ac:	7bfb      	ldrb	r3, [r7, #15]
 80026ae:	e331      	b.n	8002d14 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d032      	beq.n	800271e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80026b8:	4b4d      	ldr	r3, [pc, #308]	; (80027f0 <HAL_RCC_OscConfig+0x298>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a4c      	ldr	r2, [pc, #304]	; (80027f0 <HAL_RCC_OscConfig+0x298>)
 80026be:	f043 0301 	orr.w	r3, r3, #1
 80026c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026c4:	f7fe ff4e 	bl	8001564 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026cc:	f7fe ff4a 	bl	8001564 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e31a      	b.n	8002d14 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026de:	4b44      	ldr	r3, [pc, #272]	; (80027f0 <HAL_RCC_OscConfig+0x298>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0f0      	beq.n	80026cc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026ea:	4b41      	ldr	r3, [pc, #260]	; (80027f0 <HAL_RCC_OscConfig+0x298>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a40      	ldr	r2, [pc, #256]	; (80027f0 <HAL_RCC_OscConfig+0x298>)
 80026f0:	f043 0308 	orr.w	r3, r3, #8
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	4b3e      	ldr	r3, [pc, #248]	; (80027f0 <HAL_RCC_OscConfig+0x298>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	493b      	ldr	r1, [pc, #236]	; (80027f0 <HAL_RCC_OscConfig+0x298>)
 8002704:	4313      	orrs	r3, r2
 8002706:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002708:	4b39      	ldr	r3, [pc, #228]	; (80027f0 <HAL_RCC_OscConfig+0x298>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	69db      	ldr	r3, [r3, #28]
 8002714:	021b      	lsls	r3, r3, #8
 8002716:	4936      	ldr	r1, [pc, #216]	; (80027f0 <HAL_RCC_OscConfig+0x298>)
 8002718:	4313      	orrs	r3, r2
 800271a:	604b      	str	r3, [r1, #4]
 800271c:	e01a      	b.n	8002754 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800271e:	4b34      	ldr	r3, [pc, #208]	; (80027f0 <HAL_RCC_OscConfig+0x298>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a33      	ldr	r2, [pc, #204]	; (80027f0 <HAL_RCC_OscConfig+0x298>)
 8002724:	f023 0301 	bic.w	r3, r3, #1
 8002728:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800272a:	f7fe ff1b 	bl	8001564 <HAL_GetTick>
 800272e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002730:	e008      	b.n	8002744 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002732:	f7fe ff17 	bl	8001564 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e2e7      	b.n	8002d14 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002744:	4b2a      	ldr	r3, [pc, #168]	; (80027f0 <HAL_RCC_OscConfig+0x298>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1f0      	bne.n	8002732 <HAL_RCC_OscConfig+0x1da>
 8002750:	e000      	b.n	8002754 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002752:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0301 	and.w	r3, r3, #1
 800275c:	2b00      	cmp	r3, #0
 800275e:	d074      	beq.n	800284a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	2b08      	cmp	r3, #8
 8002764:	d005      	beq.n	8002772 <HAL_RCC_OscConfig+0x21a>
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	2b0c      	cmp	r3, #12
 800276a:	d10e      	bne.n	800278a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	2b03      	cmp	r3, #3
 8002770:	d10b      	bne.n	800278a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002772:	4b1f      	ldr	r3, [pc, #124]	; (80027f0 <HAL_RCC_OscConfig+0x298>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d064      	beq.n	8002848 <HAL_RCC_OscConfig+0x2f0>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d160      	bne.n	8002848 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e2c4      	b.n	8002d14 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002792:	d106      	bne.n	80027a2 <HAL_RCC_OscConfig+0x24a>
 8002794:	4b16      	ldr	r3, [pc, #88]	; (80027f0 <HAL_RCC_OscConfig+0x298>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a15      	ldr	r2, [pc, #84]	; (80027f0 <HAL_RCC_OscConfig+0x298>)
 800279a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800279e:	6013      	str	r3, [r2, #0]
 80027a0:	e01d      	b.n	80027de <HAL_RCC_OscConfig+0x286>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027aa:	d10c      	bne.n	80027c6 <HAL_RCC_OscConfig+0x26e>
 80027ac:	4b10      	ldr	r3, [pc, #64]	; (80027f0 <HAL_RCC_OscConfig+0x298>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a0f      	ldr	r2, [pc, #60]	; (80027f0 <HAL_RCC_OscConfig+0x298>)
 80027b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027b6:	6013      	str	r3, [r2, #0]
 80027b8:	4b0d      	ldr	r3, [pc, #52]	; (80027f0 <HAL_RCC_OscConfig+0x298>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a0c      	ldr	r2, [pc, #48]	; (80027f0 <HAL_RCC_OscConfig+0x298>)
 80027be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027c2:	6013      	str	r3, [r2, #0]
 80027c4:	e00b      	b.n	80027de <HAL_RCC_OscConfig+0x286>
 80027c6:	4b0a      	ldr	r3, [pc, #40]	; (80027f0 <HAL_RCC_OscConfig+0x298>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a09      	ldr	r2, [pc, #36]	; (80027f0 <HAL_RCC_OscConfig+0x298>)
 80027cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027d0:	6013      	str	r3, [r2, #0]
 80027d2:	4b07      	ldr	r3, [pc, #28]	; (80027f0 <HAL_RCC_OscConfig+0x298>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a06      	ldr	r2, [pc, #24]	; (80027f0 <HAL_RCC_OscConfig+0x298>)
 80027d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027dc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d01c      	beq.n	8002820 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e6:	f7fe febd 	bl	8001564 <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027ec:	e011      	b.n	8002812 <HAL_RCC_OscConfig+0x2ba>
 80027ee:	bf00      	nop
 80027f0:	40021000 	.word	0x40021000
 80027f4:	08005b64 	.word	0x08005b64
 80027f8:	20000000 	.word	0x20000000
 80027fc:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002800:	f7fe feb0 	bl	8001564 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b64      	cmp	r3, #100	; 0x64
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e280      	b.n	8002d14 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002812:	4baf      	ldr	r3, [pc, #700]	; (8002ad0 <HAL_RCC_OscConfig+0x578>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0f0      	beq.n	8002800 <HAL_RCC_OscConfig+0x2a8>
 800281e:	e014      	b.n	800284a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002820:	f7fe fea0 	bl	8001564 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002828:	f7fe fe9c 	bl	8001564 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b64      	cmp	r3, #100	; 0x64
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e26c      	b.n	8002d14 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800283a:	4ba5      	ldr	r3, [pc, #660]	; (8002ad0 <HAL_RCC_OscConfig+0x578>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f0      	bne.n	8002828 <HAL_RCC_OscConfig+0x2d0>
 8002846:	e000      	b.n	800284a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002848:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d060      	beq.n	8002918 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	2b04      	cmp	r3, #4
 800285a:	d005      	beq.n	8002868 <HAL_RCC_OscConfig+0x310>
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	2b0c      	cmp	r3, #12
 8002860:	d119      	bne.n	8002896 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	2b02      	cmp	r3, #2
 8002866:	d116      	bne.n	8002896 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002868:	4b99      	ldr	r3, [pc, #612]	; (8002ad0 <HAL_RCC_OscConfig+0x578>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002870:	2b00      	cmp	r3, #0
 8002872:	d005      	beq.n	8002880 <HAL_RCC_OscConfig+0x328>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e249      	b.n	8002d14 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002880:	4b93      	ldr	r3, [pc, #588]	; (8002ad0 <HAL_RCC_OscConfig+0x578>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	061b      	lsls	r3, r3, #24
 800288e:	4990      	ldr	r1, [pc, #576]	; (8002ad0 <HAL_RCC_OscConfig+0x578>)
 8002890:	4313      	orrs	r3, r2
 8002892:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002894:	e040      	b.n	8002918 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d023      	beq.n	80028e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800289e:	4b8c      	ldr	r3, [pc, #560]	; (8002ad0 <HAL_RCC_OscConfig+0x578>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a8b      	ldr	r2, [pc, #556]	; (8002ad0 <HAL_RCC_OscConfig+0x578>)
 80028a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028aa:	f7fe fe5b 	bl	8001564 <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028b2:	f7fe fe57 	bl	8001564 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e227      	b.n	8002d14 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028c4:	4b82      	ldr	r3, [pc, #520]	; (8002ad0 <HAL_RCC_OscConfig+0x578>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0f0      	beq.n	80028b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d0:	4b7f      	ldr	r3, [pc, #508]	; (8002ad0 <HAL_RCC_OscConfig+0x578>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	061b      	lsls	r3, r3, #24
 80028de:	497c      	ldr	r1, [pc, #496]	; (8002ad0 <HAL_RCC_OscConfig+0x578>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	604b      	str	r3, [r1, #4]
 80028e4:	e018      	b.n	8002918 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028e6:	4b7a      	ldr	r3, [pc, #488]	; (8002ad0 <HAL_RCC_OscConfig+0x578>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a79      	ldr	r2, [pc, #484]	; (8002ad0 <HAL_RCC_OscConfig+0x578>)
 80028ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f2:	f7fe fe37 	bl	8001564 <HAL_GetTick>
 80028f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028f8:	e008      	b.n	800290c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028fa:	f7fe fe33 	bl	8001564 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d901      	bls.n	800290c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e203      	b.n	8002d14 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800290c:	4b70      	ldr	r3, [pc, #448]	; (8002ad0 <HAL_RCC_OscConfig+0x578>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002914:	2b00      	cmp	r3, #0
 8002916:	d1f0      	bne.n	80028fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0308 	and.w	r3, r3, #8
 8002920:	2b00      	cmp	r3, #0
 8002922:	d03c      	beq.n	800299e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d01c      	beq.n	8002966 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800292c:	4b68      	ldr	r3, [pc, #416]	; (8002ad0 <HAL_RCC_OscConfig+0x578>)
 800292e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002932:	4a67      	ldr	r2, [pc, #412]	; (8002ad0 <HAL_RCC_OscConfig+0x578>)
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800293c:	f7fe fe12 	bl	8001564 <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002944:	f7fe fe0e 	bl	8001564 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e1de      	b.n	8002d14 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002956:	4b5e      	ldr	r3, [pc, #376]	; (8002ad0 <HAL_RCC_OscConfig+0x578>)
 8002958:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d0ef      	beq.n	8002944 <HAL_RCC_OscConfig+0x3ec>
 8002964:	e01b      	b.n	800299e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002966:	4b5a      	ldr	r3, [pc, #360]	; (8002ad0 <HAL_RCC_OscConfig+0x578>)
 8002968:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800296c:	4a58      	ldr	r2, [pc, #352]	; (8002ad0 <HAL_RCC_OscConfig+0x578>)
 800296e:	f023 0301 	bic.w	r3, r3, #1
 8002972:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002976:	f7fe fdf5 	bl	8001564 <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800297e:	f7fe fdf1 	bl	8001564 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e1c1      	b.n	8002d14 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002990:	4b4f      	ldr	r3, [pc, #316]	; (8002ad0 <HAL_RCC_OscConfig+0x578>)
 8002992:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1ef      	bne.n	800297e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0304 	and.w	r3, r3, #4
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f000 80a6 	beq.w	8002af8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ac:	2300      	movs	r3, #0
 80029ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80029b0:	4b47      	ldr	r3, [pc, #284]	; (8002ad0 <HAL_RCC_OscConfig+0x578>)
 80029b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10d      	bne.n	80029d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029bc:	4b44      	ldr	r3, [pc, #272]	; (8002ad0 <HAL_RCC_OscConfig+0x578>)
 80029be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c0:	4a43      	ldr	r2, [pc, #268]	; (8002ad0 <HAL_RCC_OscConfig+0x578>)
 80029c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c6:	6593      	str	r3, [r2, #88]	; 0x58
 80029c8:	4b41      	ldr	r3, [pc, #260]	; (8002ad0 <HAL_RCC_OscConfig+0x578>)
 80029ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d0:	60bb      	str	r3, [r7, #8]
 80029d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029d4:	2301      	movs	r3, #1
 80029d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029d8:	4b3e      	ldr	r3, [pc, #248]	; (8002ad4 <HAL_RCC_OscConfig+0x57c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d118      	bne.n	8002a16 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029e4:	4b3b      	ldr	r3, [pc, #236]	; (8002ad4 <HAL_RCC_OscConfig+0x57c>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a3a      	ldr	r2, [pc, #232]	; (8002ad4 <HAL_RCC_OscConfig+0x57c>)
 80029ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029f0:	f7fe fdb8 	bl	8001564 <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029f8:	f7fe fdb4 	bl	8001564 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e184      	b.n	8002d14 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a0a:	4b32      	ldr	r3, [pc, #200]	; (8002ad4 <HAL_RCC_OscConfig+0x57c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d0f0      	beq.n	80029f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d108      	bne.n	8002a30 <HAL_RCC_OscConfig+0x4d8>
 8002a1e:	4b2c      	ldr	r3, [pc, #176]	; (8002ad0 <HAL_RCC_OscConfig+0x578>)
 8002a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a24:	4a2a      	ldr	r2, [pc, #168]	; (8002ad0 <HAL_RCC_OscConfig+0x578>)
 8002a26:	f043 0301 	orr.w	r3, r3, #1
 8002a2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a2e:	e024      	b.n	8002a7a <HAL_RCC_OscConfig+0x522>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	2b05      	cmp	r3, #5
 8002a36:	d110      	bne.n	8002a5a <HAL_RCC_OscConfig+0x502>
 8002a38:	4b25      	ldr	r3, [pc, #148]	; (8002ad0 <HAL_RCC_OscConfig+0x578>)
 8002a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a3e:	4a24      	ldr	r2, [pc, #144]	; (8002ad0 <HAL_RCC_OscConfig+0x578>)
 8002a40:	f043 0304 	orr.w	r3, r3, #4
 8002a44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a48:	4b21      	ldr	r3, [pc, #132]	; (8002ad0 <HAL_RCC_OscConfig+0x578>)
 8002a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4e:	4a20      	ldr	r2, [pc, #128]	; (8002ad0 <HAL_RCC_OscConfig+0x578>)
 8002a50:	f043 0301 	orr.w	r3, r3, #1
 8002a54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a58:	e00f      	b.n	8002a7a <HAL_RCC_OscConfig+0x522>
 8002a5a:	4b1d      	ldr	r3, [pc, #116]	; (8002ad0 <HAL_RCC_OscConfig+0x578>)
 8002a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a60:	4a1b      	ldr	r2, [pc, #108]	; (8002ad0 <HAL_RCC_OscConfig+0x578>)
 8002a62:	f023 0301 	bic.w	r3, r3, #1
 8002a66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a6a:	4b19      	ldr	r3, [pc, #100]	; (8002ad0 <HAL_RCC_OscConfig+0x578>)
 8002a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a70:	4a17      	ldr	r2, [pc, #92]	; (8002ad0 <HAL_RCC_OscConfig+0x578>)
 8002a72:	f023 0304 	bic.w	r3, r3, #4
 8002a76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d016      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a82:	f7fe fd6f 	bl	8001564 <HAL_GetTick>
 8002a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a88:	e00a      	b.n	8002aa0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a8a:	f7fe fd6b 	bl	8001564 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e139      	b.n	8002d14 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aa0:	4b0b      	ldr	r3, [pc, #44]	; (8002ad0 <HAL_RCC_OscConfig+0x578>)
 8002aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d0ed      	beq.n	8002a8a <HAL_RCC_OscConfig+0x532>
 8002aae:	e01a      	b.n	8002ae6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab0:	f7fe fd58 	bl	8001564 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ab6:	e00f      	b.n	8002ad8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ab8:	f7fe fd54 	bl	8001564 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d906      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e122      	b.n	8002d14 <HAL_RCC_OscConfig+0x7bc>
 8002ace:	bf00      	nop
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ad8:	4b90      	ldr	r3, [pc, #576]	; (8002d1c <HAL_RCC_OscConfig+0x7c4>)
 8002ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1e8      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ae6:	7ffb      	ldrb	r3, [r7, #31]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d105      	bne.n	8002af8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aec:	4b8b      	ldr	r3, [pc, #556]	; (8002d1c <HAL_RCC_OscConfig+0x7c4>)
 8002aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af0:	4a8a      	ldr	r2, [pc, #552]	; (8002d1c <HAL_RCC_OscConfig+0x7c4>)
 8002af2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002af6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 8108 	beq.w	8002d12 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	f040 80d0 	bne.w	8002cac <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b0c:	4b83      	ldr	r3, [pc, #524]	; (8002d1c <HAL_RCC_OscConfig+0x7c4>)
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	f003 0203 	and.w	r2, r3, #3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d130      	bne.n	8002b82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d127      	bne.n	8002b82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b3c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d11f      	bne.n	8002b82 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b4c:	2a07      	cmp	r2, #7
 8002b4e:	bf14      	ite	ne
 8002b50:	2201      	movne	r2, #1
 8002b52:	2200      	moveq	r2, #0
 8002b54:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d113      	bne.n	8002b82 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b64:	085b      	lsrs	r3, r3, #1
 8002b66:	3b01      	subs	r3, #1
 8002b68:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d109      	bne.n	8002b82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b78:	085b      	lsrs	r3, r3, #1
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d06e      	beq.n	8002c60 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	2b0c      	cmp	r3, #12
 8002b86:	d069      	beq.n	8002c5c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b88:	4b64      	ldr	r3, [pc, #400]	; (8002d1c <HAL_RCC_OscConfig+0x7c4>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d105      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002b94:	4b61      	ldr	r3, [pc, #388]	; (8002d1c <HAL_RCC_OscConfig+0x7c4>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e0b7      	b.n	8002d14 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ba4:	4b5d      	ldr	r3, [pc, #372]	; (8002d1c <HAL_RCC_OscConfig+0x7c4>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a5c      	ldr	r2, [pc, #368]	; (8002d1c <HAL_RCC_OscConfig+0x7c4>)
 8002baa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bb0:	f7fe fcd8 	bl	8001564 <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb8:	f7fe fcd4 	bl	8001564 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e0a4      	b.n	8002d14 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bca:	4b54      	ldr	r3, [pc, #336]	; (8002d1c <HAL_RCC_OscConfig+0x7c4>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1f0      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bd6:	4b51      	ldr	r3, [pc, #324]	; (8002d1c <HAL_RCC_OscConfig+0x7c4>)
 8002bd8:	68da      	ldr	r2, [r3, #12]
 8002bda:	4b51      	ldr	r3, [pc, #324]	; (8002d20 <HAL_RCC_OscConfig+0x7c8>)
 8002bdc:	4013      	ands	r3, r2
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002be6:	3a01      	subs	r2, #1
 8002be8:	0112      	lsls	r2, r2, #4
 8002bea:	4311      	orrs	r1, r2
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002bf0:	0212      	lsls	r2, r2, #8
 8002bf2:	4311      	orrs	r1, r2
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002bf8:	0852      	lsrs	r2, r2, #1
 8002bfa:	3a01      	subs	r2, #1
 8002bfc:	0552      	lsls	r2, r2, #21
 8002bfe:	4311      	orrs	r1, r2
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c04:	0852      	lsrs	r2, r2, #1
 8002c06:	3a01      	subs	r2, #1
 8002c08:	0652      	lsls	r2, r2, #25
 8002c0a:	4311      	orrs	r1, r2
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c10:	0912      	lsrs	r2, r2, #4
 8002c12:	0452      	lsls	r2, r2, #17
 8002c14:	430a      	orrs	r2, r1
 8002c16:	4941      	ldr	r1, [pc, #260]	; (8002d1c <HAL_RCC_OscConfig+0x7c4>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c1c:	4b3f      	ldr	r3, [pc, #252]	; (8002d1c <HAL_RCC_OscConfig+0x7c4>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a3e      	ldr	r2, [pc, #248]	; (8002d1c <HAL_RCC_OscConfig+0x7c4>)
 8002c22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c26:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c28:	4b3c      	ldr	r3, [pc, #240]	; (8002d1c <HAL_RCC_OscConfig+0x7c4>)
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	4a3b      	ldr	r2, [pc, #236]	; (8002d1c <HAL_RCC_OscConfig+0x7c4>)
 8002c2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c32:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c34:	f7fe fc96 	bl	8001564 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c3c:	f7fe fc92 	bl	8001564 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e062      	b.n	8002d14 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c4e:	4b33      	ldr	r3, [pc, #204]	; (8002d1c <HAL_RCC_OscConfig+0x7c4>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0f0      	beq.n	8002c3c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c5a:	e05a      	b.n	8002d12 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e059      	b.n	8002d14 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c60:	4b2e      	ldr	r3, [pc, #184]	; (8002d1c <HAL_RCC_OscConfig+0x7c4>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d152      	bne.n	8002d12 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c6c:	4b2b      	ldr	r3, [pc, #172]	; (8002d1c <HAL_RCC_OscConfig+0x7c4>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a2a      	ldr	r2, [pc, #168]	; (8002d1c <HAL_RCC_OscConfig+0x7c4>)
 8002c72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c76:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c78:	4b28      	ldr	r3, [pc, #160]	; (8002d1c <HAL_RCC_OscConfig+0x7c4>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	4a27      	ldr	r2, [pc, #156]	; (8002d1c <HAL_RCC_OscConfig+0x7c4>)
 8002c7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c82:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c84:	f7fe fc6e 	bl	8001564 <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c8c:	f7fe fc6a 	bl	8001564 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e03a      	b.n	8002d14 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c9e:	4b1f      	ldr	r3, [pc, #124]	; (8002d1c <HAL_RCC_OscConfig+0x7c4>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d0f0      	beq.n	8002c8c <HAL_RCC_OscConfig+0x734>
 8002caa:	e032      	b.n	8002d12 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	2b0c      	cmp	r3, #12
 8002cb0:	d02d      	beq.n	8002d0e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cb2:	4b1a      	ldr	r3, [pc, #104]	; (8002d1c <HAL_RCC_OscConfig+0x7c4>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a19      	ldr	r2, [pc, #100]	; (8002d1c <HAL_RCC_OscConfig+0x7c4>)
 8002cb8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cbc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002cbe:	4b17      	ldr	r3, [pc, #92]	; (8002d1c <HAL_RCC_OscConfig+0x7c4>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d105      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002cca:	4b14      	ldr	r3, [pc, #80]	; (8002d1c <HAL_RCC_OscConfig+0x7c4>)
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	4a13      	ldr	r2, [pc, #76]	; (8002d1c <HAL_RCC_OscConfig+0x7c4>)
 8002cd0:	f023 0303 	bic.w	r3, r3, #3
 8002cd4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002cd6:	4b11      	ldr	r3, [pc, #68]	; (8002d1c <HAL_RCC_OscConfig+0x7c4>)
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	4a10      	ldr	r2, [pc, #64]	; (8002d1c <HAL_RCC_OscConfig+0x7c4>)
 8002cdc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002ce0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ce4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce6:	f7fe fc3d 	bl	8001564 <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cec:	e008      	b.n	8002d00 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cee:	f7fe fc39 	bl	8001564 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e009      	b.n	8002d14 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d00:	4b06      	ldr	r3, [pc, #24]	; (8002d1c <HAL_RCC_OscConfig+0x7c4>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1f0      	bne.n	8002cee <HAL_RCC_OscConfig+0x796>
 8002d0c:	e001      	b.n	8002d12 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e000      	b.n	8002d14 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3720      	adds	r7, #32
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	f99d808c 	.word	0xf99d808c

08002d24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e0c8      	b.n	8002eca <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d38:	4b66      	ldr	r3, [pc, #408]	; (8002ed4 <HAL_RCC_ClockConfig+0x1b0>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d910      	bls.n	8002d68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d46:	4b63      	ldr	r3, [pc, #396]	; (8002ed4 <HAL_RCC_ClockConfig+0x1b0>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f023 0207 	bic.w	r2, r3, #7
 8002d4e:	4961      	ldr	r1, [pc, #388]	; (8002ed4 <HAL_RCC_ClockConfig+0x1b0>)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d56:	4b5f      	ldr	r3, [pc, #380]	; (8002ed4 <HAL_RCC_ClockConfig+0x1b0>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d001      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e0b0      	b.n	8002eca <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0301 	and.w	r3, r3, #1
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d04c      	beq.n	8002e0e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	2b03      	cmp	r3, #3
 8002d7a:	d107      	bne.n	8002d8c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d7c:	4b56      	ldr	r3, [pc, #344]	; (8002ed8 <HAL_RCC_ClockConfig+0x1b4>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d121      	bne.n	8002dcc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e09e      	b.n	8002eca <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d107      	bne.n	8002da4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d94:	4b50      	ldr	r3, [pc, #320]	; (8002ed8 <HAL_RCC_ClockConfig+0x1b4>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d115      	bne.n	8002dcc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e092      	b.n	8002eca <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d107      	bne.n	8002dbc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dac:	4b4a      	ldr	r3, [pc, #296]	; (8002ed8 <HAL_RCC_ClockConfig+0x1b4>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d109      	bne.n	8002dcc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e086      	b.n	8002eca <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dbc:	4b46      	ldr	r3, [pc, #280]	; (8002ed8 <HAL_RCC_ClockConfig+0x1b4>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e07e      	b.n	8002eca <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002dcc:	4b42      	ldr	r3, [pc, #264]	; (8002ed8 <HAL_RCC_ClockConfig+0x1b4>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f023 0203 	bic.w	r2, r3, #3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	493f      	ldr	r1, [pc, #252]	; (8002ed8 <HAL_RCC_ClockConfig+0x1b4>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dde:	f7fe fbc1 	bl	8001564 <HAL_GetTick>
 8002de2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de4:	e00a      	b.n	8002dfc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002de6:	f7fe fbbd 	bl	8001564 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e066      	b.n	8002eca <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dfc:	4b36      	ldr	r3, [pc, #216]	; (8002ed8 <HAL_RCC_ClockConfig+0x1b4>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f003 020c 	and.w	r2, r3, #12
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d1eb      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d008      	beq.n	8002e2c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e1a:	4b2f      	ldr	r3, [pc, #188]	; (8002ed8 <HAL_RCC_ClockConfig+0x1b4>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	492c      	ldr	r1, [pc, #176]	; (8002ed8 <HAL_RCC_ClockConfig+0x1b4>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e2c:	4b29      	ldr	r3, [pc, #164]	; (8002ed4 <HAL_RCC_ClockConfig+0x1b0>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0307 	and.w	r3, r3, #7
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d210      	bcs.n	8002e5c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e3a:	4b26      	ldr	r3, [pc, #152]	; (8002ed4 <HAL_RCC_ClockConfig+0x1b0>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f023 0207 	bic.w	r2, r3, #7
 8002e42:	4924      	ldr	r1, [pc, #144]	; (8002ed4 <HAL_RCC_ClockConfig+0x1b0>)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e4a:	4b22      	ldr	r3, [pc, #136]	; (8002ed4 <HAL_RCC_ClockConfig+0x1b0>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0307 	and.w	r3, r3, #7
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d001      	beq.n	8002e5c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e036      	b.n	8002eca <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d008      	beq.n	8002e7a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e68:	4b1b      	ldr	r3, [pc, #108]	; (8002ed8 <HAL_RCC_ClockConfig+0x1b4>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	4918      	ldr	r1, [pc, #96]	; (8002ed8 <HAL_RCC_ClockConfig+0x1b4>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0308 	and.w	r3, r3, #8
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d009      	beq.n	8002e9a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e86:	4b14      	ldr	r3, [pc, #80]	; (8002ed8 <HAL_RCC_ClockConfig+0x1b4>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	4910      	ldr	r1, [pc, #64]	; (8002ed8 <HAL_RCC_ClockConfig+0x1b4>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e9a:	f000 f825 	bl	8002ee8 <HAL_RCC_GetSysClockFreq>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	4b0d      	ldr	r3, [pc, #52]	; (8002ed8 <HAL_RCC_ClockConfig+0x1b4>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	091b      	lsrs	r3, r3, #4
 8002ea6:	f003 030f 	and.w	r3, r3, #15
 8002eaa:	490c      	ldr	r1, [pc, #48]	; (8002edc <HAL_RCC_ClockConfig+0x1b8>)
 8002eac:	5ccb      	ldrb	r3, [r1, r3]
 8002eae:	f003 031f 	and.w	r3, r3, #31
 8002eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8002eb6:	4a0a      	ldr	r2, [pc, #40]	; (8002ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002eba:	4b0a      	ldr	r3, [pc, #40]	; (8002ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fe fb00 	bl	80014c4 <HAL_InitTick>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ec8:	7afb      	ldrb	r3, [r7, #11]
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	40022000 	.word	0x40022000
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	08005b64 	.word	0x08005b64
 8002ee0:	20000000 	.word	0x20000000
 8002ee4:	20000004 	.word	0x20000004

08002ee8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b089      	sub	sp, #36	; 0x24
 8002eec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61fb      	str	r3, [r7, #28]
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ef6:	4b3e      	ldr	r3, [pc, #248]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 030c 	and.w	r3, r3, #12
 8002efe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f00:	4b3b      	ldr	r3, [pc, #236]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	f003 0303 	and.w	r3, r3, #3
 8002f08:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d005      	beq.n	8002f1c <HAL_RCC_GetSysClockFreq+0x34>
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	2b0c      	cmp	r3, #12
 8002f14:	d121      	bne.n	8002f5a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d11e      	bne.n	8002f5a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f1c:	4b34      	ldr	r3, [pc, #208]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0308 	and.w	r3, r3, #8
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d107      	bne.n	8002f38 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f28:	4b31      	ldr	r3, [pc, #196]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f2e:	0a1b      	lsrs	r3, r3, #8
 8002f30:	f003 030f 	and.w	r3, r3, #15
 8002f34:	61fb      	str	r3, [r7, #28]
 8002f36:	e005      	b.n	8002f44 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f38:	4b2d      	ldr	r3, [pc, #180]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	091b      	lsrs	r3, r3, #4
 8002f3e:	f003 030f 	and.w	r3, r3, #15
 8002f42:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f44:	4a2b      	ldr	r2, [pc, #172]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f4c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d10d      	bne.n	8002f70 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f58:	e00a      	b.n	8002f70 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	2b04      	cmp	r3, #4
 8002f5e:	d102      	bne.n	8002f66 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f60:	4b25      	ldr	r3, [pc, #148]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f62:	61bb      	str	r3, [r7, #24]
 8002f64:	e004      	b.n	8002f70 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	2b08      	cmp	r3, #8
 8002f6a:	d101      	bne.n	8002f70 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f6c:	4b23      	ldr	r3, [pc, #140]	; (8002ffc <HAL_RCC_GetSysClockFreq+0x114>)
 8002f6e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	2b0c      	cmp	r3, #12
 8002f74:	d134      	bne.n	8002fe0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f76:	4b1e      	ldr	r3, [pc, #120]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d003      	beq.n	8002f8e <HAL_RCC_GetSysClockFreq+0xa6>
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	2b03      	cmp	r3, #3
 8002f8a:	d003      	beq.n	8002f94 <HAL_RCC_GetSysClockFreq+0xac>
 8002f8c:	e005      	b.n	8002f9a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f8e:	4b1a      	ldr	r3, [pc, #104]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f90:	617b      	str	r3, [r7, #20]
      break;
 8002f92:	e005      	b.n	8002fa0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f94:	4b19      	ldr	r3, [pc, #100]	; (8002ffc <HAL_RCC_GetSysClockFreq+0x114>)
 8002f96:	617b      	str	r3, [r7, #20]
      break;
 8002f98:	e002      	b.n	8002fa0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	617b      	str	r3, [r7, #20]
      break;
 8002f9e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002fa0:	4b13      	ldr	r3, [pc, #76]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	091b      	lsrs	r3, r3, #4
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	3301      	adds	r3, #1
 8002fac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002fae:	4b10      	ldr	r3, [pc, #64]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	0a1b      	lsrs	r3, r3, #8
 8002fb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	fb02 f203 	mul.w	r2, r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002fc6:	4b0a      	ldr	r3, [pc, #40]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	0e5b      	lsrs	r3, r3, #25
 8002fcc:	f003 0303 	and.w	r3, r3, #3
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fde:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002fe0:	69bb      	ldr	r3, [r7, #24]
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3724      	adds	r7, #36	; 0x24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	08005b7c 	.word	0x08005b7c
 8002ff8:	00f42400 	.word	0x00f42400
 8002ffc:	007a1200 	.word	0x007a1200

08003000 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003004:	4b03      	ldr	r3, [pc, #12]	; (8003014 <HAL_RCC_GetHCLKFreq+0x14>)
 8003006:	681b      	ldr	r3, [r3, #0]
}
 8003008:	4618      	mov	r0, r3
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	20000000 	.word	0x20000000

08003018 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800301c:	f7ff fff0 	bl	8003000 <HAL_RCC_GetHCLKFreq>
 8003020:	4602      	mov	r2, r0
 8003022:	4b06      	ldr	r3, [pc, #24]	; (800303c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	0a1b      	lsrs	r3, r3, #8
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	4904      	ldr	r1, [pc, #16]	; (8003040 <HAL_RCC_GetPCLK1Freq+0x28>)
 800302e:	5ccb      	ldrb	r3, [r1, r3]
 8003030:	f003 031f 	and.w	r3, r3, #31
 8003034:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003038:	4618      	mov	r0, r3
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40021000 	.word	0x40021000
 8003040:	08005b74 	.word	0x08005b74

08003044 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003048:	f7ff ffda 	bl	8003000 <HAL_RCC_GetHCLKFreq>
 800304c:	4602      	mov	r2, r0
 800304e:	4b06      	ldr	r3, [pc, #24]	; (8003068 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	0adb      	lsrs	r3, r3, #11
 8003054:	f003 0307 	and.w	r3, r3, #7
 8003058:	4904      	ldr	r1, [pc, #16]	; (800306c <HAL_RCC_GetPCLK2Freq+0x28>)
 800305a:	5ccb      	ldrb	r3, [r1, r3]
 800305c:	f003 031f 	and.w	r3, r3, #31
 8003060:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003064:	4618      	mov	r0, r3
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40021000 	.word	0x40021000
 800306c:	08005b74 	.word	0x08005b74

08003070 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003078:	2300      	movs	r3, #0
 800307a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800307c:	4b2a      	ldr	r3, [pc, #168]	; (8003128 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800307e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d003      	beq.n	8003090 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003088:	f7ff f936 	bl	80022f8 <HAL_PWREx_GetVoltageRange>
 800308c:	6178      	str	r0, [r7, #20]
 800308e:	e014      	b.n	80030ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003090:	4b25      	ldr	r3, [pc, #148]	; (8003128 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003094:	4a24      	ldr	r2, [pc, #144]	; (8003128 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800309a:	6593      	str	r3, [r2, #88]	; 0x58
 800309c:	4b22      	ldr	r3, [pc, #136]	; (8003128 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800309e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a4:	60fb      	str	r3, [r7, #12]
 80030a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80030a8:	f7ff f926 	bl	80022f8 <HAL_PWREx_GetVoltageRange>
 80030ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80030ae:	4b1e      	ldr	r3, [pc, #120]	; (8003128 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b2:	4a1d      	ldr	r2, [pc, #116]	; (8003128 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030b8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030c0:	d10b      	bne.n	80030da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b80      	cmp	r3, #128	; 0x80
 80030c6:	d919      	bls.n	80030fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2ba0      	cmp	r3, #160	; 0xa0
 80030cc:	d902      	bls.n	80030d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030ce:	2302      	movs	r3, #2
 80030d0:	613b      	str	r3, [r7, #16]
 80030d2:	e013      	b.n	80030fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030d4:	2301      	movs	r3, #1
 80030d6:	613b      	str	r3, [r7, #16]
 80030d8:	e010      	b.n	80030fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b80      	cmp	r3, #128	; 0x80
 80030de:	d902      	bls.n	80030e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80030e0:	2303      	movs	r3, #3
 80030e2:	613b      	str	r3, [r7, #16]
 80030e4:	e00a      	b.n	80030fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b80      	cmp	r3, #128	; 0x80
 80030ea:	d102      	bne.n	80030f2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030ec:	2302      	movs	r3, #2
 80030ee:	613b      	str	r3, [r7, #16]
 80030f0:	e004      	b.n	80030fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2b70      	cmp	r3, #112	; 0x70
 80030f6:	d101      	bne.n	80030fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030f8:	2301      	movs	r3, #1
 80030fa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030fc:	4b0b      	ldr	r3, [pc, #44]	; (800312c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f023 0207 	bic.w	r2, r3, #7
 8003104:	4909      	ldr	r1, [pc, #36]	; (800312c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	4313      	orrs	r3, r2
 800310a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800310c:	4b07      	ldr	r3, [pc, #28]	; (800312c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0307 	and.w	r3, r3, #7
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	429a      	cmp	r2, r3
 8003118:	d001      	beq.n	800311e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e000      	b.n	8003120 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3718      	adds	r7, #24
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	40021000 	.word	0x40021000
 800312c:	40022000 	.word	0x40022000

08003130 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003138:	2300      	movs	r3, #0
 800313a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800313c:	2300      	movs	r3, #0
 800313e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003148:	2b00      	cmp	r3, #0
 800314a:	d041      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003150:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003154:	d02a      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003156:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800315a:	d824      	bhi.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800315c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003160:	d008      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003162:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003166:	d81e      	bhi.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00a      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800316c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003170:	d010      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003172:	e018      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003174:	4b86      	ldr	r3, [pc, #536]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	4a85      	ldr	r2, [pc, #532]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800317a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800317e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003180:	e015      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	3304      	adds	r3, #4
 8003186:	2100      	movs	r1, #0
 8003188:	4618      	mov	r0, r3
 800318a:	f000 facb 	bl	8003724 <RCCEx_PLLSAI1_Config>
 800318e:	4603      	mov	r3, r0
 8003190:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003192:	e00c      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	3320      	adds	r3, #32
 8003198:	2100      	movs	r1, #0
 800319a:	4618      	mov	r0, r3
 800319c:	f000 fbb6 	bl	800390c <RCCEx_PLLSAI2_Config>
 80031a0:	4603      	mov	r3, r0
 80031a2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031a4:	e003      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	74fb      	strb	r3, [r7, #19]
      break;
 80031aa:	e000      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80031ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031ae:	7cfb      	ldrb	r3, [r7, #19]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d10b      	bne.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031b4:	4b76      	ldr	r3, [pc, #472]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031c2:	4973      	ldr	r1, [pc, #460]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80031ca:	e001      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031cc:	7cfb      	ldrb	r3, [r7, #19]
 80031ce:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d041      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031e0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80031e4:	d02a      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80031e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80031ea:	d824      	bhi.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80031ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031f0:	d008      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80031f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031f6:	d81e      	bhi.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00a      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80031fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003200:	d010      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003202:	e018      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003204:	4b62      	ldr	r3, [pc, #392]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	4a61      	ldr	r2, [pc, #388]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800320a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800320e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003210:	e015      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	3304      	adds	r3, #4
 8003216:	2100      	movs	r1, #0
 8003218:	4618      	mov	r0, r3
 800321a:	f000 fa83 	bl	8003724 <RCCEx_PLLSAI1_Config>
 800321e:	4603      	mov	r3, r0
 8003220:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003222:	e00c      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	3320      	adds	r3, #32
 8003228:	2100      	movs	r1, #0
 800322a:	4618      	mov	r0, r3
 800322c:	f000 fb6e 	bl	800390c <RCCEx_PLLSAI2_Config>
 8003230:	4603      	mov	r3, r0
 8003232:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003234:	e003      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	74fb      	strb	r3, [r7, #19]
      break;
 800323a:	e000      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800323c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800323e:	7cfb      	ldrb	r3, [r7, #19]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d10b      	bne.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003244:	4b52      	ldr	r3, [pc, #328]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003252:	494f      	ldr	r1, [pc, #316]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003254:	4313      	orrs	r3, r2
 8003256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800325a:	e001      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800325c:	7cfb      	ldrb	r3, [r7, #19]
 800325e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 80a0 	beq.w	80033ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800326e:	2300      	movs	r3, #0
 8003270:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003272:	4b47      	ldr	r3, [pc, #284]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800327e:	2301      	movs	r3, #1
 8003280:	e000      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003282:	2300      	movs	r3, #0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00d      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003288:	4b41      	ldr	r3, [pc, #260]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800328a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800328c:	4a40      	ldr	r2, [pc, #256]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800328e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003292:	6593      	str	r3, [r2, #88]	; 0x58
 8003294:	4b3e      	ldr	r3, [pc, #248]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329c:	60bb      	str	r3, [r7, #8]
 800329e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032a0:	2301      	movs	r3, #1
 80032a2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032a4:	4b3b      	ldr	r3, [pc, #236]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a3a      	ldr	r2, [pc, #232]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032b0:	f7fe f958 	bl	8001564 <HAL_GetTick>
 80032b4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032b6:	e009      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032b8:	f7fe f954 	bl	8001564 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d902      	bls.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	74fb      	strb	r3, [r7, #19]
        break;
 80032ca:	e005      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032cc:	4b31      	ldr	r3, [pc, #196]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d0ef      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80032d8:	7cfb      	ldrb	r3, [r7, #19]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d15c      	bne.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032de:	4b2c      	ldr	r3, [pc, #176]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032e8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d01f      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d019      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032fc:	4b24      	ldr	r3, [pc, #144]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003302:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003306:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003308:	4b21      	ldr	r3, [pc, #132]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800330a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800330e:	4a20      	ldr	r2, [pc, #128]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003314:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003318:	4b1d      	ldr	r3, [pc, #116]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800331a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800331e:	4a1c      	ldr	r2, [pc, #112]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003320:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003324:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003328:	4a19      	ldr	r2, [pc, #100]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b00      	cmp	r3, #0
 8003338:	d016      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333a:	f7fe f913 	bl	8001564 <HAL_GetTick>
 800333e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003340:	e00b      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003342:	f7fe f90f 	bl	8001564 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003350:	4293      	cmp	r3, r2
 8003352:	d902      	bls.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	74fb      	strb	r3, [r7, #19]
            break;
 8003358:	e006      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800335a:	4b0d      	ldr	r3, [pc, #52]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800335c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d0ec      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003368:	7cfb      	ldrb	r3, [r7, #19]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10c      	bne.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800336e:	4b08      	ldr	r3, [pc, #32]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003374:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800337e:	4904      	ldr	r1, [pc, #16]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003380:	4313      	orrs	r3, r2
 8003382:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003386:	e009      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003388:	7cfb      	ldrb	r3, [r7, #19]
 800338a:	74bb      	strb	r3, [r7, #18]
 800338c:	e006      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800338e:	bf00      	nop
 8003390:	40021000 	.word	0x40021000
 8003394:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003398:	7cfb      	ldrb	r3, [r7, #19]
 800339a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800339c:	7c7b      	ldrb	r3, [r7, #17]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d105      	bne.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033a2:	4b9e      	ldr	r3, [pc, #632]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a6:	4a9d      	ldr	r2, [pc, #628]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00a      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033ba:	4b98      	ldr	r3, [pc, #608]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c0:	f023 0203 	bic.w	r2, r3, #3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c8:	4994      	ldr	r1, [pc, #592]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00a      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033dc:	4b8f      	ldr	r3, [pc, #572]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e2:	f023 020c 	bic.w	r2, r3, #12
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ea:	498c      	ldr	r1, [pc, #560]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0304 	and.w	r3, r3, #4
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00a      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033fe:	4b87      	ldr	r3, [pc, #540]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003404:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340c:	4983      	ldr	r1, [pc, #524]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800340e:	4313      	orrs	r3, r2
 8003410:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0308 	and.w	r3, r3, #8
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00a      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003420:	4b7e      	ldr	r3, [pc, #504]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003426:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342e:	497b      	ldr	r1, [pc, #492]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003430:	4313      	orrs	r3, r2
 8003432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0310 	and.w	r3, r3, #16
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00a      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003442:	4b76      	ldr	r3, [pc, #472]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003448:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003450:	4972      	ldr	r1, [pc, #456]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003452:	4313      	orrs	r3, r2
 8003454:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0320 	and.w	r3, r3, #32
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00a      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003464:	4b6d      	ldr	r3, [pc, #436]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800346a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003472:	496a      	ldr	r1, [pc, #424]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003474:	4313      	orrs	r3, r2
 8003476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00a      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003486:	4b65      	ldr	r3, [pc, #404]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800348c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003494:	4961      	ldr	r1, [pc, #388]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003496:	4313      	orrs	r3, r2
 8003498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00a      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80034a8:	4b5c      	ldr	r3, [pc, #368]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034b6:	4959      	ldr	r1, [pc, #356]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00a      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034ca:	4b54      	ldr	r3, [pc, #336]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034d8:	4950      	ldr	r1, [pc, #320]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00a      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034ec:	4b4b      	ldr	r3, [pc, #300]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034fa:	4948      	ldr	r1, [pc, #288]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00a      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800350e:	4b43      	ldr	r3, [pc, #268]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003514:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800351c:	493f      	ldr	r1, [pc, #252]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800351e:	4313      	orrs	r3, r2
 8003520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d028      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003530:	4b3a      	ldr	r3, [pc, #232]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003536:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800353e:	4937      	ldr	r1, [pc, #220]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003540:	4313      	orrs	r3, r2
 8003542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800354a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800354e:	d106      	bne.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003550:	4b32      	ldr	r3, [pc, #200]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	4a31      	ldr	r2, [pc, #196]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003556:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800355a:	60d3      	str	r3, [r2, #12]
 800355c:	e011      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003562:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003566:	d10c      	bne.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3304      	adds	r3, #4
 800356c:	2101      	movs	r1, #1
 800356e:	4618      	mov	r0, r3
 8003570:	f000 f8d8 	bl	8003724 <RCCEx_PLLSAI1_Config>
 8003574:	4603      	mov	r3, r0
 8003576:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003578:	7cfb      	ldrb	r3, [r7, #19]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800357e:	7cfb      	ldrb	r3, [r7, #19]
 8003580:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d028      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800358e:	4b23      	ldr	r3, [pc, #140]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003594:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359c:	491f      	ldr	r1, [pc, #124]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035ac:	d106      	bne.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035ae:	4b1b      	ldr	r3, [pc, #108]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	4a1a      	ldr	r2, [pc, #104]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035b8:	60d3      	str	r3, [r2, #12]
 80035ba:	e011      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035c4:	d10c      	bne.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	3304      	adds	r3, #4
 80035ca:	2101      	movs	r1, #1
 80035cc:	4618      	mov	r0, r3
 80035ce:	f000 f8a9 	bl	8003724 <RCCEx_PLLSAI1_Config>
 80035d2:	4603      	mov	r3, r0
 80035d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035d6:	7cfb      	ldrb	r3, [r7, #19]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d001      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80035dc:	7cfb      	ldrb	r3, [r7, #19]
 80035de:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d02b      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035ec:	4b0b      	ldr	r3, [pc, #44]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035fa:	4908      	ldr	r1, [pc, #32]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003606:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800360a:	d109      	bne.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800360c:	4b03      	ldr	r3, [pc, #12]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	4a02      	ldr	r2, [pc, #8]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003612:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003616:	60d3      	str	r3, [r2, #12]
 8003618:	e014      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800361a:	bf00      	nop
 800361c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003624:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003628:	d10c      	bne.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	3304      	adds	r3, #4
 800362e:	2101      	movs	r1, #1
 8003630:	4618      	mov	r0, r3
 8003632:	f000 f877 	bl	8003724 <RCCEx_PLLSAI1_Config>
 8003636:	4603      	mov	r3, r0
 8003638:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800363a:	7cfb      	ldrb	r3, [r7, #19]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003640:	7cfb      	ldrb	r3, [r7, #19]
 8003642:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d02f      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003650:	4b2b      	ldr	r3, [pc, #172]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003656:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800365e:	4928      	ldr	r1, [pc, #160]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003660:	4313      	orrs	r3, r2
 8003662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800366a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800366e:	d10d      	bne.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3304      	adds	r3, #4
 8003674:	2102      	movs	r1, #2
 8003676:	4618      	mov	r0, r3
 8003678:	f000 f854 	bl	8003724 <RCCEx_PLLSAI1_Config>
 800367c:	4603      	mov	r3, r0
 800367e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003680:	7cfb      	ldrb	r3, [r7, #19]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d014      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003686:	7cfb      	ldrb	r3, [r7, #19]
 8003688:	74bb      	strb	r3, [r7, #18]
 800368a:	e011      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003690:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003694:	d10c      	bne.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	3320      	adds	r3, #32
 800369a:	2102      	movs	r1, #2
 800369c:	4618      	mov	r0, r3
 800369e:	f000 f935 	bl	800390c <RCCEx_PLLSAI2_Config>
 80036a2:	4603      	mov	r3, r0
 80036a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036a6:	7cfb      	ldrb	r3, [r7, #19]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80036ac:	7cfb      	ldrb	r3, [r7, #19]
 80036ae:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00a      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80036bc:	4b10      	ldr	r3, [pc, #64]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036ca:	490d      	ldr	r1, [pc, #52]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00b      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036de:	4b08      	ldr	r3, [pc, #32]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036ee:	4904      	ldr	r1, [pc, #16]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80036f6:	7cbb      	ldrb	r3, [r7, #18]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3718      	adds	r7, #24
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	40021000 	.word	0x40021000

08003704 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003708:	4b05      	ldr	r3, [pc, #20]	; (8003720 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a04      	ldr	r2, [pc, #16]	; (8003720 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800370e:	f043 0304 	orr.w	r3, r3, #4
 8003712:	6013      	str	r3, [r2, #0]
}
 8003714:	bf00      	nop
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	40021000 	.word	0x40021000

08003724 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800372e:	2300      	movs	r3, #0
 8003730:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003732:	4b75      	ldr	r3, [pc, #468]	; (8003908 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	f003 0303 	and.w	r3, r3, #3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d018      	beq.n	8003770 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800373e:	4b72      	ldr	r3, [pc, #456]	; (8003908 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	f003 0203 	and.w	r2, r3, #3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	429a      	cmp	r2, r3
 800374c:	d10d      	bne.n	800376a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
       ||
 8003752:	2b00      	cmp	r3, #0
 8003754:	d009      	beq.n	800376a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003756:	4b6c      	ldr	r3, [pc, #432]	; (8003908 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	091b      	lsrs	r3, r3, #4
 800375c:	f003 0307 	and.w	r3, r3, #7
 8003760:	1c5a      	adds	r2, r3, #1
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
       ||
 8003766:	429a      	cmp	r2, r3
 8003768:	d047      	beq.n	80037fa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	73fb      	strb	r3, [r7, #15]
 800376e:	e044      	b.n	80037fa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2b03      	cmp	r3, #3
 8003776:	d018      	beq.n	80037aa <RCCEx_PLLSAI1_Config+0x86>
 8003778:	2b03      	cmp	r3, #3
 800377a:	d825      	bhi.n	80037c8 <RCCEx_PLLSAI1_Config+0xa4>
 800377c:	2b01      	cmp	r3, #1
 800377e:	d002      	beq.n	8003786 <RCCEx_PLLSAI1_Config+0x62>
 8003780:	2b02      	cmp	r3, #2
 8003782:	d009      	beq.n	8003798 <RCCEx_PLLSAI1_Config+0x74>
 8003784:	e020      	b.n	80037c8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003786:	4b60      	ldr	r3, [pc, #384]	; (8003908 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d11d      	bne.n	80037ce <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003796:	e01a      	b.n	80037ce <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003798:	4b5b      	ldr	r3, [pc, #364]	; (8003908 <RCCEx_PLLSAI1_Config+0x1e4>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d116      	bne.n	80037d2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037a8:	e013      	b.n	80037d2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037aa:	4b57      	ldr	r3, [pc, #348]	; (8003908 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10f      	bne.n	80037d6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037b6:	4b54      	ldr	r3, [pc, #336]	; (8003908 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d109      	bne.n	80037d6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037c6:	e006      	b.n	80037d6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	73fb      	strb	r3, [r7, #15]
      break;
 80037cc:	e004      	b.n	80037d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037ce:	bf00      	nop
 80037d0:	e002      	b.n	80037d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037d2:	bf00      	nop
 80037d4:	e000      	b.n	80037d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80037d8:	7bfb      	ldrb	r3, [r7, #15]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10d      	bne.n	80037fa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80037de:	4b4a      	ldr	r3, [pc, #296]	; (8003908 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6819      	ldr	r1, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	3b01      	subs	r3, #1
 80037f0:	011b      	lsls	r3, r3, #4
 80037f2:	430b      	orrs	r3, r1
 80037f4:	4944      	ldr	r1, [pc, #272]	; (8003908 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80037fa:	7bfb      	ldrb	r3, [r7, #15]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d17d      	bne.n	80038fc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003800:	4b41      	ldr	r3, [pc, #260]	; (8003908 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a40      	ldr	r2, [pc, #256]	; (8003908 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003806:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800380a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800380c:	f7fd feaa 	bl	8001564 <HAL_GetTick>
 8003810:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003812:	e009      	b.n	8003828 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003814:	f7fd fea6 	bl	8001564 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d902      	bls.n	8003828 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	73fb      	strb	r3, [r7, #15]
        break;
 8003826:	e005      	b.n	8003834 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003828:	4b37      	ldr	r3, [pc, #220]	; (8003908 <RCCEx_PLLSAI1_Config+0x1e4>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1ef      	bne.n	8003814 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003834:	7bfb      	ldrb	r3, [r7, #15]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d160      	bne.n	80038fc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d111      	bne.n	8003864 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003840:	4b31      	ldr	r3, [pc, #196]	; (8003908 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003848:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	6892      	ldr	r2, [r2, #8]
 8003850:	0211      	lsls	r1, r2, #8
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	68d2      	ldr	r2, [r2, #12]
 8003856:	0912      	lsrs	r2, r2, #4
 8003858:	0452      	lsls	r2, r2, #17
 800385a:	430a      	orrs	r2, r1
 800385c:	492a      	ldr	r1, [pc, #168]	; (8003908 <RCCEx_PLLSAI1_Config+0x1e4>)
 800385e:	4313      	orrs	r3, r2
 8003860:	610b      	str	r3, [r1, #16]
 8003862:	e027      	b.n	80038b4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d112      	bne.n	8003890 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800386a:	4b27      	ldr	r3, [pc, #156]	; (8003908 <RCCEx_PLLSAI1_Config+0x1e4>)
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003872:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6892      	ldr	r2, [r2, #8]
 800387a:	0211      	lsls	r1, r2, #8
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	6912      	ldr	r2, [r2, #16]
 8003880:	0852      	lsrs	r2, r2, #1
 8003882:	3a01      	subs	r2, #1
 8003884:	0552      	lsls	r2, r2, #21
 8003886:	430a      	orrs	r2, r1
 8003888:	491f      	ldr	r1, [pc, #124]	; (8003908 <RCCEx_PLLSAI1_Config+0x1e4>)
 800388a:	4313      	orrs	r3, r2
 800388c:	610b      	str	r3, [r1, #16]
 800388e:	e011      	b.n	80038b4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003890:	4b1d      	ldr	r3, [pc, #116]	; (8003908 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003898:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	6892      	ldr	r2, [r2, #8]
 80038a0:	0211      	lsls	r1, r2, #8
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	6952      	ldr	r2, [r2, #20]
 80038a6:	0852      	lsrs	r2, r2, #1
 80038a8:	3a01      	subs	r2, #1
 80038aa:	0652      	lsls	r2, r2, #25
 80038ac:	430a      	orrs	r2, r1
 80038ae:	4916      	ldr	r1, [pc, #88]	; (8003908 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80038b4:	4b14      	ldr	r3, [pc, #80]	; (8003908 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a13      	ldr	r2, [pc, #76]	; (8003908 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c0:	f7fd fe50 	bl	8001564 <HAL_GetTick>
 80038c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038c6:	e009      	b.n	80038dc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038c8:	f7fd fe4c 	bl	8001564 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d902      	bls.n	80038dc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	73fb      	strb	r3, [r7, #15]
          break;
 80038da:	e005      	b.n	80038e8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038dc:	4b0a      	ldr	r3, [pc, #40]	; (8003908 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d0ef      	beq.n	80038c8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80038e8:	7bfb      	ldrb	r3, [r7, #15]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d106      	bne.n	80038fc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80038ee:	4b06      	ldr	r3, [pc, #24]	; (8003908 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038f0:	691a      	ldr	r2, [r3, #16]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	4904      	ldr	r1, [pc, #16]	; (8003908 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80038fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	40021000 	.word	0x40021000

0800390c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003916:	2300      	movs	r3, #0
 8003918:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800391a:	4b6a      	ldr	r3, [pc, #424]	; (8003ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	f003 0303 	and.w	r3, r3, #3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d018      	beq.n	8003958 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003926:	4b67      	ldr	r3, [pc, #412]	; (8003ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	f003 0203 	and.w	r2, r3, #3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	429a      	cmp	r2, r3
 8003934:	d10d      	bne.n	8003952 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
       ||
 800393a:	2b00      	cmp	r3, #0
 800393c:	d009      	beq.n	8003952 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800393e:	4b61      	ldr	r3, [pc, #388]	; (8003ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	091b      	lsrs	r3, r3, #4
 8003944:	f003 0307 	and.w	r3, r3, #7
 8003948:	1c5a      	adds	r2, r3, #1
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
       ||
 800394e:	429a      	cmp	r2, r3
 8003950:	d047      	beq.n	80039e2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	73fb      	strb	r3, [r7, #15]
 8003956:	e044      	b.n	80039e2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2b03      	cmp	r3, #3
 800395e:	d018      	beq.n	8003992 <RCCEx_PLLSAI2_Config+0x86>
 8003960:	2b03      	cmp	r3, #3
 8003962:	d825      	bhi.n	80039b0 <RCCEx_PLLSAI2_Config+0xa4>
 8003964:	2b01      	cmp	r3, #1
 8003966:	d002      	beq.n	800396e <RCCEx_PLLSAI2_Config+0x62>
 8003968:	2b02      	cmp	r3, #2
 800396a:	d009      	beq.n	8003980 <RCCEx_PLLSAI2_Config+0x74>
 800396c:	e020      	b.n	80039b0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800396e:	4b55      	ldr	r3, [pc, #340]	; (8003ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d11d      	bne.n	80039b6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800397e:	e01a      	b.n	80039b6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003980:	4b50      	ldr	r3, [pc, #320]	; (8003ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003988:	2b00      	cmp	r3, #0
 800398a:	d116      	bne.n	80039ba <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003990:	e013      	b.n	80039ba <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003992:	4b4c      	ldr	r3, [pc, #304]	; (8003ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10f      	bne.n	80039be <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800399e:	4b49      	ldr	r3, [pc, #292]	; (8003ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d109      	bne.n	80039be <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039ae:	e006      	b.n	80039be <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	73fb      	strb	r3, [r7, #15]
      break;
 80039b4:	e004      	b.n	80039c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80039b6:	bf00      	nop
 80039b8:	e002      	b.n	80039c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80039ba:	bf00      	nop
 80039bc:	e000      	b.n	80039c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80039be:	bf00      	nop
    }

    if(status == HAL_OK)
 80039c0:	7bfb      	ldrb	r3, [r7, #15]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10d      	bne.n	80039e2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80039c6:	4b3f      	ldr	r3, [pc, #252]	; (8003ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6819      	ldr	r1, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	3b01      	subs	r3, #1
 80039d8:	011b      	lsls	r3, r3, #4
 80039da:	430b      	orrs	r3, r1
 80039dc:	4939      	ldr	r1, [pc, #228]	; (8003ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80039e2:	7bfb      	ldrb	r3, [r7, #15]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d167      	bne.n	8003ab8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80039e8:	4b36      	ldr	r3, [pc, #216]	; (8003ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a35      	ldr	r2, [pc, #212]	; (8003ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039f4:	f7fd fdb6 	bl	8001564 <HAL_GetTick>
 80039f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039fa:	e009      	b.n	8003a10 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039fc:	f7fd fdb2 	bl	8001564 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d902      	bls.n	8003a10 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	73fb      	strb	r3, [r7, #15]
        break;
 8003a0e:	e005      	b.n	8003a1c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a10:	4b2c      	ldr	r3, [pc, #176]	; (8003ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1ef      	bne.n	80039fc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a1c:	7bfb      	ldrb	r3, [r7, #15]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d14a      	bne.n	8003ab8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d111      	bne.n	8003a4c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a28:	4b26      	ldr	r3, [pc, #152]	; (8003ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003a30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	6892      	ldr	r2, [r2, #8]
 8003a38:	0211      	lsls	r1, r2, #8
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	68d2      	ldr	r2, [r2, #12]
 8003a3e:	0912      	lsrs	r2, r2, #4
 8003a40:	0452      	lsls	r2, r2, #17
 8003a42:	430a      	orrs	r2, r1
 8003a44:	491f      	ldr	r1, [pc, #124]	; (8003ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	614b      	str	r3, [r1, #20]
 8003a4a:	e011      	b.n	8003a70 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a4c:	4b1d      	ldr	r3, [pc, #116]	; (8003ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a4e:	695b      	ldr	r3, [r3, #20]
 8003a50:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003a54:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	6892      	ldr	r2, [r2, #8]
 8003a5c:	0211      	lsls	r1, r2, #8
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	6912      	ldr	r2, [r2, #16]
 8003a62:	0852      	lsrs	r2, r2, #1
 8003a64:	3a01      	subs	r2, #1
 8003a66:	0652      	lsls	r2, r2, #25
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	4916      	ldr	r1, [pc, #88]	; (8003ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003a70:	4b14      	ldr	r3, [pc, #80]	; (8003ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a13      	ldr	r2, [pc, #76]	; (8003ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a7a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a7c:	f7fd fd72 	bl	8001564 <HAL_GetTick>
 8003a80:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a82:	e009      	b.n	8003a98 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a84:	f7fd fd6e 	bl	8001564 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d902      	bls.n	8003a98 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	73fb      	strb	r3, [r7, #15]
          break;
 8003a96:	e005      	b.n	8003aa4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a98:	4b0a      	ldr	r3, [pc, #40]	; (8003ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d0ef      	beq.n	8003a84 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003aa4:	7bfb      	ldrb	r3, [r7, #15]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d106      	bne.n	8003ab8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003aaa:	4b06      	ldr	r3, [pc, #24]	; (8003ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aac:	695a      	ldr	r2, [r3, #20]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	4904      	ldr	r1, [pc, #16]	; (8003ac4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	40021000 	.word	0x40021000

08003ac8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e095      	b.n	8003c06 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d108      	bne.n	8003af4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003aea:	d009      	beq.n	8003b00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	61da      	str	r2, [r3, #28]
 8003af2:	e005      	b.n	8003b00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d106      	bne.n	8003b20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7fd fa9c 	bl	8001058 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2202      	movs	r2, #2
 8003b24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b36:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b40:	d902      	bls.n	8003b48 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003b42:	2300      	movs	r3, #0
 8003b44:	60fb      	str	r3, [r7, #12]
 8003b46:	e002      	b.n	8003b4e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b4c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003b56:	d007      	beq.n	8003b68 <HAL_SPI_Init+0xa0>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b60:	d002      	beq.n	8003b68 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b78:	431a      	orrs	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	431a      	orrs	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b96:	431a      	orrs	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ba0:	431a      	orrs	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003baa:	ea42 0103 	orr.w	r1, r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	0c1b      	lsrs	r3, r3, #16
 8003bc4:	f003 0204 	and.w	r2, r3, #4
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	f003 0310 	and.w	r3, r3, #16
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bd6:	f003 0308 	and.w	r3, r3, #8
 8003bda:	431a      	orrs	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003be4:	ea42 0103 	orr.w	r1, r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b082      	sub	sp, #8
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d101      	bne.n	8003c20 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e049      	b.n	8003cb4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d106      	bne.n	8003c3a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f7fd fa53 	bl	80010e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	3304      	adds	r3, #4
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	4610      	mov	r0, r2
 8003c4e:	f000 fb73 	bl	8004338 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3708      	adds	r7, #8
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e049      	b.n	8003d62 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d106      	bne.n	8003ce8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f841 	bl	8003d6a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2202      	movs	r2, #2
 8003cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	3304      	adds	r3, #4
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	4610      	mov	r0, r2
 8003cfc:	f000 fb1c 	bl	8004338 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b083      	sub	sp, #12
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d72:	bf00      	nop
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
	...

08003d80 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d109      	bne.n	8003da4 <HAL_TIM_PWM_Start+0x24>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	bf14      	ite	ne
 8003d9c:	2301      	movne	r3, #1
 8003d9e:	2300      	moveq	r3, #0
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	e03c      	b.n	8003e1e <HAL_TIM_PWM_Start+0x9e>
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	2b04      	cmp	r3, #4
 8003da8:	d109      	bne.n	8003dbe <HAL_TIM_PWM_Start+0x3e>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	bf14      	ite	ne
 8003db6:	2301      	movne	r3, #1
 8003db8:	2300      	moveq	r3, #0
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	e02f      	b.n	8003e1e <HAL_TIM_PWM_Start+0x9e>
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	2b08      	cmp	r3, #8
 8003dc2:	d109      	bne.n	8003dd8 <HAL_TIM_PWM_Start+0x58>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	bf14      	ite	ne
 8003dd0:	2301      	movne	r3, #1
 8003dd2:	2300      	moveq	r3, #0
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	e022      	b.n	8003e1e <HAL_TIM_PWM_Start+0x9e>
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	2b0c      	cmp	r3, #12
 8003ddc:	d109      	bne.n	8003df2 <HAL_TIM_PWM_Start+0x72>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	bf14      	ite	ne
 8003dea:	2301      	movne	r3, #1
 8003dec:	2300      	moveq	r3, #0
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	e015      	b.n	8003e1e <HAL_TIM_PWM_Start+0x9e>
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	2b10      	cmp	r3, #16
 8003df6:	d109      	bne.n	8003e0c <HAL_TIM_PWM_Start+0x8c>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	bf14      	ite	ne
 8003e04:	2301      	movne	r3, #1
 8003e06:	2300      	moveq	r3, #0
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	e008      	b.n	8003e1e <HAL_TIM_PWM_Start+0x9e>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	bf14      	ite	ne
 8003e18:	2301      	movne	r3, #1
 8003e1a:	2300      	moveq	r3, #0
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e09c      	b.n	8003f60 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d104      	bne.n	8003e36 <HAL_TIM_PWM_Start+0xb6>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2202      	movs	r2, #2
 8003e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e34:	e023      	b.n	8003e7e <HAL_TIM_PWM_Start+0xfe>
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	2b04      	cmp	r3, #4
 8003e3a:	d104      	bne.n	8003e46 <HAL_TIM_PWM_Start+0xc6>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2202      	movs	r2, #2
 8003e40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e44:	e01b      	b.n	8003e7e <HAL_TIM_PWM_Start+0xfe>
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	2b08      	cmp	r3, #8
 8003e4a:	d104      	bne.n	8003e56 <HAL_TIM_PWM_Start+0xd6>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2202      	movs	r2, #2
 8003e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e54:	e013      	b.n	8003e7e <HAL_TIM_PWM_Start+0xfe>
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	2b0c      	cmp	r3, #12
 8003e5a:	d104      	bne.n	8003e66 <HAL_TIM_PWM_Start+0xe6>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2202      	movs	r2, #2
 8003e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e64:	e00b      	b.n	8003e7e <HAL_TIM_PWM_Start+0xfe>
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	2b10      	cmp	r3, #16
 8003e6a:	d104      	bne.n	8003e76 <HAL_TIM_PWM_Start+0xf6>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2202      	movs	r2, #2
 8003e70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e74:	e003      	b.n	8003e7e <HAL_TIM_PWM_Start+0xfe>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2202      	movs	r2, #2
 8003e7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2201      	movs	r2, #1
 8003e84:	6839      	ldr	r1, [r7, #0]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f000 fe60 	bl	8004b4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a35      	ldr	r2, [pc, #212]	; (8003f68 <HAL_TIM_PWM_Start+0x1e8>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d013      	beq.n	8003ebe <HAL_TIM_PWM_Start+0x13e>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a34      	ldr	r2, [pc, #208]	; (8003f6c <HAL_TIM_PWM_Start+0x1ec>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d00e      	beq.n	8003ebe <HAL_TIM_PWM_Start+0x13e>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a32      	ldr	r2, [pc, #200]	; (8003f70 <HAL_TIM_PWM_Start+0x1f0>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d009      	beq.n	8003ebe <HAL_TIM_PWM_Start+0x13e>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a31      	ldr	r2, [pc, #196]	; (8003f74 <HAL_TIM_PWM_Start+0x1f4>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d004      	beq.n	8003ebe <HAL_TIM_PWM_Start+0x13e>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a2f      	ldr	r2, [pc, #188]	; (8003f78 <HAL_TIM_PWM_Start+0x1f8>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d101      	bne.n	8003ec2 <HAL_TIM_PWM_Start+0x142>
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e000      	b.n	8003ec4 <HAL_TIM_PWM_Start+0x144>
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d007      	beq.n	8003ed8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ed6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a22      	ldr	r2, [pc, #136]	; (8003f68 <HAL_TIM_PWM_Start+0x1e8>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d01d      	beq.n	8003f1e <HAL_TIM_PWM_Start+0x19e>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eea:	d018      	beq.n	8003f1e <HAL_TIM_PWM_Start+0x19e>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a22      	ldr	r2, [pc, #136]	; (8003f7c <HAL_TIM_PWM_Start+0x1fc>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d013      	beq.n	8003f1e <HAL_TIM_PWM_Start+0x19e>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a21      	ldr	r2, [pc, #132]	; (8003f80 <HAL_TIM_PWM_Start+0x200>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d00e      	beq.n	8003f1e <HAL_TIM_PWM_Start+0x19e>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a1f      	ldr	r2, [pc, #124]	; (8003f84 <HAL_TIM_PWM_Start+0x204>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d009      	beq.n	8003f1e <HAL_TIM_PWM_Start+0x19e>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a17      	ldr	r2, [pc, #92]	; (8003f6c <HAL_TIM_PWM_Start+0x1ec>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d004      	beq.n	8003f1e <HAL_TIM_PWM_Start+0x19e>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a15      	ldr	r2, [pc, #84]	; (8003f70 <HAL_TIM_PWM_Start+0x1f0>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d115      	bne.n	8003f4a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	4b18      	ldr	r3, [pc, #96]	; (8003f88 <HAL_TIM_PWM_Start+0x208>)
 8003f26:	4013      	ands	r3, r2
 8003f28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2b06      	cmp	r3, #6
 8003f2e:	d015      	beq.n	8003f5c <HAL_TIM_PWM_Start+0x1dc>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f36:	d011      	beq.n	8003f5c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f042 0201 	orr.w	r2, r2, #1
 8003f46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f48:	e008      	b.n	8003f5c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f042 0201 	orr.w	r2, r2, #1
 8003f58:	601a      	str	r2, [r3, #0]
 8003f5a:	e000      	b.n	8003f5e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f5c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3710      	adds	r7, #16
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	40012c00 	.word	0x40012c00
 8003f6c:	40013400 	.word	0x40013400
 8003f70:	40014000 	.word	0x40014000
 8003f74:	40014400 	.word	0x40014400
 8003f78:	40014800 	.word	0x40014800
 8003f7c:	40000400 	.word	0x40000400
 8003f80:	40000800 	.word	0x40000800
 8003f84:	40000c00 	.word	0x40000c00
 8003f88:	00010007 	.word	0x00010007

08003f8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d101      	bne.n	8003fa6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	e0fd      	b.n	80041a2 <HAL_TIM_PWM_ConfigChannel+0x216>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b14      	cmp	r3, #20
 8003fb2:	f200 80f0 	bhi.w	8004196 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8003fb6:	a201      	add	r2, pc, #4	; (adr r2, 8003fbc <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fbc:	08004011 	.word	0x08004011
 8003fc0:	08004197 	.word	0x08004197
 8003fc4:	08004197 	.word	0x08004197
 8003fc8:	08004197 	.word	0x08004197
 8003fcc:	08004051 	.word	0x08004051
 8003fd0:	08004197 	.word	0x08004197
 8003fd4:	08004197 	.word	0x08004197
 8003fd8:	08004197 	.word	0x08004197
 8003fdc:	08004093 	.word	0x08004093
 8003fe0:	08004197 	.word	0x08004197
 8003fe4:	08004197 	.word	0x08004197
 8003fe8:	08004197 	.word	0x08004197
 8003fec:	080040d3 	.word	0x080040d3
 8003ff0:	08004197 	.word	0x08004197
 8003ff4:	08004197 	.word	0x08004197
 8003ff8:	08004197 	.word	0x08004197
 8003ffc:	08004115 	.word	0x08004115
 8004000:	08004197 	.word	0x08004197
 8004004:	08004197 	.word	0x08004197
 8004008:	08004197 	.word	0x08004197
 800400c:	08004155 	.word	0x08004155
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68b9      	ldr	r1, [r7, #8]
 8004016:	4618      	mov	r0, r3
 8004018:	f000 fa28 	bl	800446c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	699a      	ldr	r2, [r3, #24]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f042 0208 	orr.w	r2, r2, #8
 800402a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	699a      	ldr	r2, [r3, #24]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 0204 	bic.w	r2, r2, #4
 800403a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	6999      	ldr	r1, [r3, #24]
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	691a      	ldr	r2, [r3, #16]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	619a      	str	r2, [r3, #24]
      break;
 800404e:	e0a3      	b.n	8004198 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68b9      	ldr	r1, [r7, #8]
 8004056:	4618      	mov	r0, r3
 8004058:	f000 fa98 	bl	800458c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	699a      	ldr	r2, [r3, #24]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800406a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	699a      	ldr	r2, [r3, #24]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800407a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6999      	ldr	r1, [r3, #24]
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	021a      	lsls	r2, r3, #8
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	430a      	orrs	r2, r1
 800408e:	619a      	str	r2, [r3, #24]
      break;
 8004090:	e082      	b.n	8004198 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68b9      	ldr	r1, [r7, #8]
 8004098:	4618      	mov	r0, r3
 800409a:	f000 fb01 	bl	80046a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	69da      	ldr	r2, [r3, #28]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f042 0208 	orr.w	r2, r2, #8
 80040ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	69da      	ldr	r2, [r3, #28]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f022 0204 	bic.w	r2, r2, #4
 80040bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	69d9      	ldr	r1, [r3, #28]
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	691a      	ldr	r2, [r3, #16]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	61da      	str	r2, [r3, #28]
      break;
 80040d0:	e062      	b.n	8004198 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68b9      	ldr	r1, [r7, #8]
 80040d8:	4618      	mov	r0, r3
 80040da:	f000 fb69 	bl	80047b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	69da      	ldr	r2, [r3, #28]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	69da      	ldr	r2, [r3, #28]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	69d9      	ldr	r1, [r3, #28]
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	021a      	lsls	r2, r3, #8
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	61da      	str	r2, [r3, #28]
      break;
 8004112:	e041      	b.n	8004198 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68b9      	ldr	r1, [r7, #8]
 800411a:	4618      	mov	r0, r3
 800411c:	f000 fbb2 	bl	8004884 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f042 0208 	orr.w	r2, r2, #8
 800412e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 0204 	bic.w	r2, r2, #4
 800413e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	691a      	ldr	r2, [r3, #16]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004152:	e021      	b.n	8004198 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68b9      	ldr	r1, [r7, #8]
 800415a:	4618      	mov	r0, r3
 800415c:	f000 fbf6 	bl	800494c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800416e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800417e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	021a      	lsls	r2, r3, #8
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004194:	e000      	b.n	8004198 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004196:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop

080041ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d101      	bne.n	80041c4 <HAL_TIM_ConfigClockSource+0x18>
 80041c0:	2302      	movs	r3, #2
 80041c2:	e0b5      	b.n	8004330 <HAL_TIM_ConfigClockSource+0x184>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2202      	movs	r2, #2
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80041e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041ee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004200:	d03e      	beq.n	8004280 <HAL_TIM_ConfigClockSource+0xd4>
 8004202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004206:	f200 8087 	bhi.w	8004318 <HAL_TIM_ConfigClockSource+0x16c>
 800420a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800420e:	f000 8085 	beq.w	800431c <HAL_TIM_ConfigClockSource+0x170>
 8004212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004216:	d87f      	bhi.n	8004318 <HAL_TIM_ConfigClockSource+0x16c>
 8004218:	2b70      	cmp	r3, #112	; 0x70
 800421a:	d01a      	beq.n	8004252 <HAL_TIM_ConfigClockSource+0xa6>
 800421c:	2b70      	cmp	r3, #112	; 0x70
 800421e:	d87b      	bhi.n	8004318 <HAL_TIM_ConfigClockSource+0x16c>
 8004220:	2b60      	cmp	r3, #96	; 0x60
 8004222:	d050      	beq.n	80042c6 <HAL_TIM_ConfigClockSource+0x11a>
 8004224:	2b60      	cmp	r3, #96	; 0x60
 8004226:	d877      	bhi.n	8004318 <HAL_TIM_ConfigClockSource+0x16c>
 8004228:	2b50      	cmp	r3, #80	; 0x50
 800422a:	d03c      	beq.n	80042a6 <HAL_TIM_ConfigClockSource+0xfa>
 800422c:	2b50      	cmp	r3, #80	; 0x50
 800422e:	d873      	bhi.n	8004318 <HAL_TIM_ConfigClockSource+0x16c>
 8004230:	2b40      	cmp	r3, #64	; 0x40
 8004232:	d058      	beq.n	80042e6 <HAL_TIM_ConfigClockSource+0x13a>
 8004234:	2b40      	cmp	r3, #64	; 0x40
 8004236:	d86f      	bhi.n	8004318 <HAL_TIM_ConfigClockSource+0x16c>
 8004238:	2b30      	cmp	r3, #48	; 0x30
 800423a:	d064      	beq.n	8004306 <HAL_TIM_ConfigClockSource+0x15a>
 800423c:	2b30      	cmp	r3, #48	; 0x30
 800423e:	d86b      	bhi.n	8004318 <HAL_TIM_ConfigClockSource+0x16c>
 8004240:	2b20      	cmp	r3, #32
 8004242:	d060      	beq.n	8004306 <HAL_TIM_ConfigClockSource+0x15a>
 8004244:	2b20      	cmp	r3, #32
 8004246:	d867      	bhi.n	8004318 <HAL_TIM_ConfigClockSource+0x16c>
 8004248:	2b00      	cmp	r3, #0
 800424a:	d05c      	beq.n	8004306 <HAL_TIM_ConfigClockSource+0x15a>
 800424c:	2b10      	cmp	r3, #16
 800424e:	d05a      	beq.n	8004306 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004250:	e062      	b.n	8004318 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6818      	ldr	r0, [r3, #0]
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	6899      	ldr	r1, [r3, #8]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	685a      	ldr	r2, [r3, #4]
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	f000 fc53 	bl	8004b0c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004274:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	609a      	str	r2, [r3, #8]
      break;
 800427e:	e04e      	b.n	800431e <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6818      	ldr	r0, [r3, #0]
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	6899      	ldr	r1, [r3, #8]
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	f000 fc3c 	bl	8004b0c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689a      	ldr	r2, [r3, #8]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042a2:	609a      	str	r2, [r3, #8]
      break;
 80042a4:	e03b      	b.n	800431e <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6818      	ldr	r0, [r3, #0]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	6859      	ldr	r1, [r3, #4]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	461a      	mov	r2, r3
 80042b4:	f000 fbb0 	bl	8004a18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2150      	movs	r1, #80	; 0x50
 80042be:	4618      	mov	r0, r3
 80042c0:	f000 fc09 	bl	8004ad6 <TIM_ITRx_SetConfig>
      break;
 80042c4:	e02b      	b.n	800431e <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6818      	ldr	r0, [r3, #0]
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	6859      	ldr	r1, [r3, #4]
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	461a      	mov	r2, r3
 80042d4:	f000 fbcf 	bl	8004a76 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2160      	movs	r1, #96	; 0x60
 80042de:	4618      	mov	r0, r3
 80042e0:	f000 fbf9 	bl	8004ad6 <TIM_ITRx_SetConfig>
      break;
 80042e4:	e01b      	b.n	800431e <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6818      	ldr	r0, [r3, #0]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	6859      	ldr	r1, [r3, #4]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	461a      	mov	r2, r3
 80042f4:	f000 fb90 	bl	8004a18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2140      	movs	r1, #64	; 0x40
 80042fe:	4618      	mov	r0, r3
 8004300:	f000 fbe9 	bl	8004ad6 <TIM_ITRx_SetConfig>
      break;
 8004304:	e00b      	b.n	800431e <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4619      	mov	r1, r3
 8004310:	4610      	mov	r0, r2
 8004312:	f000 fbe0 	bl	8004ad6 <TIM_ITRx_SetConfig>
        break;
 8004316:	e002      	b.n	800431e <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004318:	bf00      	nop
 800431a:	e000      	b.n	800431e <HAL_TIM_ConfigClockSource+0x172>
      break;
 800431c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3710      	adds	r7, #16
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a40      	ldr	r2, [pc, #256]	; (800444c <TIM_Base_SetConfig+0x114>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d013      	beq.n	8004378 <TIM_Base_SetConfig+0x40>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004356:	d00f      	beq.n	8004378 <TIM_Base_SetConfig+0x40>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a3d      	ldr	r2, [pc, #244]	; (8004450 <TIM_Base_SetConfig+0x118>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d00b      	beq.n	8004378 <TIM_Base_SetConfig+0x40>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a3c      	ldr	r2, [pc, #240]	; (8004454 <TIM_Base_SetConfig+0x11c>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d007      	beq.n	8004378 <TIM_Base_SetConfig+0x40>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a3b      	ldr	r2, [pc, #236]	; (8004458 <TIM_Base_SetConfig+0x120>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d003      	beq.n	8004378 <TIM_Base_SetConfig+0x40>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a3a      	ldr	r2, [pc, #232]	; (800445c <TIM_Base_SetConfig+0x124>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d108      	bne.n	800438a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800437e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	4313      	orrs	r3, r2
 8004388:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a2f      	ldr	r2, [pc, #188]	; (800444c <TIM_Base_SetConfig+0x114>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d01f      	beq.n	80043d2 <TIM_Base_SetConfig+0x9a>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004398:	d01b      	beq.n	80043d2 <TIM_Base_SetConfig+0x9a>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a2c      	ldr	r2, [pc, #176]	; (8004450 <TIM_Base_SetConfig+0x118>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d017      	beq.n	80043d2 <TIM_Base_SetConfig+0x9a>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a2b      	ldr	r2, [pc, #172]	; (8004454 <TIM_Base_SetConfig+0x11c>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d013      	beq.n	80043d2 <TIM_Base_SetConfig+0x9a>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a2a      	ldr	r2, [pc, #168]	; (8004458 <TIM_Base_SetConfig+0x120>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d00f      	beq.n	80043d2 <TIM_Base_SetConfig+0x9a>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a29      	ldr	r2, [pc, #164]	; (800445c <TIM_Base_SetConfig+0x124>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d00b      	beq.n	80043d2 <TIM_Base_SetConfig+0x9a>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a28      	ldr	r2, [pc, #160]	; (8004460 <TIM_Base_SetConfig+0x128>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d007      	beq.n	80043d2 <TIM_Base_SetConfig+0x9a>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a27      	ldr	r2, [pc, #156]	; (8004464 <TIM_Base_SetConfig+0x12c>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d003      	beq.n	80043d2 <TIM_Base_SetConfig+0x9a>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a26      	ldr	r2, [pc, #152]	; (8004468 <TIM_Base_SetConfig+0x130>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d108      	bne.n	80043e4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a10      	ldr	r2, [pc, #64]	; (800444c <TIM_Base_SetConfig+0x114>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d00f      	beq.n	8004430 <TIM_Base_SetConfig+0xf8>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a12      	ldr	r2, [pc, #72]	; (800445c <TIM_Base_SetConfig+0x124>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d00b      	beq.n	8004430 <TIM_Base_SetConfig+0xf8>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a11      	ldr	r2, [pc, #68]	; (8004460 <TIM_Base_SetConfig+0x128>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d007      	beq.n	8004430 <TIM_Base_SetConfig+0xf8>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a10      	ldr	r2, [pc, #64]	; (8004464 <TIM_Base_SetConfig+0x12c>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d003      	beq.n	8004430 <TIM_Base_SetConfig+0xf8>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a0f      	ldr	r2, [pc, #60]	; (8004468 <TIM_Base_SetConfig+0x130>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d103      	bne.n	8004438 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	691a      	ldr	r2, [r3, #16]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	615a      	str	r2, [r3, #20]
}
 800443e:	bf00      	nop
 8004440:	3714      	adds	r7, #20
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	40012c00 	.word	0x40012c00
 8004450:	40000400 	.word	0x40000400
 8004454:	40000800 	.word	0x40000800
 8004458:	40000c00 	.word	0x40000c00
 800445c:	40013400 	.word	0x40013400
 8004460:	40014000 	.word	0x40014000
 8004464:	40014400 	.word	0x40014400
 8004468:	40014800 	.word	0x40014800

0800446c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800446c:	b480      	push	{r7}
 800446e:	b087      	sub	sp, #28
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	f023 0201 	bic.w	r2, r3, #1
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800449a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800449e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f023 0303 	bic.w	r3, r3, #3
 80044a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	f023 0302 	bic.w	r3, r3, #2
 80044b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a2c      	ldr	r2, [pc, #176]	; (8004578 <TIM_OC1_SetConfig+0x10c>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d00f      	beq.n	80044ec <TIM_OC1_SetConfig+0x80>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a2b      	ldr	r2, [pc, #172]	; (800457c <TIM_OC1_SetConfig+0x110>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d00b      	beq.n	80044ec <TIM_OC1_SetConfig+0x80>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a2a      	ldr	r2, [pc, #168]	; (8004580 <TIM_OC1_SetConfig+0x114>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d007      	beq.n	80044ec <TIM_OC1_SetConfig+0x80>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a29      	ldr	r2, [pc, #164]	; (8004584 <TIM_OC1_SetConfig+0x118>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d003      	beq.n	80044ec <TIM_OC1_SetConfig+0x80>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a28      	ldr	r2, [pc, #160]	; (8004588 <TIM_OC1_SetConfig+0x11c>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d10c      	bne.n	8004506 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	f023 0308 	bic.w	r3, r3, #8
 80044f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	f023 0304 	bic.w	r3, r3, #4
 8004504:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a1b      	ldr	r2, [pc, #108]	; (8004578 <TIM_OC1_SetConfig+0x10c>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d00f      	beq.n	800452e <TIM_OC1_SetConfig+0xc2>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a1a      	ldr	r2, [pc, #104]	; (800457c <TIM_OC1_SetConfig+0x110>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d00b      	beq.n	800452e <TIM_OC1_SetConfig+0xc2>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a19      	ldr	r2, [pc, #100]	; (8004580 <TIM_OC1_SetConfig+0x114>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d007      	beq.n	800452e <TIM_OC1_SetConfig+0xc2>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a18      	ldr	r2, [pc, #96]	; (8004584 <TIM_OC1_SetConfig+0x118>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d003      	beq.n	800452e <TIM_OC1_SetConfig+0xc2>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a17      	ldr	r2, [pc, #92]	; (8004588 <TIM_OC1_SetConfig+0x11c>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d111      	bne.n	8004552 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004534:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800453c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	4313      	orrs	r3, r2
 8004546:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	4313      	orrs	r3, r2
 8004550:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	685a      	ldr	r2, [r3, #4]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	697a      	ldr	r2, [r7, #20]
 800456a:	621a      	str	r2, [r3, #32]
}
 800456c:	bf00      	nop
 800456e:	371c      	adds	r7, #28
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr
 8004578:	40012c00 	.word	0x40012c00
 800457c:	40013400 	.word	0x40013400
 8004580:	40014000 	.word	0x40014000
 8004584:	40014400 	.word	0x40014400
 8004588:	40014800 	.word	0x40014800

0800458c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800458c:	b480      	push	{r7}
 800458e:	b087      	sub	sp, #28
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	f023 0210 	bic.w	r2, r3, #16
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	021b      	lsls	r3, r3, #8
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	f023 0320 	bic.w	r3, r3, #32
 80045da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	011b      	lsls	r3, r3, #4
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a28      	ldr	r2, [pc, #160]	; (800468c <TIM_OC2_SetConfig+0x100>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d003      	beq.n	80045f8 <TIM_OC2_SetConfig+0x6c>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a27      	ldr	r2, [pc, #156]	; (8004690 <TIM_OC2_SetConfig+0x104>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d10d      	bne.n	8004614 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	011b      	lsls	r3, r3, #4
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	4313      	orrs	r3, r2
 800460a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004612:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a1d      	ldr	r2, [pc, #116]	; (800468c <TIM_OC2_SetConfig+0x100>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d00f      	beq.n	800463c <TIM_OC2_SetConfig+0xb0>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a1c      	ldr	r2, [pc, #112]	; (8004690 <TIM_OC2_SetConfig+0x104>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d00b      	beq.n	800463c <TIM_OC2_SetConfig+0xb0>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a1b      	ldr	r2, [pc, #108]	; (8004694 <TIM_OC2_SetConfig+0x108>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d007      	beq.n	800463c <TIM_OC2_SetConfig+0xb0>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a1a      	ldr	r2, [pc, #104]	; (8004698 <TIM_OC2_SetConfig+0x10c>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d003      	beq.n	800463c <TIM_OC2_SetConfig+0xb0>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a19      	ldr	r2, [pc, #100]	; (800469c <TIM_OC2_SetConfig+0x110>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d113      	bne.n	8004664 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004642:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800464a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	4313      	orrs	r3, r2
 8004656:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	699b      	ldr	r3, [r3, #24]
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	4313      	orrs	r3, r2
 8004662:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685a      	ldr	r2, [r3, #4]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	621a      	str	r2, [r3, #32]
}
 800467e:	bf00      	nop
 8004680:	371c      	adds	r7, #28
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	40012c00 	.word	0x40012c00
 8004690:	40013400 	.word	0x40013400
 8004694:	40014000 	.word	0x40014000
 8004698:	40014400 	.word	0x40014400
 800469c:	40014800 	.word	0x40014800

080046a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b087      	sub	sp, #28
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	69db      	ldr	r3, [r3, #28]
 80046c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f023 0303 	bic.w	r3, r3, #3
 80046da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	021b      	lsls	r3, r3, #8
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a27      	ldr	r2, [pc, #156]	; (800479c <TIM_OC3_SetConfig+0xfc>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d003      	beq.n	800470a <TIM_OC3_SetConfig+0x6a>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a26      	ldr	r2, [pc, #152]	; (80047a0 <TIM_OC3_SetConfig+0x100>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d10d      	bne.n	8004726 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004710:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	021b      	lsls	r3, r3, #8
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	4313      	orrs	r3, r2
 800471c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004724:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a1c      	ldr	r2, [pc, #112]	; (800479c <TIM_OC3_SetConfig+0xfc>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d00f      	beq.n	800474e <TIM_OC3_SetConfig+0xae>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a1b      	ldr	r2, [pc, #108]	; (80047a0 <TIM_OC3_SetConfig+0x100>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d00b      	beq.n	800474e <TIM_OC3_SetConfig+0xae>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a1a      	ldr	r2, [pc, #104]	; (80047a4 <TIM_OC3_SetConfig+0x104>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d007      	beq.n	800474e <TIM_OC3_SetConfig+0xae>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a19      	ldr	r2, [pc, #100]	; (80047a8 <TIM_OC3_SetConfig+0x108>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d003      	beq.n	800474e <TIM_OC3_SetConfig+0xae>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a18      	ldr	r2, [pc, #96]	; (80047ac <TIM_OC3_SetConfig+0x10c>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d113      	bne.n	8004776 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004754:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800475c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	011b      	lsls	r3, r3, #4
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	4313      	orrs	r3, r2
 8004768:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	011b      	lsls	r3, r3, #4
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	4313      	orrs	r3, r2
 8004774:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	685a      	ldr	r2, [r3, #4]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	621a      	str	r2, [r3, #32]
}
 8004790:	bf00      	nop
 8004792:	371c      	adds	r7, #28
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr
 800479c:	40012c00 	.word	0x40012c00
 80047a0:	40013400 	.word	0x40013400
 80047a4:	40014000 	.word	0x40014000
 80047a8:	40014400 	.word	0x40014400
 80047ac:	40014800 	.word	0x40014800

080047b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b087      	sub	sp, #28
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	69db      	ldr	r3, [r3, #28]
 80047d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	021b      	lsls	r3, r3, #8
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	031b      	lsls	r3, r3, #12
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	4313      	orrs	r3, r2
 800480a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a18      	ldr	r2, [pc, #96]	; (8004870 <TIM_OC4_SetConfig+0xc0>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d00f      	beq.n	8004834 <TIM_OC4_SetConfig+0x84>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a17      	ldr	r2, [pc, #92]	; (8004874 <TIM_OC4_SetConfig+0xc4>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d00b      	beq.n	8004834 <TIM_OC4_SetConfig+0x84>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a16      	ldr	r2, [pc, #88]	; (8004878 <TIM_OC4_SetConfig+0xc8>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d007      	beq.n	8004834 <TIM_OC4_SetConfig+0x84>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a15      	ldr	r2, [pc, #84]	; (800487c <TIM_OC4_SetConfig+0xcc>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d003      	beq.n	8004834 <TIM_OC4_SetConfig+0x84>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a14      	ldr	r2, [pc, #80]	; (8004880 <TIM_OC4_SetConfig+0xd0>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d109      	bne.n	8004848 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800483a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	695b      	ldr	r3, [r3, #20]
 8004840:	019b      	lsls	r3, r3, #6
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	4313      	orrs	r3, r2
 8004846:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	685a      	ldr	r2, [r3, #4]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	621a      	str	r2, [r3, #32]
}
 8004862:	bf00      	nop
 8004864:	371c      	adds	r7, #28
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	40012c00 	.word	0x40012c00
 8004874:	40013400 	.word	0x40013400
 8004878:	40014000 	.word	0x40014000
 800487c:	40014400 	.word	0x40014400
 8004880:	40014800 	.word	0x40014800

08004884 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004884:	b480      	push	{r7}
 8004886:	b087      	sub	sp, #28
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	4313      	orrs	r3, r2
 80048c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80048c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	041b      	lsls	r3, r3, #16
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a17      	ldr	r2, [pc, #92]	; (8004938 <TIM_OC5_SetConfig+0xb4>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d00f      	beq.n	80048fe <TIM_OC5_SetConfig+0x7a>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a16      	ldr	r2, [pc, #88]	; (800493c <TIM_OC5_SetConfig+0xb8>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d00b      	beq.n	80048fe <TIM_OC5_SetConfig+0x7a>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a15      	ldr	r2, [pc, #84]	; (8004940 <TIM_OC5_SetConfig+0xbc>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d007      	beq.n	80048fe <TIM_OC5_SetConfig+0x7a>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a14      	ldr	r2, [pc, #80]	; (8004944 <TIM_OC5_SetConfig+0xc0>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d003      	beq.n	80048fe <TIM_OC5_SetConfig+0x7a>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a13      	ldr	r2, [pc, #76]	; (8004948 <TIM_OC5_SetConfig+0xc4>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d109      	bne.n	8004912 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004904:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	021b      	lsls	r3, r3, #8
 800490c:	697a      	ldr	r2, [r7, #20]
 800490e:	4313      	orrs	r3, r2
 8004910:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	685a      	ldr	r2, [r3, #4]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	621a      	str	r2, [r3, #32]
}
 800492c:	bf00      	nop
 800492e:	371c      	adds	r7, #28
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr
 8004938:	40012c00 	.word	0x40012c00
 800493c:	40013400 	.word	0x40013400
 8004940:	40014000 	.word	0x40014000
 8004944:	40014400 	.word	0x40014400
 8004948:	40014800 	.word	0x40014800

0800494c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800494c:	b480      	push	{r7}
 800494e:	b087      	sub	sp, #28
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800497a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800497e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	021b      	lsls	r3, r3, #8
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	4313      	orrs	r3, r2
 800498a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004992:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	051b      	lsls	r3, r3, #20
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	4313      	orrs	r3, r2
 800499e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a18      	ldr	r2, [pc, #96]	; (8004a04 <TIM_OC6_SetConfig+0xb8>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d00f      	beq.n	80049c8 <TIM_OC6_SetConfig+0x7c>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a17      	ldr	r2, [pc, #92]	; (8004a08 <TIM_OC6_SetConfig+0xbc>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d00b      	beq.n	80049c8 <TIM_OC6_SetConfig+0x7c>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a16      	ldr	r2, [pc, #88]	; (8004a0c <TIM_OC6_SetConfig+0xc0>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d007      	beq.n	80049c8 <TIM_OC6_SetConfig+0x7c>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a15      	ldr	r2, [pc, #84]	; (8004a10 <TIM_OC6_SetConfig+0xc4>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d003      	beq.n	80049c8 <TIM_OC6_SetConfig+0x7c>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a14      	ldr	r2, [pc, #80]	; (8004a14 <TIM_OC6_SetConfig+0xc8>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d109      	bne.n	80049dc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	695b      	ldr	r3, [r3, #20]
 80049d4:	029b      	lsls	r3, r3, #10
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	4313      	orrs	r3, r2
 80049da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	685a      	ldr	r2, [r3, #4]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	693a      	ldr	r2, [r7, #16]
 80049f4:	621a      	str	r2, [r3, #32]
}
 80049f6:	bf00      	nop
 80049f8:	371c      	adds	r7, #28
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	40012c00 	.word	0x40012c00
 8004a08:	40013400 	.word	0x40013400
 8004a0c:	40014000 	.word	0x40014000
 8004a10:	40014400 	.word	0x40014400
 8004a14:	40014800 	.word	0x40014800

08004a18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b087      	sub	sp, #28
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6a1b      	ldr	r3, [r3, #32]
 8004a28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	f023 0201 	bic.w	r2, r3, #1
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	011b      	lsls	r3, r3, #4
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	f023 030a 	bic.w	r3, r3, #10
 8004a54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a56:	697a      	ldr	r2, [r7, #20]
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	693a      	ldr	r2, [r7, #16]
 8004a62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	621a      	str	r2, [r3, #32]
}
 8004a6a:	bf00      	nop
 8004a6c:	371c      	adds	r7, #28
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b087      	sub	sp, #28
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	60f8      	str	r0, [r7, #12]
 8004a7e:	60b9      	str	r1, [r7, #8]
 8004a80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	f023 0210 	bic.w	r2, r3, #16
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6a1b      	ldr	r3, [r3, #32]
 8004a98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004aa0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	031b      	lsls	r3, r3, #12
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ab2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	011b      	lsls	r3, r3, #4
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	697a      	ldr	r2, [r7, #20]
 8004ac2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	621a      	str	r2, [r3, #32]
}
 8004aca:	bf00      	nop
 8004acc:	371c      	adds	r7, #28
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr

08004ad6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	b085      	sub	sp, #20
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
 8004ade:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004aee:	683a      	ldr	r2, [r7, #0]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	f043 0307 	orr.w	r3, r3, #7
 8004af8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	609a      	str	r2, [r3, #8]
}
 8004b00:	bf00      	nop
 8004b02:	3714      	adds	r7, #20
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b087      	sub	sp, #28
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
 8004b18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	021a      	lsls	r2, r3, #8
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	431a      	orrs	r2, r3
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	697a      	ldr	r2, [r7, #20]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	697a      	ldr	r2, [r7, #20]
 8004b3e:	609a      	str	r2, [r3, #8]
}
 8004b40:	bf00      	nop
 8004b42:	371c      	adds	r7, #28
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b087      	sub	sp, #28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	f003 031f 	and.w	r3, r3, #31
 8004b5e:	2201      	movs	r2, #1
 8004b60:	fa02 f303 	lsl.w	r3, r2, r3
 8004b64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6a1a      	ldr	r2, [r3, #32]
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	43db      	mvns	r3, r3
 8004b6e:	401a      	ands	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6a1a      	ldr	r2, [r3, #32]
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	f003 031f 	and.w	r3, r3, #31
 8004b7e:	6879      	ldr	r1, [r7, #4]
 8004b80:	fa01 f303 	lsl.w	r3, r1, r3
 8004b84:	431a      	orrs	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	621a      	str	r2, [r3, #32]
}
 8004b8a:	bf00      	nop
 8004b8c:	371c      	adds	r7, #28
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
	...

08004b98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d101      	bne.n	8004bb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bac:	2302      	movs	r3, #2
 8004bae:	e068      	b.n	8004c82 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a2e      	ldr	r2, [pc, #184]	; (8004c90 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d004      	beq.n	8004be4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a2d      	ldr	r2, [pc, #180]	; (8004c94 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d108      	bne.n	8004bf6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004bea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bfc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a1e      	ldr	r2, [pc, #120]	; (8004c90 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d01d      	beq.n	8004c56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c22:	d018      	beq.n	8004c56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a1b      	ldr	r2, [pc, #108]	; (8004c98 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d013      	beq.n	8004c56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a1a      	ldr	r2, [pc, #104]	; (8004c9c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d00e      	beq.n	8004c56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a18      	ldr	r2, [pc, #96]	; (8004ca0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d009      	beq.n	8004c56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a13      	ldr	r2, [pc, #76]	; (8004c94 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d004      	beq.n	8004c56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a14      	ldr	r2, [pc, #80]	; (8004ca4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d10c      	bne.n	8004c70 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	68ba      	ldr	r2, [r7, #8]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68ba      	ldr	r2, [r7, #8]
 8004c6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3714      	adds	r7, #20
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	40012c00 	.word	0x40012c00
 8004c94:	40013400 	.word	0x40013400
 8004c98:	40000400 	.word	0x40000400
 8004c9c:	40000800 	.word	0x40000800
 8004ca0:	40000c00 	.word	0x40000c00
 8004ca4:	40014000 	.word	0x40014000

08004ca8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d101      	bne.n	8004cc4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	e065      	b.n	8004d90 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	695b      	ldr	r3, [r3, #20]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	041b      	lsls	r3, r3, #16
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a16      	ldr	r2, [pc, #88]	; (8004d9c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d004      	beq.n	8004d52 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a14      	ldr	r2, [pc, #80]	; (8004da0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d115      	bne.n	8004d7e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5c:	051b      	lsls	r3, r3, #20
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	69db      	ldr	r3, [r3, #28]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3714      	adds	r7, #20
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr
 8004d9c:	40012c00 	.word	0x40012c00
 8004da0:	40013400 	.word	0x40013400

08004da4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d101      	bne.n	8004db6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e040      	b.n	8004e38 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d106      	bne.n	8004dcc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f7fc f9e0 	bl	800118c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2224      	movs	r2, #36	; 0x24
 8004dd0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f022 0201 	bic.w	r2, r2, #1
 8004de0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 f82c 	bl	8004e40 <UART_SetConfig>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d101      	bne.n	8004df2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e022      	b.n	8004e38 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d002      	beq.n	8004e00 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 faaa 	bl	8005354 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	685a      	ldr	r2, [r3, #4]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	689a      	ldr	r2, [r3, #8]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f042 0201 	orr.w	r2, r2, #1
 8004e2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 fb31 	bl	8005498 <UART_CheckIdleState>
 8004e36:	4603      	mov	r3, r0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3708      	adds	r7, #8
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e40:	b5b0      	push	{r4, r5, r7, lr}
 8004e42:	b088      	sub	sp, #32
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	689a      	ldr	r2, [r3, #8]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	431a      	orrs	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	431a      	orrs	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	69db      	ldr	r3, [r3, #28]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	4bad      	ldr	r3, [pc, #692]	; (8005120 <UART_SetConfig+0x2e0>)
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	6812      	ldr	r2, [r2, #0]
 8004e72:	69f9      	ldr	r1, [r7, #28]
 8004e74:	430b      	orrs	r3, r1
 8004e76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	68da      	ldr	r2, [r3, #12]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4aa2      	ldr	r2, [pc, #648]	; (8005124 <UART_SetConfig+0x2e4>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d004      	beq.n	8004ea8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a1b      	ldr	r3, [r3, #32]
 8004ea2:	69fa      	ldr	r2, [r7, #28]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	69fa      	ldr	r2, [r7, #28]
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a99      	ldr	r2, [pc, #612]	; (8005128 <UART_SetConfig+0x2e8>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d121      	bne.n	8004f0a <UART_SetConfig+0xca>
 8004ec6:	4b99      	ldr	r3, [pc, #612]	; (800512c <UART_SetConfig+0x2ec>)
 8004ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ecc:	f003 0303 	and.w	r3, r3, #3
 8004ed0:	2b03      	cmp	r3, #3
 8004ed2:	d817      	bhi.n	8004f04 <UART_SetConfig+0xc4>
 8004ed4:	a201      	add	r2, pc, #4	; (adr r2, 8004edc <UART_SetConfig+0x9c>)
 8004ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eda:	bf00      	nop
 8004edc:	08004eed 	.word	0x08004eed
 8004ee0:	08004ef9 	.word	0x08004ef9
 8004ee4:	08004ef3 	.word	0x08004ef3
 8004ee8:	08004eff 	.word	0x08004eff
 8004eec:	2301      	movs	r3, #1
 8004eee:	76fb      	strb	r3, [r7, #27]
 8004ef0:	e0e7      	b.n	80050c2 <UART_SetConfig+0x282>
 8004ef2:	2302      	movs	r3, #2
 8004ef4:	76fb      	strb	r3, [r7, #27]
 8004ef6:	e0e4      	b.n	80050c2 <UART_SetConfig+0x282>
 8004ef8:	2304      	movs	r3, #4
 8004efa:	76fb      	strb	r3, [r7, #27]
 8004efc:	e0e1      	b.n	80050c2 <UART_SetConfig+0x282>
 8004efe:	2308      	movs	r3, #8
 8004f00:	76fb      	strb	r3, [r7, #27]
 8004f02:	e0de      	b.n	80050c2 <UART_SetConfig+0x282>
 8004f04:	2310      	movs	r3, #16
 8004f06:	76fb      	strb	r3, [r7, #27]
 8004f08:	e0db      	b.n	80050c2 <UART_SetConfig+0x282>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a88      	ldr	r2, [pc, #544]	; (8005130 <UART_SetConfig+0x2f0>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d132      	bne.n	8004f7a <UART_SetConfig+0x13a>
 8004f14:	4b85      	ldr	r3, [pc, #532]	; (800512c <UART_SetConfig+0x2ec>)
 8004f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1a:	f003 030c 	and.w	r3, r3, #12
 8004f1e:	2b0c      	cmp	r3, #12
 8004f20:	d828      	bhi.n	8004f74 <UART_SetConfig+0x134>
 8004f22:	a201      	add	r2, pc, #4	; (adr r2, 8004f28 <UART_SetConfig+0xe8>)
 8004f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f28:	08004f5d 	.word	0x08004f5d
 8004f2c:	08004f75 	.word	0x08004f75
 8004f30:	08004f75 	.word	0x08004f75
 8004f34:	08004f75 	.word	0x08004f75
 8004f38:	08004f69 	.word	0x08004f69
 8004f3c:	08004f75 	.word	0x08004f75
 8004f40:	08004f75 	.word	0x08004f75
 8004f44:	08004f75 	.word	0x08004f75
 8004f48:	08004f63 	.word	0x08004f63
 8004f4c:	08004f75 	.word	0x08004f75
 8004f50:	08004f75 	.word	0x08004f75
 8004f54:	08004f75 	.word	0x08004f75
 8004f58:	08004f6f 	.word	0x08004f6f
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	76fb      	strb	r3, [r7, #27]
 8004f60:	e0af      	b.n	80050c2 <UART_SetConfig+0x282>
 8004f62:	2302      	movs	r3, #2
 8004f64:	76fb      	strb	r3, [r7, #27]
 8004f66:	e0ac      	b.n	80050c2 <UART_SetConfig+0x282>
 8004f68:	2304      	movs	r3, #4
 8004f6a:	76fb      	strb	r3, [r7, #27]
 8004f6c:	e0a9      	b.n	80050c2 <UART_SetConfig+0x282>
 8004f6e:	2308      	movs	r3, #8
 8004f70:	76fb      	strb	r3, [r7, #27]
 8004f72:	e0a6      	b.n	80050c2 <UART_SetConfig+0x282>
 8004f74:	2310      	movs	r3, #16
 8004f76:	76fb      	strb	r3, [r7, #27]
 8004f78:	e0a3      	b.n	80050c2 <UART_SetConfig+0x282>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a6d      	ldr	r2, [pc, #436]	; (8005134 <UART_SetConfig+0x2f4>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d120      	bne.n	8004fc6 <UART_SetConfig+0x186>
 8004f84:	4b69      	ldr	r3, [pc, #420]	; (800512c <UART_SetConfig+0x2ec>)
 8004f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f8a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004f8e:	2b30      	cmp	r3, #48	; 0x30
 8004f90:	d013      	beq.n	8004fba <UART_SetConfig+0x17a>
 8004f92:	2b30      	cmp	r3, #48	; 0x30
 8004f94:	d814      	bhi.n	8004fc0 <UART_SetConfig+0x180>
 8004f96:	2b20      	cmp	r3, #32
 8004f98:	d009      	beq.n	8004fae <UART_SetConfig+0x16e>
 8004f9a:	2b20      	cmp	r3, #32
 8004f9c:	d810      	bhi.n	8004fc0 <UART_SetConfig+0x180>
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d002      	beq.n	8004fa8 <UART_SetConfig+0x168>
 8004fa2:	2b10      	cmp	r3, #16
 8004fa4:	d006      	beq.n	8004fb4 <UART_SetConfig+0x174>
 8004fa6:	e00b      	b.n	8004fc0 <UART_SetConfig+0x180>
 8004fa8:	2300      	movs	r3, #0
 8004faa:	76fb      	strb	r3, [r7, #27]
 8004fac:	e089      	b.n	80050c2 <UART_SetConfig+0x282>
 8004fae:	2302      	movs	r3, #2
 8004fb0:	76fb      	strb	r3, [r7, #27]
 8004fb2:	e086      	b.n	80050c2 <UART_SetConfig+0x282>
 8004fb4:	2304      	movs	r3, #4
 8004fb6:	76fb      	strb	r3, [r7, #27]
 8004fb8:	e083      	b.n	80050c2 <UART_SetConfig+0x282>
 8004fba:	2308      	movs	r3, #8
 8004fbc:	76fb      	strb	r3, [r7, #27]
 8004fbe:	e080      	b.n	80050c2 <UART_SetConfig+0x282>
 8004fc0:	2310      	movs	r3, #16
 8004fc2:	76fb      	strb	r3, [r7, #27]
 8004fc4:	e07d      	b.n	80050c2 <UART_SetConfig+0x282>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a5b      	ldr	r2, [pc, #364]	; (8005138 <UART_SetConfig+0x2f8>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d120      	bne.n	8005012 <UART_SetConfig+0x1d2>
 8004fd0:	4b56      	ldr	r3, [pc, #344]	; (800512c <UART_SetConfig+0x2ec>)
 8004fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004fda:	2bc0      	cmp	r3, #192	; 0xc0
 8004fdc:	d013      	beq.n	8005006 <UART_SetConfig+0x1c6>
 8004fde:	2bc0      	cmp	r3, #192	; 0xc0
 8004fe0:	d814      	bhi.n	800500c <UART_SetConfig+0x1cc>
 8004fe2:	2b80      	cmp	r3, #128	; 0x80
 8004fe4:	d009      	beq.n	8004ffa <UART_SetConfig+0x1ba>
 8004fe6:	2b80      	cmp	r3, #128	; 0x80
 8004fe8:	d810      	bhi.n	800500c <UART_SetConfig+0x1cc>
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d002      	beq.n	8004ff4 <UART_SetConfig+0x1b4>
 8004fee:	2b40      	cmp	r3, #64	; 0x40
 8004ff0:	d006      	beq.n	8005000 <UART_SetConfig+0x1c0>
 8004ff2:	e00b      	b.n	800500c <UART_SetConfig+0x1cc>
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	76fb      	strb	r3, [r7, #27]
 8004ff8:	e063      	b.n	80050c2 <UART_SetConfig+0x282>
 8004ffa:	2302      	movs	r3, #2
 8004ffc:	76fb      	strb	r3, [r7, #27]
 8004ffe:	e060      	b.n	80050c2 <UART_SetConfig+0x282>
 8005000:	2304      	movs	r3, #4
 8005002:	76fb      	strb	r3, [r7, #27]
 8005004:	e05d      	b.n	80050c2 <UART_SetConfig+0x282>
 8005006:	2308      	movs	r3, #8
 8005008:	76fb      	strb	r3, [r7, #27]
 800500a:	e05a      	b.n	80050c2 <UART_SetConfig+0x282>
 800500c:	2310      	movs	r3, #16
 800500e:	76fb      	strb	r3, [r7, #27]
 8005010:	e057      	b.n	80050c2 <UART_SetConfig+0x282>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a49      	ldr	r2, [pc, #292]	; (800513c <UART_SetConfig+0x2fc>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d125      	bne.n	8005068 <UART_SetConfig+0x228>
 800501c:	4b43      	ldr	r3, [pc, #268]	; (800512c <UART_SetConfig+0x2ec>)
 800501e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005026:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800502a:	d017      	beq.n	800505c <UART_SetConfig+0x21c>
 800502c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005030:	d817      	bhi.n	8005062 <UART_SetConfig+0x222>
 8005032:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005036:	d00b      	beq.n	8005050 <UART_SetConfig+0x210>
 8005038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800503c:	d811      	bhi.n	8005062 <UART_SetConfig+0x222>
 800503e:	2b00      	cmp	r3, #0
 8005040:	d003      	beq.n	800504a <UART_SetConfig+0x20a>
 8005042:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005046:	d006      	beq.n	8005056 <UART_SetConfig+0x216>
 8005048:	e00b      	b.n	8005062 <UART_SetConfig+0x222>
 800504a:	2300      	movs	r3, #0
 800504c:	76fb      	strb	r3, [r7, #27]
 800504e:	e038      	b.n	80050c2 <UART_SetConfig+0x282>
 8005050:	2302      	movs	r3, #2
 8005052:	76fb      	strb	r3, [r7, #27]
 8005054:	e035      	b.n	80050c2 <UART_SetConfig+0x282>
 8005056:	2304      	movs	r3, #4
 8005058:	76fb      	strb	r3, [r7, #27]
 800505a:	e032      	b.n	80050c2 <UART_SetConfig+0x282>
 800505c:	2308      	movs	r3, #8
 800505e:	76fb      	strb	r3, [r7, #27]
 8005060:	e02f      	b.n	80050c2 <UART_SetConfig+0x282>
 8005062:	2310      	movs	r3, #16
 8005064:	76fb      	strb	r3, [r7, #27]
 8005066:	e02c      	b.n	80050c2 <UART_SetConfig+0x282>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a2d      	ldr	r2, [pc, #180]	; (8005124 <UART_SetConfig+0x2e4>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d125      	bne.n	80050be <UART_SetConfig+0x27e>
 8005072:	4b2e      	ldr	r3, [pc, #184]	; (800512c <UART_SetConfig+0x2ec>)
 8005074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005078:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800507c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005080:	d017      	beq.n	80050b2 <UART_SetConfig+0x272>
 8005082:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005086:	d817      	bhi.n	80050b8 <UART_SetConfig+0x278>
 8005088:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800508c:	d00b      	beq.n	80050a6 <UART_SetConfig+0x266>
 800508e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005092:	d811      	bhi.n	80050b8 <UART_SetConfig+0x278>
 8005094:	2b00      	cmp	r3, #0
 8005096:	d003      	beq.n	80050a0 <UART_SetConfig+0x260>
 8005098:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800509c:	d006      	beq.n	80050ac <UART_SetConfig+0x26c>
 800509e:	e00b      	b.n	80050b8 <UART_SetConfig+0x278>
 80050a0:	2300      	movs	r3, #0
 80050a2:	76fb      	strb	r3, [r7, #27]
 80050a4:	e00d      	b.n	80050c2 <UART_SetConfig+0x282>
 80050a6:	2302      	movs	r3, #2
 80050a8:	76fb      	strb	r3, [r7, #27]
 80050aa:	e00a      	b.n	80050c2 <UART_SetConfig+0x282>
 80050ac:	2304      	movs	r3, #4
 80050ae:	76fb      	strb	r3, [r7, #27]
 80050b0:	e007      	b.n	80050c2 <UART_SetConfig+0x282>
 80050b2:	2308      	movs	r3, #8
 80050b4:	76fb      	strb	r3, [r7, #27]
 80050b6:	e004      	b.n	80050c2 <UART_SetConfig+0x282>
 80050b8:	2310      	movs	r3, #16
 80050ba:	76fb      	strb	r3, [r7, #27]
 80050bc:	e001      	b.n	80050c2 <UART_SetConfig+0x282>
 80050be:	2310      	movs	r3, #16
 80050c0:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a17      	ldr	r2, [pc, #92]	; (8005124 <UART_SetConfig+0x2e4>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	f040 8087 	bne.w	80051dc <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80050ce:	7efb      	ldrb	r3, [r7, #27]
 80050d0:	2b08      	cmp	r3, #8
 80050d2:	d837      	bhi.n	8005144 <UART_SetConfig+0x304>
 80050d4:	a201      	add	r2, pc, #4	; (adr r2, 80050dc <UART_SetConfig+0x29c>)
 80050d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050da:	bf00      	nop
 80050dc:	08005101 	.word	0x08005101
 80050e0:	08005145 	.word	0x08005145
 80050e4:	08005109 	.word	0x08005109
 80050e8:	08005145 	.word	0x08005145
 80050ec:	0800510f 	.word	0x0800510f
 80050f0:	08005145 	.word	0x08005145
 80050f4:	08005145 	.word	0x08005145
 80050f8:	08005145 	.word	0x08005145
 80050fc:	08005117 	.word	0x08005117
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005100:	f7fd ff8a 	bl	8003018 <HAL_RCC_GetPCLK1Freq>
 8005104:	6178      	str	r0, [r7, #20]
        break;
 8005106:	e022      	b.n	800514e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005108:	4b0d      	ldr	r3, [pc, #52]	; (8005140 <UART_SetConfig+0x300>)
 800510a:	617b      	str	r3, [r7, #20]
        break;
 800510c:	e01f      	b.n	800514e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800510e:	f7fd feeb 	bl	8002ee8 <HAL_RCC_GetSysClockFreq>
 8005112:	6178      	str	r0, [r7, #20]
        break;
 8005114:	e01b      	b.n	800514e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005116:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800511a:	617b      	str	r3, [r7, #20]
        break;
 800511c:	e017      	b.n	800514e <UART_SetConfig+0x30e>
 800511e:	bf00      	nop
 8005120:	efff69f3 	.word	0xefff69f3
 8005124:	40008000 	.word	0x40008000
 8005128:	40013800 	.word	0x40013800
 800512c:	40021000 	.word	0x40021000
 8005130:	40004400 	.word	0x40004400
 8005134:	40004800 	.word	0x40004800
 8005138:	40004c00 	.word	0x40004c00
 800513c:	40005000 	.word	0x40005000
 8005140:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005144:	2300      	movs	r3, #0
 8005146:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	76bb      	strb	r3, [r7, #26]
        break;
 800514c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	2b00      	cmp	r3, #0
 8005152:	f000 80f1 	beq.w	8005338 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685a      	ldr	r2, [r3, #4]
 800515a:	4613      	mov	r3, r2
 800515c:	005b      	lsls	r3, r3, #1
 800515e:	4413      	add	r3, r2
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	429a      	cmp	r2, r3
 8005164:	d305      	bcc.n	8005172 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800516c:	697a      	ldr	r2, [r7, #20]
 800516e:	429a      	cmp	r2, r3
 8005170:	d902      	bls.n	8005178 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	76bb      	strb	r3, [r7, #26]
 8005176:	e0df      	b.n	8005338 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	4618      	mov	r0, r3
 800517c:	f04f 0100 	mov.w	r1, #0
 8005180:	f04f 0200 	mov.w	r2, #0
 8005184:	f04f 0300 	mov.w	r3, #0
 8005188:	020b      	lsls	r3, r1, #8
 800518a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800518e:	0202      	lsls	r2, r0, #8
 8005190:	6879      	ldr	r1, [r7, #4]
 8005192:	6849      	ldr	r1, [r1, #4]
 8005194:	0849      	lsrs	r1, r1, #1
 8005196:	4608      	mov	r0, r1
 8005198:	f04f 0100 	mov.w	r1, #0
 800519c:	1814      	adds	r4, r2, r0
 800519e:	eb43 0501 	adc.w	r5, r3, r1
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	461a      	mov	r2, r3
 80051a8:	f04f 0300 	mov.w	r3, #0
 80051ac:	4620      	mov	r0, r4
 80051ae:	4629      	mov	r1, r5
 80051b0:	f7fb f80a 	bl	80001c8 <__aeabi_uldivmod>
 80051b4:	4602      	mov	r2, r0
 80051b6:	460b      	mov	r3, r1
 80051b8:	4613      	mov	r3, r2
 80051ba:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051c2:	d308      	bcc.n	80051d6 <UART_SetConfig+0x396>
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051ca:	d204      	bcs.n	80051d6 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	60da      	str	r2, [r3, #12]
 80051d4:	e0b0      	b.n	8005338 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	76bb      	strb	r3, [r7, #26]
 80051da:	e0ad      	b.n	8005338 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	69db      	ldr	r3, [r3, #28]
 80051e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051e4:	d15c      	bne.n	80052a0 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80051e6:	7efb      	ldrb	r3, [r7, #27]
 80051e8:	2b08      	cmp	r3, #8
 80051ea:	d828      	bhi.n	800523e <UART_SetConfig+0x3fe>
 80051ec:	a201      	add	r2, pc, #4	; (adr r2, 80051f4 <UART_SetConfig+0x3b4>)
 80051ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f2:	bf00      	nop
 80051f4:	08005219 	.word	0x08005219
 80051f8:	08005221 	.word	0x08005221
 80051fc:	08005229 	.word	0x08005229
 8005200:	0800523f 	.word	0x0800523f
 8005204:	0800522f 	.word	0x0800522f
 8005208:	0800523f 	.word	0x0800523f
 800520c:	0800523f 	.word	0x0800523f
 8005210:	0800523f 	.word	0x0800523f
 8005214:	08005237 	.word	0x08005237
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005218:	f7fd fefe 	bl	8003018 <HAL_RCC_GetPCLK1Freq>
 800521c:	6178      	str	r0, [r7, #20]
        break;
 800521e:	e013      	b.n	8005248 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005220:	f7fd ff10 	bl	8003044 <HAL_RCC_GetPCLK2Freq>
 8005224:	6178      	str	r0, [r7, #20]
        break;
 8005226:	e00f      	b.n	8005248 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005228:	4b49      	ldr	r3, [pc, #292]	; (8005350 <UART_SetConfig+0x510>)
 800522a:	617b      	str	r3, [r7, #20]
        break;
 800522c:	e00c      	b.n	8005248 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800522e:	f7fd fe5b 	bl	8002ee8 <HAL_RCC_GetSysClockFreq>
 8005232:	6178      	str	r0, [r7, #20]
        break;
 8005234:	e008      	b.n	8005248 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800523a:	617b      	str	r3, [r7, #20]
        break;
 800523c:	e004      	b.n	8005248 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800523e:	2300      	movs	r3, #0
 8005240:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	76bb      	strb	r3, [r7, #26]
        break;
 8005246:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d074      	beq.n	8005338 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	005a      	lsls	r2, r3, #1
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	085b      	lsrs	r3, r3, #1
 8005258:	441a      	add	r2, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005262:	b29b      	uxth	r3, r3
 8005264:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	2b0f      	cmp	r3, #15
 800526a:	d916      	bls.n	800529a <UART_SetConfig+0x45a>
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005272:	d212      	bcs.n	800529a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	b29b      	uxth	r3, r3
 8005278:	f023 030f 	bic.w	r3, r3, #15
 800527c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	085b      	lsrs	r3, r3, #1
 8005282:	b29b      	uxth	r3, r3
 8005284:	f003 0307 	and.w	r3, r3, #7
 8005288:	b29a      	uxth	r2, r3
 800528a:	89fb      	ldrh	r3, [r7, #14]
 800528c:	4313      	orrs	r3, r2
 800528e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	89fa      	ldrh	r2, [r7, #14]
 8005296:	60da      	str	r2, [r3, #12]
 8005298:	e04e      	b.n	8005338 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	76bb      	strb	r3, [r7, #26]
 800529e:	e04b      	b.n	8005338 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80052a0:	7efb      	ldrb	r3, [r7, #27]
 80052a2:	2b08      	cmp	r3, #8
 80052a4:	d827      	bhi.n	80052f6 <UART_SetConfig+0x4b6>
 80052a6:	a201      	add	r2, pc, #4	; (adr r2, 80052ac <UART_SetConfig+0x46c>)
 80052a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ac:	080052d1 	.word	0x080052d1
 80052b0:	080052d9 	.word	0x080052d9
 80052b4:	080052e1 	.word	0x080052e1
 80052b8:	080052f7 	.word	0x080052f7
 80052bc:	080052e7 	.word	0x080052e7
 80052c0:	080052f7 	.word	0x080052f7
 80052c4:	080052f7 	.word	0x080052f7
 80052c8:	080052f7 	.word	0x080052f7
 80052cc:	080052ef 	.word	0x080052ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052d0:	f7fd fea2 	bl	8003018 <HAL_RCC_GetPCLK1Freq>
 80052d4:	6178      	str	r0, [r7, #20]
        break;
 80052d6:	e013      	b.n	8005300 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052d8:	f7fd feb4 	bl	8003044 <HAL_RCC_GetPCLK2Freq>
 80052dc:	6178      	str	r0, [r7, #20]
        break;
 80052de:	e00f      	b.n	8005300 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052e0:	4b1b      	ldr	r3, [pc, #108]	; (8005350 <UART_SetConfig+0x510>)
 80052e2:	617b      	str	r3, [r7, #20]
        break;
 80052e4:	e00c      	b.n	8005300 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052e6:	f7fd fdff 	bl	8002ee8 <HAL_RCC_GetSysClockFreq>
 80052ea:	6178      	str	r0, [r7, #20]
        break;
 80052ec:	e008      	b.n	8005300 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052f2:	617b      	str	r3, [r7, #20]
        break;
 80052f4:	e004      	b.n	8005300 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80052f6:	2300      	movs	r3, #0
 80052f8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	76bb      	strb	r3, [r7, #26]
        break;
 80052fe:	bf00      	nop
    }

    if (pclk != 0U)
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d018      	beq.n	8005338 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	085a      	lsrs	r2, r3, #1
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	441a      	add	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	fbb2 f3f3 	udiv	r3, r2, r3
 8005318:	b29b      	uxth	r3, r3
 800531a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	2b0f      	cmp	r3, #15
 8005320:	d908      	bls.n	8005334 <UART_SetConfig+0x4f4>
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005328:	d204      	bcs.n	8005334 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	693a      	ldr	r2, [r7, #16]
 8005330:	60da      	str	r2, [r3, #12]
 8005332:	e001      	b.n	8005338 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005344:	7ebb      	ldrb	r3, [r7, #26]
}
 8005346:	4618      	mov	r0, r3
 8005348:	3720      	adds	r7, #32
 800534a:	46bd      	mov	sp, r7
 800534c:	bdb0      	pop	{r4, r5, r7, pc}
 800534e:	bf00      	nop
 8005350:	00f42400 	.word	0x00f42400

08005354 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005360:	f003 0301 	and.w	r3, r3, #1
 8005364:	2b00      	cmp	r3, #0
 8005366:	d00a      	beq.n	800537e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	430a      	orrs	r2, r1
 800537c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005382:	f003 0302 	and.w	r3, r3, #2
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00a      	beq.n	80053a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	430a      	orrs	r2, r1
 800539e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a4:	f003 0304 	and.w	r3, r3, #4
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00a      	beq.n	80053c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	430a      	orrs	r2, r1
 80053c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c6:	f003 0308 	and.w	r3, r3, #8
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00a      	beq.n	80053e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	430a      	orrs	r2, r1
 80053e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e8:	f003 0310 	and.w	r3, r3, #16
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00a      	beq.n	8005406 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	430a      	orrs	r2, r1
 8005404:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540a:	f003 0320 	and.w	r3, r3, #32
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00a      	beq.n	8005428 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	430a      	orrs	r2, r1
 8005426:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005430:	2b00      	cmp	r3, #0
 8005432:	d01a      	beq.n	800546a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	430a      	orrs	r2, r1
 8005448:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005452:	d10a      	bne.n	800546a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	430a      	orrs	r2, r1
 8005468:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00a      	beq.n	800548c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	430a      	orrs	r2, r1
 800548a:	605a      	str	r2, [r3, #4]
  }
}
 800548c:	bf00      	nop
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b086      	sub	sp, #24
 800549c:	af02      	add	r7, sp, #8
 800549e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054a8:	f7fc f85c 	bl	8001564 <HAL_GetTick>
 80054ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0308 	and.w	r3, r3, #8
 80054b8:	2b08      	cmp	r3, #8
 80054ba:	d10e      	bne.n	80054da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054c0:	9300      	str	r3, [sp, #0]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f82d 	bl	800552a <UART_WaitOnFlagUntilTimeout>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d001      	beq.n	80054da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e023      	b.n	8005522 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0304 	and.w	r3, r3, #4
 80054e4:	2b04      	cmp	r3, #4
 80054e6:	d10e      	bne.n	8005506 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054ec:	9300      	str	r3, [sp, #0]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 f817 	bl	800552a <UART_WaitOnFlagUntilTimeout>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d001      	beq.n	8005506 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e00d      	b.n	8005522 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2220      	movs	r2, #32
 800550a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2220      	movs	r2, #32
 8005510:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800552a:	b580      	push	{r7, lr}
 800552c:	b084      	sub	sp, #16
 800552e:	af00      	add	r7, sp, #0
 8005530:	60f8      	str	r0, [r7, #12]
 8005532:	60b9      	str	r1, [r7, #8]
 8005534:	603b      	str	r3, [r7, #0]
 8005536:	4613      	mov	r3, r2
 8005538:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800553a:	e05e      	b.n	80055fa <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005542:	d05a      	beq.n	80055fa <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005544:	f7fc f80e 	bl	8001564 <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	69ba      	ldr	r2, [r7, #24]
 8005550:	429a      	cmp	r2, r3
 8005552:	d302      	bcc.n	800555a <UART_WaitOnFlagUntilTimeout+0x30>
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d11b      	bne.n	8005592 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005568:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	689a      	ldr	r2, [r3, #8]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f022 0201 	bic.w	r2, r2, #1
 8005578:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2220      	movs	r2, #32
 800557e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2220      	movs	r2, #32
 8005584:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e043      	b.n	800561a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0304 	and.w	r3, r3, #4
 800559c:	2b00      	cmp	r3, #0
 800559e:	d02c      	beq.n	80055fa <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	69db      	ldr	r3, [r3, #28]
 80055a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055ae:	d124      	bne.n	80055fa <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055b8:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80055c8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	689a      	ldr	r2, [r3, #8]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f022 0201 	bic.w	r2, r2, #1
 80055d8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2220      	movs	r2, #32
 80055de:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2220      	movs	r2, #32
 80055e4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2220      	movs	r2, #32
 80055ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e00f      	b.n	800561a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	69da      	ldr	r2, [r3, #28]
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	4013      	ands	r3, r2
 8005604:	68ba      	ldr	r2, [r7, #8]
 8005606:	429a      	cmp	r2, r3
 8005608:	bf0c      	ite	eq
 800560a:	2301      	moveq	r3, #1
 800560c:	2300      	movne	r3, #0
 800560e:	b2db      	uxtb	r3, r3
 8005610:	461a      	mov	r2, r3
 8005612:	79fb      	ldrb	r3, [r7, #7]
 8005614:	429a      	cmp	r2, r3
 8005616:	d091      	beq.n	800553c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005622:	b084      	sub	sp, #16
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	f107 001c 	add.w	r0, r7, #28
 8005630:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 fa23 	bl	8005a8c <USB_CoreReset>
 8005646:	4603      	mov	r3, r0
 8005648:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800564a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800564c:	2b00      	cmp	r3, #0
 800564e:	d106      	bne.n	800565e <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005654:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	639a      	str	r2, [r3, #56]	; 0x38
 800565c:	e005      	b.n	800566a <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005662:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800566a:	7bfb      	ldrb	r3, [r7, #15]
}
 800566c:	4618      	mov	r0, r3
 800566e:	3710      	adds	r7, #16
 8005670:	46bd      	mov	sp, r7
 8005672:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005676:	b004      	add	sp, #16
 8005678:	4770      	bx	lr

0800567a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800567a:	b480      	push	{r7}
 800567c:	b083      	sub	sp, #12
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	f023 0201 	bic.w	r2, r3, #1
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	460b      	mov	r3, r1
 80056a6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80056b4:	78fb      	ldrb	r3, [r7, #3]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d106      	bne.n	80056c8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	60da      	str	r2, [r3, #12]
 80056c6:	e00b      	b.n	80056e0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80056c8:	78fb      	ldrb	r3, [r7, #3]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d106      	bne.n	80056dc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	60da      	str	r2, [r3, #12]
 80056da:	e001      	b.n	80056e0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e003      	b.n	80056e8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80056e0:	2032      	movs	r0, #50	; 0x32
 80056e2:	f7fb ff4b 	bl	800157c <HAL_Delay>

  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3708      	adds	r7, #8
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056f0:	b084      	sub	sp, #16
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b086      	sub	sp, #24
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
 80056fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80056fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005702:	2300      	movs	r3, #0
 8005704:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800570a:	2300      	movs	r3, #0
 800570c:	613b      	str	r3, [r7, #16]
 800570e:	e009      	b.n	8005724 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	3340      	adds	r3, #64	; 0x40
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4413      	add	r3, r2
 800571a:	2200      	movs	r2, #0
 800571c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	3301      	adds	r3, #1
 8005722:	613b      	str	r3, [r7, #16]
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	2b0e      	cmp	r3, #14
 8005728:	d9f2      	bls.n	8005710 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800572a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800572c:	2b00      	cmp	r3, #0
 800572e:	d11c      	bne.n	800576a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800573e:	f043 0302 	orr.w	r3, r3, #2
 8005742:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005748:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	601a      	str	r2, [r3, #0]
 8005768:	e005      	b.n	8005776 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800577c:	461a      	mov	r2, r3
 800577e:	2300      	movs	r3, #0
 8005780:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005788:	4619      	mov	r1, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005790:	461a      	mov	r2, r3
 8005792:	680b      	ldr	r3, [r1, #0]
 8005794:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005796:	2103      	movs	r1, #3
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 f93d 	bl	8005a18 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800579e:	2110      	movs	r1, #16
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 f8f1 	bl	8005988 <USB_FlushTxFifo>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d001      	beq.n	80057b0 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 f90f 	bl	80059d4 <USB_FlushRxFifo>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d001      	beq.n	80057c0 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057c6:	461a      	mov	r2, r3
 80057c8:	2300      	movs	r3, #0
 80057ca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057d2:	461a      	mov	r2, r3
 80057d4:	2300      	movs	r3, #0
 80057d6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057de:	461a      	mov	r2, r3
 80057e0:	2300      	movs	r3, #0
 80057e2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057e4:	2300      	movs	r3, #0
 80057e6:	613b      	str	r3, [r7, #16]
 80057e8:	e043      	b.n	8005872 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	015a      	lsls	r2, r3, #5
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	4413      	add	r3, r2
 80057f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005800:	d118      	bne.n	8005834 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d10a      	bne.n	800581e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	015a      	lsls	r2, r3, #5
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	4413      	add	r3, r2
 8005810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005814:	461a      	mov	r2, r3
 8005816:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800581a:	6013      	str	r3, [r2, #0]
 800581c:	e013      	b.n	8005846 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	015a      	lsls	r2, r3, #5
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	4413      	add	r3, r2
 8005826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800582a:	461a      	mov	r2, r3
 800582c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005830:	6013      	str	r3, [r2, #0]
 8005832:	e008      	b.n	8005846 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	015a      	lsls	r2, r3, #5
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	4413      	add	r3, r2
 800583c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005840:	461a      	mov	r2, r3
 8005842:	2300      	movs	r3, #0
 8005844:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	015a      	lsls	r2, r3, #5
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	4413      	add	r3, r2
 800584e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005852:	461a      	mov	r2, r3
 8005854:	2300      	movs	r3, #0
 8005856:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	015a      	lsls	r2, r3, #5
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	4413      	add	r3, r2
 8005860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005864:	461a      	mov	r2, r3
 8005866:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800586a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	3301      	adds	r3, #1
 8005870:	613b      	str	r3, [r7, #16]
 8005872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	429a      	cmp	r2, r3
 8005878:	d3b7      	bcc.n	80057ea <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800587a:	2300      	movs	r3, #0
 800587c:	613b      	str	r3, [r7, #16]
 800587e:	e043      	b.n	8005908 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	015a      	lsls	r2, r3, #5
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	4413      	add	r3, r2
 8005888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005892:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005896:	d118      	bne.n	80058ca <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d10a      	bne.n	80058b4 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	015a      	lsls	r2, r3, #5
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	4413      	add	r3, r2
 80058a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058aa:	461a      	mov	r2, r3
 80058ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80058b0:	6013      	str	r3, [r2, #0]
 80058b2:	e013      	b.n	80058dc <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	015a      	lsls	r2, r3, #5
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	4413      	add	r3, r2
 80058bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c0:	461a      	mov	r2, r3
 80058c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80058c6:	6013      	str	r3, [r2, #0]
 80058c8:	e008      	b.n	80058dc <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	015a      	lsls	r2, r3, #5
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	4413      	add	r3, r2
 80058d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d6:	461a      	mov	r2, r3
 80058d8:	2300      	movs	r3, #0
 80058da:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	015a      	lsls	r2, r3, #5
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	4413      	add	r3, r2
 80058e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e8:	461a      	mov	r2, r3
 80058ea:	2300      	movs	r3, #0
 80058ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	015a      	lsls	r2, r3, #5
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	4413      	add	r3, r2
 80058f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058fa:	461a      	mov	r2, r3
 80058fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005900:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	3301      	adds	r3, #1
 8005906:	613b      	str	r3, [r7, #16]
 8005908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	429a      	cmp	r2, r3
 800590e:	d3b7      	bcc.n	8005880 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800591e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005922:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005930:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	f043 0210 	orr.w	r2, r3, #16
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	699a      	ldr	r2, [r3, #24]
 8005942:	4b10      	ldr	r3, [pc, #64]	; (8005984 <USB_DevInit+0x294>)
 8005944:	4313      	orrs	r3, r2
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800594a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800594c:	2b00      	cmp	r3, #0
 800594e:	d005      	beq.n	800595c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	f043 0208 	orr.w	r2, r3, #8
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800595c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800595e:	2b01      	cmp	r3, #1
 8005960:	d107      	bne.n	8005972 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800596a:	f043 0304 	orr.w	r3, r3, #4
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005972:	7dfb      	ldrb	r3, [r7, #23]
}
 8005974:	4618      	mov	r0, r3
 8005976:	3718      	adds	r7, #24
 8005978:	46bd      	mov	sp, r7
 800597a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800597e:	b004      	add	sp, #16
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	803c3800 	.word	0x803c3800

08005988 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005992:	2300      	movs	r3, #0
 8005994:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	019b      	lsls	r3, r3, #6
 800599a:	f043 0220 	orr.w	r2, r3, #32
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	3301      	adds	r3, #1
 80059a6:	60fb      	str	r3, [r7, #12]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	4a09      	ldr	r2, [pc, #36]	; (80059d0 <USB_FlushTxFifo+0x48>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d901      	bls.n	80059b4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80059b0:	2303      	movs	r3, #3
 80059b2:	e006      	b.n	80059c2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	f003 0320 	and.w	r3, r3, #32
 80059bc:	2b20      	cmp	r3, #32
 80059be:	d0f0      	beq.n	80059a2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3714      	adds	r7, #20
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	00030d40 	.word	0x00030d40

080059d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80059dc:	2300      	movs	r3, #0
 80059de:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2210      	movs	r2, #16
 80059e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	3301      	adds	r3, #1
 80059ea:	60fb      	str	r3, [r7, #12]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	4a09      	ldr	r2, [pc, #36]	; (8005a14 <USB_FlushRxFifo+0x40>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d901      	bls.n	80059f8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e006      	b.n	8005a06 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	f003 0310 	and.w	r3, r3, #16
 8005a00:	2b10      	cmp	r3, #16
 8005a02:	d0f0      	beq.n	80059e6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3714      	adds	r7, #20
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	00030d40 	.word	0x00030d40

08005a18 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	460b      	mov	r3, r1
 8005a22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	78fb      	ldrb	r3, [r7, #3]
 8005a32:	68f9      	ldr	r1, [r7, #12]
 8005a34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3714      	adds	r7, #20
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr

08005a4a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005a4a:	b480      	push	{r7}
 8005a4c:	b085      	sub	sp, #20
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005a64:	f023 0303 	bic.w	r3, r3, #3
 8005a68:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a78:	f043 0302 	orr.w	r3, r3, #2
 8005a7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3714      	adds	r7, #20
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005a94:	2300      	movs	r3, #0
 8005a96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	60fb      	str	r3, [r7, #12]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	4a13      	ldr	r2, [pc, #76]	; (8005af0 <USB_CoreReset+0x64>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d901      	bls.n	8005aaa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005aa6:	2303      	movs	r3, #3
 8005aa8:	e01b      	b.n	8005ae2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	daf2      	bge.n	8005a98 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	f043 0201 	orr.w	r2, r3, #1
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	60fb      	str	r3, [r7, #12]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	4a09      	ldr	r2, [pc, #36]	; (8005af0 <USB_CoreReset+0x64>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d901      	bls.n	8005ad4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e006      	b.n	8005ae2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	f003 0301 	and.w	r3, r3, #1
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d0f0      	beq.n	8005ac2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3714      	adds	r7, #20
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	00030d40 	.word	0x00030d40

08005af4 <__libc_init_array>:
 8005af4:	b570      	push	{r4, r5, r6, lr}
 8005af6:	4d0d      	ldr	r5, [pc, #52]	; (8005b2c <__libc_init_array+0x38>)
 8005af8:	4c0d      	ldr	r4, [pc, #52]	; (8005b30 <__libc_init_array+0x3c>)
 8005afa:	1b64      	subs	r4, r4, r5
 8005afc:	10a4      	asrs	r4, r4, #2
 8005afe:	2600      	movs	r6, #0
 8005b00:	42a6      	cmp	r6, r4
 8005b02:	d109      	bne.n	8005b18 <__libc_init_array+0x24>
 8005b04:	4d0b      	ldr	r5, [pc, #44]	; (8005b34 <__libc_init_array+0x40>)
 8005b06:	4c0c      	ldr	r4, [pc, #48]	; (8005b38 <__libc_init_array+0x44>)
 8005b08:	f000 f820 	bl	8005b4c <_init>
 8005b0c:	1b64      	subs	r4, r4, r5
 8005b0e:	10a4      	asrs	r4, r4, #2
 8005b10:	2600      	movs	r6, #0
 8005b12:	42a6      	cmp	r6, r4
 8005b14:	d105      	bne.n	8005b22 <__libc_init_array+0x2e>
 8005b16:	bd70      	pop	{r4, r5, r6, pc}
 8005b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b1c:	4798      	blx	r3
 8005b1e:	3601      	adds	r6, #1
 8005b20:	e7ee      	b.n	8005b00 <__libc_init_array+0xc>
 8005b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b26:	4798      	blx	r3
 8005b28:	3601      	adds	r6, #1
 8005b2a:	e7f2      	b.n	8005b12 <__libc_init_array+0x1e>
 8005b2c:	08005bb4 	.word	0x08005bb4
 8005b30:	08005bb4 	.word	0x08005bb4
 8005b34:	08005bb4 	.word	0x08005bb4
 8005b38:	08005bb8 	.word	0x08005bb8

08005b3c <memset>:
 8005b3c:	4402      	add	r2, r0
 8005b3e:	4603      	mov	r3, r0
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d100      	bne.n	8005b46 <memset+0xa>
 8005b44:	4770      	bx	lr
 8005b46:	f803 1b01 	strb.w	r1, [r3], #1
 8005b4a:	e7f9      	b.n	8005b40 <memset+0x4>

08005b4c <_init>:
 8005b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b4e:	bf00      	nop
 8005b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b52:	bc08      	pop	{r3}
 8005b54:	469e      	mov	lr, r3
 8005b56:	4770      	bx	lr

08005b58 <_fini>:
 8005b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b5a:	bf00      	nop
 8005b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b5e:	bc08      	pop	{r3}
 8005b60:	469e      	mov	lr, r3
 8005b62:	4770      	bx	lr
